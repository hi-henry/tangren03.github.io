<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Ryan's Zone]]></title>
  <link href="http://ryantang.me/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://ryantang.me/"/>
  <updated>2017-01-23T18:07:18+08:00</updated>
  <id>http://ryantang.me/</id>
  <author>
    <name><![CDATA[唐韧_Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[置换测试: Mock, Stub 和其他]]></title>
    <link href="http://ryantang.me/blog/2014/08/21/test-doubles/"/>
    <updated>2014-08-21T10:18:38+08:00</updated>
    <id>http://ryantang.me/blog/2014/08/21/test-doubles</id>
    <content type="html"><![CDATA[<h6>本文为objc.io原创译文，发布在<a href="http://objccn.io/issue-15-5/">objc中国</a>上。</h6>

<h2>简介</h2>

<p>在理想情况下，你所做的所有测试都是能应对你实际代码的高级测试。例如，UI 测试将模拟实际的用户输入（Klaas 在<a href="http://objccn.io/issue-15-6">他的文章</a>中有讨论）等等。实但际上，这并非永远都是个好主意。为每个测试用例都访问一次数据库或者旋转一次 UI 会使你的测试跑得非常慢，这会降低你的生产力，并导致你不去经常跑那些测试。若你测试的某段代码依赖于网络连接，这会要求你的测试环境具备网络接入条件，而且这也难以模拟某些特殊的测试，比如当电话处于飞行模式情况下的时候。</p>

<p>正因如此，我们可以用一些模拟代码替换你的实际代码来编写一些测试用例。</p>

<!--More-->


<h2>什么时候你会需要用到一些模拟 (mock) 对象呢？</h2>

<p>让我们从以下这些不同类型的模拟对象的基本定义开始。</p>

<p><em>double</em> 可以理解为置换，它是所有模拟测试对象的统称，我们也可以称它为替身。一般来说，当你创建任意一种测试置换对象时，它将被用来替代某个指定类的对象。</p>

<p><em>stub</em> 可以理解为测试桩，它能实现当特定的方法被调用时，返回一个指定的模拟值。如果你的测试用例需要一个伴生对象来提供一些数据，可以使用 stub 来取代数据源，在测试设置时可以指定返回每次一致的模拟数据。</p>

<p><em>spy</em> 可以理解为侦查，它负责汇报情况，持续追踪什么方法被调用了，以及调用过程中传递了哪些参数。你能用它来实现测试断言，比如一个特定的方法是否被调用或者是否使用正确的参数调用。当你需要测试两个对象间的某些协议或者关系时会非常有用。</p>

<p><em>mock</em> 与 spy 类似，但在使用上有些许不同。<em>spy</em> 追踪所有的方法调用，并在事后让你写断言，而 mock 通常需要你事先设定期望。你告诉它你期望发生什么，然后执行测试代码并验证最后的结果与事先定义的期望是否一致。</p>

<p><em>fake</em> 是一个具备完整功能实现和行为的对象，行为上来说它和这个类型的真实对象上一样，但不同于它所模拟的类，它使测试变得更加容易。一个典型的例子是使用内存中的数据库来生成一个数据持久化对象，而不是去访问一个真正的生产环境的数据库。</p>

<p>实践中，这些术语常常用起来不同于它们的定义，甚至可以互换。稍后我们在这篇文章中会看到一些库，它们自认为自己是 &ldquo;mock 对象框架"，但是其实它们也提供 stub 的功能，而且验证行为的方式也类似于我描述的 "spy&rdquo; 而不是 &ldquo;mock"。所以不要太过于陷入这些词汇的细节；我下这些定义更多的是因为要在高层次上区分这些概念，并且它对考虑不同类型测试对象的行为会有帮助。</p>

<p>如果你对不同类型的模拟测试对象更多的细节讨论感兴趣，Martin Fowler 的文章 <a href="http://martinfowler.com/articles/mocksArentStubs.html">&ldquo;Mocks Aren&rsquo;t Stubs&rdquo;</a> 被认为是关于这个问题的权威讨论。</p>

<h3>模拟主义者 (Mockists) vs. 统计主义者 (Statists)</h3>

<p>许多关于模拟对象的讨论主要是衍生自 Fowler 的文章的，它们讨论了两种不同类型的程序员，模拟主义者和统计主义者，所写的测试。</p>

<p>模拟主意的方式是测试对象之间的交互。通过使用模拟对象，你可以更容易地验证被测对象是否遵循了它与其他类已建立的协议，使得在正确的时间发生正确的外部调用。对于那些使用行为驱动 (behavior-driven) 的开发者来说，这种测试可以驱动出更好的生产代码，因为你需要明确模拟出特定的方法，这可以帮你设计出在两个对象之间使用的更优雅的API，这种想法与模拟驱动紧密联系在一起。因此模拟主义的测试更偏向于单元级别的测试，而不是完全的端到端 (end-to-end) 测试。</p>

<p>统计主义的方式是不使用模拟对象。这种思路是测试时只测试状态而不是行为，因此这种类型的测试更加健壮。使用模拟测试时，如果你更新了实际类的行为，模拟类也需要同步更新；如果你忘了这么做，你可能会遇到测试可以通过但是代码却不能正确工作的情况。通过强调在测试环境中只使用那些真正的代码，统计主意的测试可以帮助你减少测试代码和实现代码的耦合度，并降低出错率。这种类型的测试，您可能已经猜到，适合于更全面的端到端的测试。</p>

<p>当然，并不是说有两个对立的程序员学派；你不可能看到模拟主义和统计主义的当街对决。这种分歧是有用的，但是，得认识到 mock 在有些时候是你的工具箱里最好的工具，但是有时候又不是。不同类型的测试适用于不同的任务，并且最高效的测试套件往往是不同测试风格的集合体。仔细考虑你到底想要用单个测试来验证些什么，这能帮助你找到最合适的测试方式，而且能帮你决定对于当前工作来说，使用模拟测试对象是否是正确的工具。</p>

<h2>深入代码</h2>

<p>理论上谈起来所有一切都没什么问题，但让我们来看一个你需要用到 mock 的真实用例。</p>

<p>让我们试着测试一个对象，它上面有一个方法，是通过调用 <code>UIApplication</code> 的 <code>openURL:</code> 方法来打开另外一个应用程序。(这是我在测试我的 <a href="http://intentkit.github.io">IntentKit</a> 库时遇到的一个真实问题。) 给这个用例写一个端到端的测试，就算是有可能做到，也是非常困难的，因为 &lsquo;成功状态&rsquo; 本身导致了应用程序的关闭。自然的选择是，模拟出一个 <code>UIApplication</code> 对象，并验证这个模拟对象是否确实调用了 <code>openURL</code> 方法打开正确的 URL。</p>

<p>假设这个对象有这样的方法：</p>

<pre><code>@interface AppLinker : NSObject
        - (instancetype)initWithApplication:(UIApplication *)application;
        - (void)doSomething:(NSURL *)url;
@end
</code></pre>

<p>这是一个非常牵强的例子，但是请容忍我一下。在这个例子中，你会注意到我们使用了构造方法进行注入，当我们创建 <code>AppLinker</code> 的对象时将 <code>UIApplication</code> 对象注入到其中。大部分情况下，使用模拟对象要求使用某种形式的依赖注入。如果这个概念对你很陌生，请一定看看本期的 <a href="http://objccn.io/issue-15-3/">Jon 的文章</a> 中的描述。</p>

<h3>OCMockito</h3>

<p><a href="https://github.com/jonreid/OCMockito">OCMockito</a> 是一个非常轻量级的使用模拟对象的库：</p>

<pre><code>UIApplication *app = mock([UIApplication class]);
AppLinker *linker = [AppLinker alloc] initWithApplication:app];
NSURL *url = [NSURL urlWithString:@"https://google.com"];

[linker doSomething:URL];

[verify(app) openURL:url];
</code></pre>

<h3>OCMock</h3>

<p><a href="http://ocmock.org">OCMock</a> 是另一个 Objective-C 的模拟对象库。和 OCMockito 类似，它提供了关于 stub 和 mock 的所有功能，并且包括了你可能需要的一切功能。它比 OCMockito 的功能更强，依赖于你的个人选择，各有利弊。</p>

<p>在最基本层面上，我们可以使用 OCMock 来重写出与之前非常类似的测试：</p>

<pre><code>id app = OCMClassMock([UIApplication class]);
AppLinker *linker = [AppLinker alloc] initWithApplication:app];
NSURL *url = [NSURL urlWithString:@"https://google.com"];

[linker doSomething:url];

OCMVerify([app openURL:url]);
</code></pre>

<p>这种在你测试后再验证调用方法的模拟测试风格被认为是一种 “运行后验证” 的方式。OCMock 只在最近 3.0 版本后增加了对该功能的支持。同时它也支持老版本的风格，即对期望运行的验证，在执行测试代码前先设定对测试结果的期望。最后，你只需要验证期望和实际结果是否对应：</p>

<pre><code>id app = OCMClassMock([UIApplication class]);

AppLinker *linker = [AppLinker alloc] initWithApplication:app];
NSURL *url = [NSURL urlWithString:@"https://google.com"];

OCMExpect([app openURL:url]);

[linker doSomething:url];

OCMVerifyAll();
</code></pre>

<p>Because OCMock lets you stub out class methods, you could also test this using OCMock, if your implementation of <code>doSomething</code> uses <code>[UIApplication sharedApplication]</code> rather than the <code>UIApplication</code> object injected in the initializer:
由于 OCMock 也支持对类方法的 stub，你也可以用这种方式来来测试，如果 <code>doSomething</code> 方法通过 <code>[UIApplication sharedApplication]</code> 来实现而不是 <code>UIApplication</code> 对象的注入初始化：</p>

<pre><code>id app = OCMClassMock([UIApplication class]);
OCMStub([app sharedInstance]).andReturn(app);

AppLinker *linker = [AppLinker alloc] init];
NSURL *url = [NSURL urlWithString:@"https://google.com"];

[linker doSomething:url];

OCMVerify([app openURL:url]);
</code></pre>

<p>你会发现 stub 类方法和 stub 实例方法看起来是一样的。</p>

<h2>构建你自己的测试</h2>

<p>对于像这种简单的用例，你也许不需要这么重量级的模拟对象测试库。通常，你只需要创建你自己的模拟对象来测试你关心的行为：</p>

<pre><code>@interface FakeApplication : NSObject
    @property (readwrite, nonatomic, strong) NSURL *lastOpenedURL;

    - (void)openURL:(NSURL *)url;
@end

@implementation FakeApplication
    - (void)openURL:(NSURL *)url {
        self.lastOpenedURL = url;
    }
@end
</code></pre>

<p>以下是测试：</p>

<pre><code>FakeApplication *app = [[FakeApplication alloc] init];
AppLinker *linker = [AppLinker alloc] initWithApplication:app];
NSURL *url = [NSURL urlWithString:@"https://google.com"];

[linker doSomething:url];

XCAssertEqual(app.lastOpenedURL, url, @"Did not open the expected URL");
</code></pre>

<p>对于类似这个已经设计好的例子，就可能会出现这种情况，创造你自己的模拟对象只是增加了很多不必要的样板，但如果你觉得需要模拟更为复杂的对象交互，那么完全控制模拟对象的行为就会非常有价值。</p>

<h3>使用哪一个？</h3>

<p>选择哪一种方案完全依赖于你的具体测试情况以及你的个人偏好。OCMockito 和 OCMock 都可以通过 CocoaPods 安装，将它们集成到你现有的测试环境都非常简单，但需要注意的是，除非你需要，否则避免新增一些其他的依赖。另外除非真的需要，最好就都创建一些简单的模拟对象。</p>

<h2>模拟测试时的注意事项</h2>

<p>在任何形式的测试中你有可能碰到的最大的问题之一是写的测试和实现代码耦合过于紧密。测试中一个最重要的关键点是降低未来的变化所带来的成本；如果改变代码的实现细节破坏了当前的测试，则这种成本已经增加了。也就是说，其实为了最小化由于使用模拟测试所造成不利影响，其实你有很多可以做的。</p>

<h3>依赖注入是你的好伙伴</h3>

<p>如果你还没有使用<a href="http://objccn.io/issue-15-3">依赖注入</a>，或许你会需要它。虽然有时候不使用依赖注入来模拟对象也是可以的的 (比如以上面使用 OCMock 模拟类方法)，但是通常是不太可能的。即使可能，设置测试所引入的复杂度也可能大于它能带来的好处。如果你使用依赖注入的话，你会发现使用 stub 和 mock 方式写测试要容易的多。</p>

<h3>不要模拟你没有的</h3>

<p>许多有经验的测试人员都会警告你“不要模拟你没有的东西”，意思是你应该只为你代码库本身拥有的对象创建 mock 或 stub，而不是为第三方依赖或一些库去创建。这里主要有两个原因，一个是基于实际情况的，一个是更具有哲学性的考虑。</p>

<p>对于你的代码库，你对它不同接口的稳定性和不稳定性大概会有一个感觉，所以你可以通过你的直觉来判断使用替换测试的方法是不是可能会导致测试过于脆弱。一般来说，你对第三方代码没有这样的把握。为了解决这个问题，一个通用的做法是为第三方代码创建包装类来抽象出它的行为。在某些情况下，仅仅是转移复杂性而不是降低复杂性往往是没什么意义的。但是在一些情况下，你会很经常使用你的第三方代码，这时这就是一个精简你测试的好方法。你的单元测试能模拟出自定义对象，并使用高层次的集成或功能测试来测试你的包装类本身。</p>

<p>iOS 和 OS X 开发世界的唯一性导致了事情稍微复杂一些。我们做的很多事情都依赖于 Apple 的框架，这个框架远远超过了其他语言的一些标准库。虽然 <code>NSUserDefaults</code> 不是一个“你拥有”对象，但是，如果你发现你有需要把它模拟出来，那就放心去做吧，苹果不太可能会在未来的 Xcode 的版本中推出打破这个 API 的变化。</p>

<p>另一个不要模拟第三方依赖库的原因更具哲学性。使用模拟主义风格书写测试的部分原因是通过这样的测试能比较容易的找到两个对象间最清晰可行的接口。但是如果是第三方依赖，你无法对其进行控制；API 协议中的一些详细信息已经被第三方库定死了，所以你无法通过测试来通过实验有效地验证接口是否有改进的余地。这本身不是问题，但在很多情况下，它降低了模拟测试的效果，直到把模拟测试的优点抹杀殆尽。</p>

<h2>不要模仿我！</h2>

<p>测试没有银弹；基于你的个人倾向和代码的具体特性，不同的情况下需要使用不同的策略。测试替身可能不适用所有的情况，但它们会是你测试工具箱中一个非常有效的工具。不管你倾向于使用框架在单元测试中模拟出一切，还是只是根据需要创建你自己的模拟对象，当你思考如何测试你的代码时，牢记模拟对象是非常有意义。</p>

<hr />

<p>原文 <a href="http://www.objc.io/issue-15/mocking-stubbing.html">Test Doubles: Mocks, Stubs, and More</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的iOS工程结构]]></title>
    <link href="http://ryantang.me/blog/2014/08/03/ios-prj-structure/"/>
    <updated>2014-08-03T11:09:53+08:00</updated>
    <id>http://ryantang.me/blog/2014/08/03/ios-prj-structure</id>
    <content type="html"><![CDATA[<blockquote><p>好的架构不是设计出来的，而是进化而来的！</p></blockquote>

<h4>写在前面</h4>

<p>从2011年底开始学习iOS开发，到现在也已经快3年了，虽然中途没有一直进行iOS的开发（总是在Android和iOS间切换），但始终没有离开，而我现在的工作也一样，在iOS和Android间来回游走，正如我博客的slogan一样，“In Android&amp;iOS”。其实对我来说，两个平台没有绝对的好坏，我都喜欢、我都热爱。有人会说，同样的产品在不同平台做两次不会觉得厌烦吗？这个问题我会给出肯定的回答，不会！因为如果你真的喜欢你所做的产品，做多少次都不会觉得烦，每一次的复盘都是一次改进的过程，很多创新都是在重复的工作中产生的。在技术层面，同一套思想用不同的技术来实现，本身就是一个加强对不同平台技术巩固和理解的过程，技术本来就是来承载和表现业务的，在实现业务的过程中加强对业务的理解、实现对业务的创新，这或许也就是堆代码和写程序的区别吧！^_^</p>

<!--More-->


<h4>我的iOS工程结构</h4>

<p>接下来，我就简单介绍下我做iOS项目时使用的工程结构。首先要说的是，这只是我的工程结构，并不是规范，或许它存在很多问题和不规范的地方，我只是把它分享出来，给大家提供一个参考，也希望收到大家的一些反馈来帮助我改进！</p>

<h5>项目结构</h5>

<p>下图是我做iOS项目的一个常用工程结构，整体模式还是按照MVC的结构，只是在每一层做了一些细分处理，下面就简单介绍下。</p>

<p><img src="/images/2014/08/ios_prj_structure/1.png" alt="1" /></p>

<p>iOS工程中没有像Java那样非常严格的分包机制，不过在iOS工程中我们也可以通过Group的方式在工程中实现逻辑分包，这样更有利于我们组织和管理代码，使工程结构更清晰和易于理解。在我的工程结构中，主要有如下group：</p>

<ul>
<li>Application：这个group中放的是AppDelegate和一些系统常量及系统配置文件；</li>
<li>Base：一些基本父类，包括父ViewController和一些公用顶层自定义父类，其他模块的类一般都继承自这里的一些类；</li>
<li>Controller：系统控制层，放置ViewController，均继承于Group Base中的BaseViewController或BaseTableViewController；</li>
<li>View：系统中视图层，由于我比较喜欢通过代码实现界面，所以这里放的都是继承于UIView的视图，我将视图从ViewController中分离出来全部放在这里，这样能保持ViewController的精简；</li>
<li>Model：系统中的实体，通过类来描述系统中的一些角色和业务，同时包含对应这些角色和业务的处理逻辑；</li>
<li>Handler：系统业务逻辑层，负责处理系统复杂业务逻辑，上层调用者是ViewController；</li>
<li>Storage：简单数据存储，主要是一些键值对存储及系统外部文件的存取，包括对NSUserDefault和plist存取的封装；</li>
<li>Network：网络处理层(<a href="https://github.com/tangren03/RTLibrary-ios/blob/master/RTLibrary-ios/RTHttpClient.h">RTHttpClient</a>)，封装了基于AFNetworking的网络处理层，通过block实现处理结果的回调，上层调用者是Handler层；</li>
<li>Database：数据层，封装基于FMDB的sqlite数据库存取和管理(<a href="https://github.com/tangren03/RTLibrary-ios/blob/master/RTLibrary-ios/RTDatabaseHelper.h">RTDatabaseHelper</a>)，对外提供基于Model层对象的调用接口，封装对数据的存储过程。</li>
<li>Utils：系统工具类(<a href="https://github.com/tangren03/RTLibrary-ios/blob/master/RTLibrary-ios/AppUtils.h">AppUtils</a>)，主要放置一些系统常用工具类；</li>
<li>Categories：类别，对现有系统类和自定义类的扩展；</li>
<li>Resource：资源库，包括图片，plist文件等；</li>
</ul>


<p>以上是对我的工程结构中各个group的介绍，通过以下登录模块的系统类图，可以比较直观的看到这种工程结构的全貌。</p>

<p><img src="/images/2014/08/ios_prj_structure/2.png" alt="2" /></p>

<p>整体来看分为三大块，黄色区域的模型和业务逻辑层（M），蓝色区域的视图层（V），红色区域的视图控制器层（C），其中，黄色区域实现了对业务逻辑和数据处理的封装，对应他们的上层ViewController，可以实现非常简单的接口调用，将业务复杂性从ViewController中抽离出来，通过模块化的方式，保证ViewController的可读性和可维护性。</p>

<h5>保持ViewController简单</h5>

<p>往往大家都会抱怨iOS中ViewController写着写着就会越来越臃肿，那时因为随着业务的复杂，功能的增多，所有的逻辑都包含在ViewController中，还包括一些诸如UITableViewDatasource的代理方法，使得ViewController臃肿不堪，可维护性极低，耦合性也很高，为了使ViewController能更简单，便于维护和后续的开发，给ViewController瘦身就显得尤为必要，我的做法主要有三个方面。</p>

<h6>1、View视图与ViewController分离</h6>

<p>如果你用Storyboard或者xib这是当然的，我比较喜欢手写代码，所以不在ViewController里面嵌入过多的View层代码是保证ViewController简单的方法之一，那么，可以将View部分的代码单独封装到一个继承自UIView的子类当中，然后通过自定义Delegate实现View与ViewController的通信。</p>

<h6>2、业务逻辑与ViewController分离</h6>

<p>将网络请求处理和复杂的业务逻辑以及数据的存取工作单独放到Handler层，对ViewController只暴露简单的调用接口和通过block或delegate实现的回调，这样不仅能使我们的工程模块化，也能大大降低ViewController的复杂性，就不会出现既包括网络处理又包括数据处理的冗长的ViewController代码了。Handler通过block或delegate将处理完的结果回调给ViewController，ViewController再将结果与View视图层相关联处理，这样就真正起到了MVC的作用，整体原则就是，让ViewController只关系和负责处理与它相关的事。</p>

<p>在BaseHandler.h中可以定义一些简单的业务处理规则：</p>

<p>```c BaseHandler.h</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>/<em>*
 *  Handler处理完成后调用的Block
 </em>/
typedef void (^CompleteBlock)();</p>

<p>/<em>*
 *  Handler处理成功时调用的Block
 </em>/
typedef void (^SuccessBlock)(id obj);</p>

<p>/<em>*
 *  Handler处理失败时调用的Block
 </em>/
typedef void (^FailedBlock)(id obj);</p>

<p>@interface BaseHandler : NSObject</p>

<p>/<em><em>
 *  获取请求URL
 *
 *  @param path
 *  @return 拼装好的URL
 </em>/
+ (NSString </em>)requestUrlWithPath:(NSString *)path;</p>

<p>@end
```</p>

<p>在LoginHandler中就可以定义对LoginViewController暴露的调用接口，在LoginHandler中封装负责的网络处理和业务处理逻辑，对LoginViewcontroller来说，只需要调用这个方法并传入对应的UserEntity实体对象和处理成功和失败状态下的回调block就可以了。</p>

<p>```c LoginHandler.h</p>

<h1>import &ldquo;BaseHandler.h&rdquo;</h1>

<h1>import &ldquo;UserEntity.h&rdquo;</h1>

<p>@interface LoginHandler : BaseHandler</p>

<p>/<em><em>
 *  用户登录业务逻辑处理
 *
 *  @param user
 *  @param success
 *  @param failed<br/>
 </em>/
&ndash; (void)executeLoginTaskWithUser:(UserEntity </em>)user success:(SuccessBlock)success failed:(FailedBlock)failed;</p>

<p>@end
```</p>

<h6>3、Datasource或Delegate与ViewController分离</h6>

<p>在iOS开发中经常用到的UITableView包含了一系列的代理方法，这些方法往往也是使得ViewController变长变复杂的元凶之一，那么，将这些Datasource或Delegate分离出来也是行之有效的方法之一，例如，通过自定义Datasource类（实现UITableViewDatasource协议）来将跟UITableView相关的数据源处理代理方法都集中到一个特定的类当中，ViewController只需要设置这个自定义数据源类给UITableView，然后其他的就都可以交给自定义数据源类去处理了。</p>

<p>我参考了<a href="http://www.objc.io/issue-1/lighter-view-controllers.html">Lighter View Controllers</a>上的介绍改进了一个<code>BaseTableViewProtocol</code>，基本上常用的一些场景是可以使用的，不过这个还得不断优化以适应更多的场景，具体的代码我放在Github上了，感兴趣的同学可以去看看，使用方法可以参考上面链接中的介绍，基本类似，我的改进主要是支持对多section的适用。</p>

<ul>
<li><a href="https://github.com/tangren03/RTLibrary-ios/blob/master/RTLibrary-ios/BaseTableViewProtocol.h">BaseTableViewProtocol.h</a></li>
<li><a href="https://github.com/tangren03/RTLibrary-ios/blob/master/RTLibrary-ios/BaseTableViewProtocol.m">BaseTableViewProtocol.m</a></li>
</ul>


<h4>写在最后</h4>

<p>以上是我在开发iOS项目中的一些总结和工程实践，其中肯定还是存在很多问题的，我也在不断寻求改进的方法，也欢迎各路高手给我提出意见和建议。关于这个工程结构的一个简单事例我放在我的Github上了，感兴趣的同学可以去看看<a href="https://github.com/tangren03/RTLibrary-ios">RTLibrary-ios</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CocoaPods管理依赖库]]></title>
    <link href="http://ryantang.me/blog/2014/01/05/cocoapods/"/>
    <updated>2014-01-05T20:16:17+08:00</updated>
    <id>http://ryantang.me/blog/2014/01/05/cocoapods</id>
    <content type="html"><![CDATA[<blockquote><p>工欲善其事，必先利其器</p></blockquote>

<p><img src="/images/2014/01/cocoapods/1.png" alt="" /></p>

<p>本篇内容将介绍Mac和iOS开发中必备的一个依赖库管理工具<a href="https://github.com/CocoaPods/CocoaPods">CocoaPods</a>。</p>

<!--More-->


<h2>CocoaPods是什么</h2>

<p>在iOS开发中势必会用到一些第三方依赖库，比如大家都熟悉的ASIHttpRequest、AFNetworking、JSONKit等。使用这些第三方类库能极大的方便项目的开发，但是，集成这些依赖库需要我们手动去配置，例如集成ASIHttpRequest库时除了加入源码以外还需要手动去添加一些系统的framework，CFNetwork、MobileCoreServices等，如果这些第三方库发生了更新，还需要手动去更新项目。这就显得非常麻烦。有麻烦自然有解决办法，CocoaPods就是为了解决这个问题而生的。通过CocoaPods，我们可以将第三方的依赖库统一管理起来，配置和更新只需要通过简单的几行命令即可完成，大大的提高了实际开发中的工作效率，使我们的主要精力集中到更重要的事情上去。</p>

<h2>安装CocoaPods</h2>

<p>我的环境为Mac OS X 10.9.1，安装CocoaPods之前，先确保本地有Ruby环境，因为CocoaPods运行于Ruby之上，默认情况下，Mac是自带了Ruby环境的，可以通过命令行<code>ruby -v</code>查看当前Ruby的版本，我用的是1.9.3p448。接下来我们就可以通过如下命令安装CocoaPods了。</p>

<p><code>
$ sudo gem install cocoapods
</code>
输入上述命令后可能会无响应，那是因为你身在天朝，伟大的墙拦住了你的去路，不知为什么，cocoapods.org这种无害产物也要被墙。不过没关系，我们可以通过淘宝的Ruby镜像来访问Cocoapods，在终端输入如下命令将Ruby镜像替换为淘宝的。</p>

<p><code>
$ gem sources --remove https://rubygems.org/
$ gem sources -a http://ruby.taobao.org/
</code></p>

<p>完成后可以通过如下命令来查看当前的Ruby镜像是否已经指向了淘宝的。</p>

<p><code>
$ gem sources -l
</code></p>

<p>如果输出结果是如下这样，那说明这一步就成功了。</p>

<p>```
<strong><em> CURRENT SOURCES </em></strong></p>

<p><a href="http://ruby.taobao.org/">http://ruby.taobao.org/</a>
```</p>

<p>接下来就可以重新运行安装命令来安装CocoaPods了，根据你的网络情况，几秒或十几秒后安装过程就完成了，总的来说，安装过程还是比较简单的。如果其中你遇到了什么问题，请自行Google解决，都能找到你想要的答案。</p>

<h2>使用CocoaPods</h2>

<p>我们通过集成JSONKit类库来演示如何使用CocoaPods来做依赖库管理。首先，建立一个xcode工程，命名为CocoaPodsTest，现在的工程结构如下图所示。</p>

<p><img src="/images/2014/01/cocoapods/2.png" alt="" /></p>

<p>这里我们要集成JSONKit，可以先通过如下命令来判断其是否支持CocoaPods。</p>

<p><code>
$ pod search JSONKit
</code></p>

<p>执行后通过输出结果可以看到JSONKit是支持CocoaPods的，注意红框标记的内容，这是待会我们配置xcode时需要的信息，这条配置项就是告诉CocoaPods去下载和管理哪一个第三方库。</p>

<p><img src="/images/2014/01/cocoapods/3.png" alt="" /></p>

<p>检测完毕后我们来到工程CocoaPodsTest的目录下，新建一个名为Podfile的文件（这里通过命令行创建）</p>

<p><code>
$ vim Podfile
</code></p>

<p>这个Podfile文件的作用是配置依赖库信息，就是告诉CocoaPods去下载和管理哪些依赖库，文件创建好以后，打开文件并加入如下内容。（vim打开文件后按i进入插入模式，编辑完成后按esc退出编辑模式，接着输入:wq保存并退出文件）</p>

<p><img src="/images/2014/01/cocoapods/4.png" alt="" /></p>

<p>这时候，工程目录下就会有一个Podfile文件了，注意必须和.xcodeproj在同一个目录下。接下来就可以使用CocoaPods来安装并管理JSONKit库了，确保命令行当前路径是在CocoaPodsTest目录下，运行如下命令。</p>

<p><code>
$ pod install
</code></p>

<p>安装完成后会提示如下信息，并且我们的工程目录下会多出一个.xcworkspace结尾的文件，命令行信息绿色部分提醒我们“从此使用CocoaPodsTest.xcworkspace来打开项目”。</p>

<p><img src="/images/2014/01/cocoapods/5.png" alt="" /></p>

<p>通过CocoaPodsTest.xcworkspace来打开项目，这时，我们的项目工程结构就会变成下图这样，多出一个名为Pods的依赖工程，打开Pods文件夹后，发现JSONKit已经在里面了</p>

<p><img src="/images/2014/01/cocoapods/6.png" alt="" /></p>

<p>这时候就可以在项目文件中引入JSONKit.h了，这时候如果你发现import的时候没有提示JSONKit的文件，可以在target-Build Settings下修改“User Header Search Paths”项，新增${SRCROOT}并选择rcursive，如下图。</p>

<p><img src="/images/2014/01/cocoapods/7.png" alt="" /></p>

<p>设置完成后就可以在文件中直接引用第三方库的文件并使用了。</p>

<p><img src="/images/2014/01/cocoapods/8.png" alt="" /></p>

<p>到此，新建工程并使用CocoaPods来管理依赖库的过程就完成了，如果是直接使用已有CocoaPods的项目，则需要首先运行一下pod update命令来更新项，然后照样通过.xcworkspace来打开工程。</p>

<p>如果需要依赖多个第三方类库，只需要修改Podfile文件的配置，然后运行pod update命令即可，比如新增一个AFNetworking的依赖库，首先执行pod search AFNetworking查看一下AFNetworking的配置信息，修改Podfile文件，在后面增加AFNetworking的对应配置信息，然后运行pod update命令就完成了对AFNetworking的集成。</p>

<p><img src="/images/2014/01/cocoapods/9.png" alt="" /></p>

<p>添加AFNetworking库后的目录结构如下。</p>

<p><img src="/images/2014/01/cocoapods/10.png" alt="" /></p>

<p>如果类库有更新，查看更新配置并执行pod update即可简单完成了，从此从手动更新繁重的体力劳动中解脱出来。</p>

<p>简单小结一下：</p>

<ul>
<li>安装CocoaPods</li>
<li>新建项目并在工程根目录下新建Podfile文件，配置需要管理的第三方库</li>
<li>运行pod install下载安装第三方库</li>
</ul>


<h6>更多内容请参考<a href="http://guides.cocoapods.org/">CocoaPods Guides</a></h6>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS事件机制(二)]]></title>
    <link href="http://ryantang.me/blog/2013/12/29/ios-event-dispatch-2/"/>
    <updated>2013-12-29T10:20:43+08:00</updated>
    <id>http://ryantang.me/blog/2013/12/29/ios-event-dispatch-2</id>
    <content type="html"><![CDATA[<p>本篇内容接上一篇<a href="http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/">iOS事件机制(一)</a>，本次主要介绍iOS事件中的多点触控事件和手势事件。</p>

<p>从上一篇的内容我们知道，在iOS中一个事件用一个UIEvent对象表示，UITouch用来表示一次对屏幕的操作动作，由多个UITouch对象构成了一个UIEvent对象。另外，<code>UIResponder</code>是所有响应者的父类，UIView、UIViewController、UIWindow、UIApplication都直接或间接的集成了UIResponder。关于事件响应者链的传递机制在上一篇中也有阐述，如果你还不是很了解，可以先看看<a href="http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/">iOS事件机制(一)</a>。</p>

<!--More-->


<h2>事件处理方法</h2>

<p>UIResponder中定义了一系列对事件的处理方法，他们分别是：</p>

<ul>
<li>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
<li>&ndash;(void)touchesMoved:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
<li>&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
<li>&ndash;(void)touchesCancelled:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
</ul>


<p>从方法名字可以知道，他们分别对应了屏幕事件的开始、移动、结束和取消几个阶段，前三个阶段理解都没问题，最后一个取消事件的触发时机是在诸如突然来电话或是系统杀进程时调用。这些方法的第一个参数定义了UITouch对象的一个集合(NSSet)，它的数量表示了这次事件是几个手指的操作，目前iOS设备支持的多点操作手指数最多是5。第二个参数是当前的UIEvent对象。下图展示了一个UIEvent对象与多个UITouch对象之间的关系。</p>

<p><img src="/images/2013/12/ios_event_dispatch/11.png" alt="" /></p>

<h3>一、点击事件</h3>

<p>首先，新建一个自定义的View继承于UIView，并实现上述提到的事件处理方法，我们可以通过判断UITouch的tapCount属性来决定响应单击、双击或是多次点击事件。</p>

<p>```c MyView.m</p>

<h1>import &ldquo;MyView.h&rdquo;</h1>

<p>@implementation MyView</p>

<p>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>&ndash;(void)touchesMoved:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>for (UITouch *aTouch in touches) {
    if (aTouch.tapCount == 2) {
        // 处理双击事件
        [self respondToDoubleTapGesture];
    }
}
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesCancelled:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>&ndash;(void)respondToDoubleTapGesture
{</p>

<pre><code>NSLog(@"respondToDoubleTapGesture");
</code></pre>

<p>}</p>

<p>@end
```</p>

<h3>二、滑动事件</h3>

<p>滑动事件一般包括上下滑动和左右滑动，判断是否是一次成功的滑动事件需要考虑一些问题，比如大部分情况下，用户进行一次滑动操作，这次滑动是否是在一条直线上？或者是否是基本能保持一条直线的滑动轨迹。或者判断是上下滑动还是左右滑动等。另外，滑动手势一般有一个起点和一个终点，期间是在屏幕上画出的一个轨迹，所以需要对这两个点进行判断。我们修改上述的MyView.m的代码来实现一次左右滑动的事件响应操作。</p>

<p>```c MyView.m</p>

<h1>import &ldquo;MyView.h&rdquo;</h1>

<h1>define HORIZ_SWIPE_DRAG_MIN  12    //水平滑动最小间距</h1>

<h1>define VERT_SWIPE_DRAG_MAX    4    //垂直方向最大偏移量</h1>

<p>@implementation MyView</p>

<p>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>UITouch *aTouch = [touches anyObject];
// startTouchPosition是一个CGPoint类型的属性，用来存储当前touch事件的位置
self.startTouchPosition = [aTouch locationInView:self];
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesMoved:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>UITouch *aTouch = [touches anyObject];
CGPoint currentTouchPosition = [aTouch locationInView:self];

//  判断水平滑动的距离是否达到了设置的最小距离，并且是否是在接近直线的路线上滑动（y轴偏移量）
if (fabsf(self.startTouchPosition.x - currentTouchPosition.x) &gt;= HORIZ_SWIPE_DRAG_MIN &amp;&amp;
    fabsf(self.startTouchPosition.y - currentTouchPosition.y) &lt;= VERT_SWIPE_DRAG_MAX)
{
    // 满足if条件则认为是一次成功的滑动事件，根据x坐标变化判断是左滑还是右滑
    if (self.startTouchPosition.x &lt; currentTouchPosition.x) {
        [self rightSwipe];//右滑响应方法
    } else {
        [self leftSwipe];//左滑响应方法
    }
    //重置开始点坐标值
    self.startTouchPosition = CGPointZero;
}
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesCancelled:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>//当事件因某些原因取消时，重置开始点坐标值
self.startTouchPosition = CGPointZero;
</code></pre>

<p>}</p>

<p>&ndash;(void)rightSwipe
{</p>

<pre><code>NSLog(@"rightSwipe");
</code></pre>

<p>}</p>

<p>&ndash;(void)leftSwipe
{</p>

<pre><code>NSLog(@"leftSwipe");
</code></pre>

<p>}</p>

<p>@end
```</p>

<h3>三、拖拽事件</h3>

<p>在屏幕上我们可以拖动某一个控件(View)进行移动，这种事件成为拖拽事件，其实现原理就是在不改变View的大小尺寸的前提下改变View的显示坐标值，为了达到动态移动的效果，我们可以在move阶段的方法中进行坐标值的动态更改，还是重写MyView.m的事件处理方法，这次在touchesMove方法中进行处理。</p>

<p>```c MyView.m</p>

<h1>import &ldquo;MyView.h&rdquo;</h1>

<p>@implementation MyView</p>

<p>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>&ndash;(void)touchesMoved:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>UITouch *aTouch = [touches anyObject];
//获取当前触摸操作的位置坐标
CGPoint loc = [aTouch locationInView:self];
//获取上一个触摸点的位置坐标
CGPoint prevloc = [aTouch previousLocationInView:self];

CGRect myFrame = self.frame;
//改变View的x、y坐标值
float deltaX = loc.x - prevloc.x;
float deltaY = loc.y - prevloc.y;
myFrame.origin.x += deltaX;
myFrame.origin.y += deltaY;
//重新设置View的显示位置
[self setFrame:myFrame];
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>&ndash;(void)touchesCancelled:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>@end
```</p>

<h3>四、双指缩放</h3>

<p>之前提到过UIEvent包含了一系列的UITouch对象构成一次事件，当设计多点触控操作时，可与对UIEvent对象内的UITouch对象进行处理，比如实现一个双指缩放的功能。</p>

<p>```c MyView.m</p>

<h1>import &ldquo;MyView.h&rdquo;</h1>

<p>@implementation MyView
{</p>

<pre><code>BOOL pinchZoom;
CGFloat previousDistance;
CGFloat zoomFactor;
</code></pre>

<p>}</p>

<p>&ndash;(id)init
{</p>

<pre><code>self = [super init];
if (self) {
    pinchZoom = NO;
    //缩放前两个触摸点间的距离
    previousDistance = 0.0f;
    zoomFactor = 1.0f;
}
return self;
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>if(event.allTouches.count == 2) {
    pinchZoom = YES;
    NSArray *touches = [event.allTouches allObjects];
    //接收两个手指的触摸操作
    CGPoint pointOne = [[touches objectAtIndex:0] locationInView:self];
    CGPoint pointTwo = [[touches objectAtIndex:1] locationInView:self];
    //计算出缩放前后两个手指间的距离绝对值（勾股定理）
    previousDistance = sqrt(pow(pointOne.x - pointTwo.x, 2.0f) +
                            pow(pointOne.y - pointTwo.y, 2.0f));
} else {
    pinchZoom = NO;
}
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesMoved:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>if(YES == pinchZoom &amp;&amp; event.allTouches.count == 2) {
    NSArray *touches = [event.allTouches allObjects];
    CGPoint pointOne = [[touches objectAtIndex:0] locationInView:self];
    CGPoint pointTwo = [[touches objectAtIndex:1] locationInView:self];
    //两个手指移动过程中，两点之间距离
    CGFloat distance = sqrt(pow(pointOne.x - pointTwo.x, 2.0f) +
                            pow(pointOne.y - pointTwo.y, 2.0f));
    //换算出缩放比例
    zoomFactor += (distance - previousDistance) / previousDistance;
    zoomFactor = fabs(zoomFactor);
    previousDistance = distance;

    //缩放
    self.layer.transform = CATransform3DMakeScale(zoomFactor, zoomFactor, 1.0f);
}
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>if(event.allTouches.count != 2) {
    pinchZoom = NO;
    previousDistance = 0.0f;
}
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesCancelled:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>@end
```
上面实现的方式有一点不足之处就是必须两个手指同时触摸按下才能达到缩放的效果，并不能达到相册里面那样一个手指触摸后，另一个手指按下也可以缩放。如果需要达到和相册照片缩放的效果，需要同时控制begin、move、end几个阶段的事件处理。这个不足就留给感兴趣的同学自己去实现了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS事件机制(一)]]></title>
    <link href="http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/"/>
    <updated>2013-12-07T15:10:42+08:00</updated>
    <id>http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1</id>
    <content type="html"><![CDATA[<blockquote><p>运用的前提是掌握</br>
掌握的本质是理解</p></blockquote>

<p><img src="/images/2013/12/ios_event_dispatch/1.png" alt="" /></p>

<!--More-->


<p>本篇内容将围绕iOS中事件及其传递机制进行学习和分析。在iOS中，事件分为三类：</p>

<ul>
<li>触控事件（单点、多点触控以及各种手势操作）</li>
<li>传感器事件（重力、加速度传感器等）</li>
<li>远程控制事件（远程遥控iOS设备多媒体播放等）</li>
</ul>


<p>这三类事件共同构成了iOS设备丰富的操作方式和使用体验，本次就首先来针对第一类事件：触控事件，进行学习和分析。</p>

<h2>Gesture Recognizers</h2>

<p>Gesture Recognizers是一类手势识别器对象，它可以附属在你指定的View上，并且为其设定指定的手势操作，例如是点击、滑动或者是拖拽。当触控事件 发生时，设置了Gesture Recognizers的View会先通过识别器去拦截触控事件，如果该触控事件是事先为View设定的触控监听事件，那么Gesture Recognizers将会发送动作消息给目标处理对象，目标处理对象则对这次触控事件进行处理，先看看如下流程图。</p>

<p><img src="/images/2013/12/ios_event_dispatch/2.png" alt="" /></p>

<p>在iOS中，View就是我们在屏幕上看到的各种UI控件，当一个触控事件发生时，Gesture Recognizers会先获取到指定的事件，然后发送动作消息(action message)给目标对象(target)，目标对象就是ViewController，在ViewController中通过事件方法完成对该事件的处理。Gesture Recognizers能设置诸如单击、滑动、拖拽等事件，通过Action-Target这种设计模式，好处是能动态为View添加各种事件监听，而不用去实现一个View的子类去完成这些功能。</p>

<p>以上过程就是我们在开发中在方法中常见的设置action和设置target，例如为UIButton设置监听事件等。</p>

<h3>常用手势识别类</h3>

<p>在UIKit框架中，系统为我们事先定义好了一些常用的手势识别器，包括点击、双指缩放、拖拽、滑动、旋转以及长按。通过这些手势识别器我们可以构造丰富的操作方式。</p>

<p><img src="/images/2013/12/ios_event_dispatch/3.png" alt="" /></p>

<p>在上表中可以看到，UIKit框架中已经提供了诸如UITapGestureRecognizer在内的六种手势识别器，如果你需要实现自定义的手势识别器，也可以通过继承UIGestureRecognizer类并重写其中的方法来完成，这里我们就不详细讨论了。</p>

<p>每一个Gesture Recognizer关联一个View，但是一个View可以关联多个Gesture Recognizer，因为一个View可能还能响应多种触控操作方式。当一个触控事件发生时，Gesture Recognizer接收一个动作消息要先于View本身，结果就是Gesture Recognizer作为View处理触控事件的代表，或者叫代理。当Gesture Recognizer接收到指定的事件时，它就会发送一条动作消息(action message)给ViewController并处理。</p>

<h3>连续和不连续动作</h3>

<p><img src="/images/2013/12/ios_event_dispatch/4.png" alt="" /></p>

<p>触控动作同时分为连续动作(continuous)和不连续动作(discrete)，连续动作例如滑动和拖拽，它会持续一小段时间，而不连续动作例如单击，它瞬间就会完成，在这两类事件的处理上又稍有不同。对于不连续动作，Gesture Recognizer只会给ViewContoller发送一个单一的动作消息(action message),而对于连续动作，Gesture Recognizer会发送多条动作消息给ViewController，直到所有的事件都结束。</p>

<p>为一个View添加GestureRecognizer有两种方式，一种是通过InterfaceBuilder实现，另一种就是通过代码实现，我们看看通过代码来如何实现。</p>

<p>```java MyViewContoller.m
&ndash; (void)viewDidLoad {</p>

<pre><code> [super viewDidLoad];

 // 创建并初始化手势对象
 UITapGestureRecognizer *tapRecognizer = [[UITapGestureRecognizer alloc]
      initWithTarget:self action:@selector(respondToTapGesture:)];

 // 指定操作为单击一次
 tapRecognizer.numberOfTapsRequired = 1;

 // 为当前View添加GestureRecognizer
 [self.view addGestureRecognizer:tapRecognizer];

 // ...
</code></pre>

<p>}
```</p>

<p>通过上述代码，我们实现了为当前MyViewController的View添加一个单击事件，首先构造了UITapGestureRecognizer对象，指定了target为当前ViewController本身，action就是后面自己实现的处理方法，这里就呼应了前文提到的Action-Target模式。</p>

<p>在事件处理过程中，这两种方式所处的状态又各有不同，首先，所有的触控事件最开始都是处于可用状态(Possible)，对应UIKit里面的UIGestureRecognizerStatePossible类，如果是不连续动作事件，则状态只会从Possible转变为已识别状态(Recognized,UIGestureRecognizerStateRecognized)或者是失败状态(Failed,UIGestureRecognizerStateFailed)。例如一次成功的单击动作，就对应了Possible-Recognized这个过程。</p>

<p><img src="/images/2013/12/ios_event_dispatch/5.png" alt="" /></p>

<p>如果是连续动作事件，如果事件没有失败并且连续动作的第一个动作被成功识别(Recognized)，则从Possible状态转移到Began(UIGestureRecognizerStateBegan)状态，这里表示连续动作的开始，接着会转变为Changed(UIGestureRecognizerStateChanged)状态，在这个状态下会不断循环的处理连续动作，直到动作执行完成变转变为Recognized已识别状态，最终该动作会处于完成状态(UIGestureRecognizerStateEnded)，另外，连续动作事件的处理状态会从Changed状态转变为Canceled(UIGestureRecognizerStateCancelled)状态，原因是识别器认为当前的动作已经不匹配当初对事件的设定了。每个动作状态的变化，Gesture Recognizer都会发送消息(action message)给Target，也就是ViewController，它可以根据这些动作消息进行相应的处理。例如一次成功的滑动手势动作就包括按下、移动、抬起的过程，分别对应了Possible-Began-Changed-Recognized这个过程。</p>

<h3>UITouch &amp; UIEvent</h3>

<p>在屏幕上的每一次动作事件都是一次Touch，在iOS中用UITouch对象表示每一次的触控，多个Touch组成一次Event，用UIEvent来表示一次事件对象。</p>

<p><img src="/images/2013/12/ios_event_dispatch/6.png" alt="" /></p>

<p>在上述过程中，完成了一次双指缩放的事件动作，每一次手指状态的变化都对应事件动作处理过程中得一个阶段。通过Began-Moved-Ended这几个阶段的动作(Touch)共同构成了一次事件(Event)。在事件响应对象UIResponder中有对应的方法来分别处理这几个阶段的事件。</p>

<ul>
<li>touchesBegan:withEvent:</li>
<li>touchesMoved:withEvent:</li>
<li>touchesEnded:withEvent:</li>
<li>touchesCancelled:withEvent:</li>
</ul>


<p>后面的参数分别对应UITouchPhaseBegan、UITouchPhaseMoved、UITouchPhaseEnded、UITouchPhaseCancelled这几个类。用来表示不同阶段的状态。</p>

<h3>事件传递</h3>

<p><img src="/images/2013/12/ios_event_dispatch/7.png" alt="" /></p>

<p>如上图，iOS中事件传递首先从App(UIApplication)开始，接着传递到Window(UIWindow)，在接着往下传递到View之前，Window会将事件交给GestureRecognizer，如果在此期间，GestureRecognizer识别了传递过来的事件，则该事件将不会继续传递到View去，而是像我们之前说的那样交给Target(ViewController)进行处理。</p>

<h2>响应者链(Responder Chain)</h2>

<p>通常，一个iOS应用中，在一块屏幕上通常有很多的UI控件，也就是有很多的View，那么当一个事件发生时，如何来确定是哪个View响应了这个事件呢，接下来我们就一起来看看。</p>

<h3>寻找hit-test view</h3>

<p>什么是hit-test view呢？简单来说就是你触发事件所在的那个View，寻找hit-test view的过程就叫做Hit-Testing。那么，系统是如何来执行Hit-Testing呢，首先假设现在有如下这么一个UI布局，一种有ABCDE五个View。</p>

<p><img src="/images/2013/12/ios_event_dispatch/8.png" alt="" /></p>

<p>假设一个单击事件发生在了View D里面，系统首先会从最顶层的View A开始寻找，发现事件是在View A或者其子类里面，那么接着从B和C找，发现事件是在C或者其子类里面，那么接着到C里面找，这时发现事件是在D里面，并且D已经没有子类了，那么hit-test view就是View D啦。</p>

<h3>响应者对象(Responsder Object)</h3>

<p>响应者对象是能够响应并且处理事件的对象，UIResponder是所有响应者对象的父类，包括UIApplication、UIView和UIViewController都是UIResponder的子类。也就意味着所有的View和ViewController都是响应者对象。</p>

<h3>第一响应者(First Responder)</h3>

<p>第一响应者是第一个接收事件的View对象，我们在Xcode的Interface Builder画视图时，可以看到视图结构中就有First Responder。</p>

<p><img src="/images/2013/12/ios_event_dispatch/10.png" alt="" /></p>

<p>这里的First Responder就是UIApplication了。另外，我们可以控制一个View让其成为First Responder，通过实现 canBecomeFirstResponder方法并返回YES可以使当前View成为第一响应者，或者调用View的becomeFirstResponder方法也可以，例如当UITextField调用该方法时会弹出键盘进行输入，此时输入框控件就是第一响应者。</p>

<h3>事件传递机制</h3>

<p>如上所说，，如果hit-test view不能处理当前事件，那么事件将会沿着响应者链(Responder Chain)进行传递，知道遇到能处理该事件的响应者(Responsder Object)。通过下图，我们来看看两种不同情况下得事件传递机制。</p>

<p><img src="/images/2013/12/ios_event_dispatch/9.png" alt="" /></p>

<p>左边的情况，接收事件的initial view如果不能处理该事件并且她不是顶层的View，则事件会往它的父View进行传递。initial view的父View获取事件后如果仍不能处理，则继续往上传递，循环这个过程。如果顶层的View还是不能处理这个事件的话，则会将事件传递给它们的ViewController，如果ViewController也不能处理，则传递给Window(UIWindow)，此时Window不能处理的话就将事件传递给Application(UIApplication)，最后如果连Application也不能处理，则废弃该事件。</p>

<p>右边图的流程唯一不同就在于，如果当前的ViewController是由层级关系的，那么当子ViewController不能处理事件时，它会将事件继续往上传递，直到传递到其Root ViewController，后面的流程就跟之前分析的一样了。</p>

<p>这就是事件响应者链的传递机制，通过这些内容，我们可以更深入的了解事件在iOS中得传递机制，对我们在实际开发中更好的理解事件操作的原理有很大的帮助，也对我们实现复杂布局进行事件处理时增添了多一份的理解。</p>

<h2>总结</h2>

<p>通过前面的内容分析，我们已经学习并了解了如下内容：</p>

<ul>
<li>Gesture Recognizers，是用来控制手势识别的过程和方法，并且其通过Action-Target模式与ViewController的通信的方式。连续和不连续手势动作情况下GestureRecognizer的状态转变。</li>
<li>UITouch和UIEvent对象，他们都是UIKit中来进行事件处理的对象，多个UITouch对象构成一个UIEvent对象，重写相应的方法可以控制和处理事件各个阶段的操作。</li>
<li>系寻找hit-test view的方式、事件传递机、制响应者链</li>
</ul>


<blockquote><p>后记：本篇是iOS事件传递机制的上篇，下篇将继续讨论多点触控事件和手势操作的内容！</p></blockquote>
]]></content>
  </entry>
  
</feed>
