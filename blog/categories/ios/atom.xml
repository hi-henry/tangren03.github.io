<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Ryan's Zone]]></title>
  <link href="http://ryantang.me/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://ryantang.me/"/>
  <updated>2014-04-05T01:41:09+08:00</updated>
  <id>http://ryantang.me/</id>
  <author>
    <name><![CDATA[唐韧_Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用CocoaPods管理依赖库]]></title>
    <link href="http://ryantang.me/blog/2014/01/05/cocoapods/"/>
    <updated>2014-01-05T20:16:17+08:00</updated>
    <id>http://ryantang.me/blog/2014/01/05/cocoapods</id>
    <content type="html"><![CDATA[<blockquote><p>工欲善其事，必先利其器</p></blockquote>

<p><img src="/images/2014/01/cocoapods/1.png" alt="" /></p>

<p>本篇内容将介绍Mac和iOS开发中必备的一个依赖库管理工具<a href="https://github.com/CocoaPods/CocoaPods">CocoaPods</a>。</p>

<!--More-->


<h2>CocoaPods是什么</h2>

<p>在iOS开发中势必会用到一些第三方依赖库，比如大家都熟悉的ASIHttpRequest、AFNetworking、JSONKit等。使用这些第三方类库能极大的方便项目的开发，但是，集成这些依赖库需要我们手动去配置，例如集成ASIHttpRequest库时除了加入源码以外还需要手动去添加一些系统的framework，CFNetwork、MobileCoreServices等，如果这些第三方库发生了更新，还需要手动去更新项目。这就显得非常麻烦。有麻烦自然有解决办法，CocoaPods就是为了解决这个问题而生的。通过CocoaPods，我们可以将第三方的依赖库统一管理起来，配置和更新只需要通过简单的几行命令即可完成，大大的提高了实际开发中的工作效率，使我们的主要精力集中到更重要的事情上去。</p>

<h2>安装CocoaPods</h2>

<p>我的环境为Mac OS X 10.9.1，安装CocoaPods之前，先确保本地有Ruby环境，因为CocoaPods运行于Ruby之上，默认情况下，Mac是自带了Ruby环境的，可以通过命令行<code>ruby -v</code>查看当前Ruby的版本，我用的是1.9.3p448。接下来我们就可以通过如下命令安装CocoaPods了。</p>

<p><code>
$ sudo gem install cocoapods
</code>
输入上述命令后可能会无响应，那是因为你身在天朝，伟大的墙拦住了你的去路，不知为什么，cocoapods.org这种无害产物也要被墙。不过没关系，我们可以通过淘宝的Ruby镜像来访问Cocoapods，在终端输入如下命令将Ruby镜像替换为淘宝的。</p>

<p><code>
$ gem sources --remove https://rubygems.org/
$ gem sources -a http://ruby.taobao.org/
</code></p>

<p>完成后可以通过如下命令来查看当前的Ruby镜像是否已经指向了淘宝的。</p>

<p><code>
$ gem sources -l
</code></p>

<p>如果输出结果是如下这样，那说明这一步就成功了。</p>

<p>```
<strong><em> CURRENT SOURCES </em></strong></p>

<p><a href="http://ruby.taobao.org/">http://ruby.taobao.org/</a>
```</p>

<p>接下来就可以重新运行安装命令来安装CocoaPods了，根据你的网络情况，几秒或十几秒后安装过程就完成了，总的来说，安装过程还是比较简单的。如果其中你遇到了什么问题，请自行Google解决，都能找到你想要的答案。</p>

<h2>使用CocoaPods</h2>

<p>我们通过集成JSONKit类库来演示如何使用CocoaPods来做依赖库管理。首先，建立一个xcode工程，命名为CocoaPodsTest，现在的工程结构如下图所示。</p>

<p><img src="/images/2014/01/cocoapods/2.png" alt="" /></p>

<p>这里我们要集成JSONKit，可以先通过如下命令来判断其是否支持CocoaPods。</p>

<p><code>
$ pod search JSONKit
</code></p>

<p>执行后通过输出结果可以看到JSONKit是支持CocoaPods的，注意红框标记的内容，这是待会我们配置xcode时需要的信息，这条配置项就是告诉CocoaPods去下载和管理哪一个第三方库。</p>

<p><img src="/images/2014/01/cocoapods/3.png" alt="" /></p>

<p>检测完毕后我们来到工程CocoaPodsTest的目录下，新建一个名为Podfile的文件（这里通过命令行创建）</p>

<p><code>
$ vim Podfile
</code></p>

<p>这个Podfile文件的作用是配置依赖库信息，就是告诉CocoaPods去下载和管理哪些依赖库，文件创建好以后，打开文件并加入如下内容。（vim打开文件后按i进入插入模式，编辑完成后按esc退出编辑模式，接着输入:wq保存并退出文件）</p>

<p><img src="/images/2014/01/cocoapods/4.png" alt="" /></p>

<p>这时候，工程目录下就会有一个Podfile文件了，注意必须和.xcodeproj在同一个目录下。接下来就可以使用CocoaPods来安装并管理JSONKit库了，确保命令行当前路径是在CocoaPodsTest目录下，运行如下命令。</p>

<p><code>
$ pod install
</code></p>

<p>安装完成后会提示如下信息，并且我们的工程目录下会多出一个.xcworkspace结尾的文件，命令行信息绿色部分提醒我们“从此使用CocoaPodsTest.xcworkspace来打开项目”。</p>

<p><img src="/images/2014/01/cocoapods/5.png" alt="" /></p>

<p>通过CocoaPodsTest.xcworkspace来打开项目，这时，我们的项目工程结构就会变成下图这样，多出一个名为Pods的依赖工程，打开Pods文件夹后，发现JSONKit已经在里面了</p>

<p><img src="/images/2014/01/cocoapods/6.png" alt="" /></p>

<p>这时候就可以在项目文件中引入JSONKit.h了，这时候如果你发现import的时候没有提示JSONKit的文件，可以在target-Build Settings下修改“User Header Search Paths”项，新增${SRCROOT}并选择rcursive，如下图。</p>

<p><img src="/images/2014/01/cocoapods/7.png" alt="" /></p>

<p>设置完成后就可以在文件中直接引用第三方库的文件并使用了。</p>

<p><img src="/images/2014/01/cocoapods/8.png" alt="" /></p>

<p>到此，新建工程并使用CocoaPods来管理依赖库的过程就完成了，如果是直接使用已有CocoaPods的项目，则需要首先运行一下pod update命令来更新项，然后照样通过.xcworkspace来打开工程。</p>

<p>如果需要依赖多个第三方类库，只需要修改Podfile文件的配置，然后运行pod update命令即可，比如新增一个AFNetworking的依赖库，首先执行pod search AFNetworking查看一下AFNetworking的配置信息，修改Podfile文件，在后面增加AFNetworking的对应配置信息，然后运行pod update命令就完成了对AFNetworking的集成。</p>

<p><img src="/images/2014/01/cocoapods/9.png" alt="" /></p>

<p>添加AFNetworking库后的目录结构如下。</p>

<p><img src="/images/2014/01/cocoapods/10.png" alt="" /></p>

<p>如果类库有更新，查看更新配置并执行pod update即可简单完成了，从此从手动更新繁重的体力劳动中解脱出来。</p>

<p>简单小结一下：</p>

<ul>
<li>安装CocoaPods</li>
<li>新建项目并在工程根目录下新建Podfile文件，配置需要管理的第三方库</li>
<li>运行pod install下载安装第三方库</li>
</ul>


<h6>更多内容请参考<a href="http://guides.cocoapods.org/">CocoaPods Guides</a></h6>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS事件机制(二)]]></title>
    <link href="http://ryantang.me/blog/2013/12/29/ios-event-dispatch-2/"/>
    <updated>2013-12-29T10:20:43+08:00</updated>
    <id>http://ryantang.me/blog/2013/12/29/ios-event-dispatch-2</id>
    <content type="html"><![CDATA[<p>本篇内容接上一篇<a href="http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/">iOS事件机制(一)</a>，本次主要介绍iOS事件中的多点触控事件和手势事件。</p>

<p>从上一篇的内容我们知道，在iOS中一个事件用一个UIEvent对象表示，UITouch用来表示一次对屏幕的操作动作，由多个UITouch对象构成了一个UIEvent对象。另外，<code>UIResponder</code>是所有响应者的父类，UIView、UIViewController、UIWindow、UIApplication都直接或间接的集成了UIResponder。关于事件响应者链的传递机制在上一篇中也有阐述，如果你还不是很了解，可以先看看<a href="http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/">iOS事件机制(一)</a>。</p>

<!--More-->


<h2>事件处理方法</h2>

<p>UIResponder中定义了一系列对事件的处理方法，他们分别是：</p>

<ul>
<li>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
<li>&ndash;(void)touchesMoved:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
<li>&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
<li>&ndash;(void)touchesCancelled:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
</ul>


<p>从方法名字可以知道，他们分别对应了屏幕事件的开始、移动、结束和取消几个阶段，前三个阶段理解都没问题，最后一个取消事件的触发时机是在诸如突然来电话或是系统杀进程时调用。这些方法的第一个参数定义了UITouch对象的一个集合(NSSet)，它的数量表示了这次事件是几个手指的操作，目前iOS设备支持的多点操作手指数最多是5。第二个参数是当前的UIEvent对象。下图展示了一个UIEvent对象与多个UITouch对象之间的关系。</p>

<p><img src="/images/2013/12/ios_event_dispatch/11.png" alt="" /></p>

<h3>一、点击事件</h3>

<p>首先，新建一个自定义的View继承于UIView，并实现上述提到的事件处理方法，我们可以通过判断UITouch的tapCount属性来决定响应单击、双击或是多次点击事件。</p>

<p>```c MyView.m</p>

<h1>import &ldquo;MyView.h&rdquo;</h1>

<p>@implementation MyView</p>

<p>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>&ndash;(void)touchesMoved:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>for (UITouch *aTouch in touches) {
    if (aTouch.tapCount == 2) {
        // 处理双击事件
        [self respondToDoubleTapGesture];
    }
}
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesCancelled:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>&ndash;(void)respondToDoubleTapGesture
{</p>

<pre><code>NSLog(@"respondToDoubleTapGesture");
</code></pre>

<p>}</p>

<p>@end
```</p>

<h3>二、滑动事件</h3>

<p>滑动事件一般包括上下滑动和左右滑动，判断是否是一次成功的滑动事件需要考虑一些问题，比如大部分情况下，用户进行一次滑动操作，这次滑动是否是在一条直线上？或者是否是基本能保持一条直线的滑动轨迹。或者判断是上下滑动还是左右滑动等。另外，滑动手势一般有一个起点和一个终点，期间是在屏幕上画出的一个轨迹，所以需要对这两个点进行判断。我们修改上述的MyView.m的代码来实现一次左右滑动的事件响应操作。</p>

<p>```c MyView.m</p>

<h1>import &ldquo;MyView.h&rdquo;</h1>

<h1>define HORIZ_SWIPE_DRAG_MIN  12    //水平滑动最小间距</h1>

<h1>define VERT_SWIPE_DRAG_MAX    4    //垂直方向最大偏移量</h1>

<p>@implementation MyView</p>

<p>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>UITouch *aTouch = [touches anyObject];
// startTouchPosition是一个CGPoint类型的属性，用来存储当前touch事件的位置
self.startTouchPosition = [aTouch locationInView:self];
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesMoved:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>UITouch *aTouch = [touches anyObject];
CGPoint currentTouchPosition = [aTouch locationInView:self];

//  判断水平滑动的距离是否达到了设置的最小距离，并且是否是在接近直线的路线上滑动（y轴偏移量）
if (fabsf(self.startTouchPosition.x - currentTouchPosition.x) &gt;= HORIZ_SWIPE_DRAG_MIN &amp;&amp;
    fabsf(self.startTouchPosition.y - currentTouchPosition.y) &lt;= VERT_SWIPE_DRAG_MAX)
{
    // 满足if条件则认为是一次成功的滑动事件，根据x坐标变化判断是左滑还是右滑
    if (self.startTouchPosition.x &lt; currentTouchPosition.x) {
        [self rightSwipe];//右滑响应方法
    } else {
        [self leftSwipe];//左滑响应方法
    }
    //重置开始点坐标值
    self.startTouchPosition = CGPointZero;
}
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesCancelled:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>//当事件因某些原因取消时，重置开始点坐标值
self.startTouchPosition = CGPointZero;
</code></pre>

<p>}</p>

<p>&ndash;(void)rightSwipe
{</p>

<pre><code>NSLog(@"rightSwipe");
</code></pre>

<p>}</p>

<p>&ndash;(void)leftSwipe
{</p>

<pre><code>NSLog(@"leftSwipe");
</code></pre>

<p>}</p>

<p>@end
```</p>

<h3>三、拖拽事件</h3>

<p>在屏幕上我们可以拖动某一个控件(View)进行移动，这种事件成为拖拽事件，其实现原理就是在不改变View的大小尺寸的前提下改变View的显示坐标值，为了达到动态移动的效果，我们可以在move阶段的方法中进行坐标值的动态更改，还是重写MyView.m的事件处理方法，这次在touchesMove方法中进行处理。</p>

<p>```c MyView.m</p>

<h1>import &ldquo;MyView.h&rdquo;</h1>

<p>@implementation MyView</p>

<p>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>&ndash;(void)touchesMoved:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>UITouch *aTouch = [touches anyObject];
//获取当前触摸操作的位置坐标
CGPoint loc = [aTouch locationInView:self];
//获取上一个触摸点的位置坐标
CGPoint prevloc = [aTouch previousLocationInView:self];

CGRect myFrame = self.frame;
//改变View的x、y坐标值
float deltaX = loc.x - prevloc.x;
float deltaY = loc.y - prevloc.y;
myFrame.origin.x += deltaX;
myFrame.origin.y += deltaY;
//重新设置View的显示位置
[self setFrame:myFrame];
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>&ndash;(void)touchesCancelled:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>@end
```</p>

<h3>四、双指缩放</h3>

<p>之前提到过UIEvent包含了一系列的UITouch对象构成一次事件，当设计多点触控操作时，可与对UIEvent对象内的UITouch对象进行处理，比如实现一个双指缩放的功能。</p>

<p>```c MyView.m</p>

<h1>import &ldquo;MyView.h&rdquo;</h1>

<p>@implementation MyView
{</p>

<pre><code>BOOL pinchZoom;
CGFloat previousDistance;
CGFloat zoomFactor;
</code></pre>

<p>}</p>

<p>&ndash;(id)init
{</p>

<pre><code>self = [super init];
if (self) {
    pinchZoom = NO;
    //缩放前两个触摸点间的距离
    previousDistance = 0.0f;
    zoomFactor = 1.0f;
}
return self;
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>if(event.allTouches.count == 2) {
    pinchZoom = YES;
    NSArray *touches = [event.allTouches allObjects];
    //接收两个手指的触摸操作
    CGPoint pointOne = [[touches objectAtIndex:0] locationInView:self];
    CGPoint pointTwo = [[touches objectAtIndex:1] locationInView:self];
    //计算出缩放前后两个手指间的距离绝对值（勾股定理）
    previousDistance = sqrt(pow(pointOne.x - pointTwo.x, 2.0f) +
                            pow(pointOne.y - pointTwo.y, 2.0f));
} else {
    pinchZoom = NO;
}
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesMoved:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>if(YES == pinchZoom &amp;&amp; event.allTouches.count == 2) {
    NSArray *touches = [event.allTouches allObjects];
    CGPoint pointOne = [[touches objectAtIndex:0] locationInView:self];
    CGPoint pointTwo = [[touches objectAtIndex:1] locationInView:self];
    //两个手指移动过程中，两点之间距离
    CGFloat distance = sqrt(pow(pointOne.x - pointTwo.x, 2.0f) +
                            pow(pointOne.y - pointTwo.y, 2.0f));
    //换算出缩放比例
    zoomFactor += (distance - previousDistance) / previousDistance;
    zoomFactor = fabs(zoomFactor);
    previousDistance = distance;

    //缩放
    self.layer.transform = CATransform3DMakeScale(zoomFactor, zoomFactor, 1.0f);
}
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>if(event.allTouches.count != 2) {
    pinchZoom = NO;
    previousDistance = 0.0f;
}
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesCancelled:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<p>}</p>

<p>@end
```
上面实现的方式有一点不足之处就是必须两个手指同时触摸按下才能达到缩放的效果，并不能达到相册里面那样一个手指触摸后，另一个手指按下也可以缩放。如果需要达到和相册照片缩放的效果，需要同时控制begin、move、end几个阶段的事件处理。这个不足就留给感兴趣的同学自己去实现了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS事件机制(一)]]></title>
    <link href="http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/"/>
    <updated>2013-12-07T15:10:42+08:00</updated>
    <id>http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1</id>
    <content type="html"><![CDATA[<blockquote><p>运用的前提是掌握</br>
掌握的本质是理解</p></blockquote>

<p><img src="/images/2013/12/ios_event_dispatch/1.png" alt="" /></p>

<!--More-->


<p>本篇内容将围绕iOS中事件及其传递机制进行学习和分析。在iOS中，事件分为三类：</p>

<ul>
<li>触控事件（单点、多点触控以及各种手势操作）</li>
<li>传感器事件（重力、加速度传感器等）</li>
<li>远程控制事件（远程遥控iOS设备多媒体播放等）</li>
</ul>


<p>这三类事件共同构成了iOS设备丰富的操作方式和使用体验，本次就首先来针对第一类事件：触控事件，进行学习和分析。</p>

<h2>Gesture Recognizers</h2>

<p>Gesture Recognizers是一类手势识别器对象，它可以附属在你指定的View上，并且为其设定指定的手势操作，例如是点击、滑动或者是拖拽。当触控事件 发生时，设置了Gesture Recognizers的View会先通过识别器去拦截触控事件，如果该触控事件是事先为View设定的触控监听事件，那么Gesture Recognizers将会发送动作消息给目标处理对象，目标处理对象则对这次触控事件进行处理，先看看如下流程图。</p>

<p><img src="/images/2013/12/ios_event_dispatch/2.png" alt="" /></p>

<p>在iOS中，View就是我们在屏幕上看到的各种UI控件，当一个触控事件发生时，Gesture Recognizers会先获取到指定的事件，然后发送动作消息(action message)给目标对象(target)，目标对象就是ViewController，在ViewController中通过事件方法完成对该事件的处理。Gesture Recognizers能设置诸如单击、滑动、拖拽等事件，通过Action-Target这种设计模式，好处是能动态为View添加各种事件监听，而不用去实现一个View的子类去完成这些功能。</p>

<p>以上过程就是我们在开发中在方法中常见的设置action和设置target，例如为UIButton设置监听事件等。</p>

<h3>常用手势识别类</h3>

<p>在UIKit框架中，系统为我们事先定义好了一些常用的手势识别器，包括点击、双指缩放、拖拽、滑动、旋转以及长按。通过这些手势识别器我们可以构造丰富的操作方式。</p>

<p><img src="/images/2013/12/ios_event_dispatch/3.png" alt="" /></p>

<p>在上表中可以看到，UIKit框架中已经提供了诸如UITapGestureRecognizer在内的六种手势识别器，如果你需要实现自定义的手势识别器，也可以通过继承UIGestureRecognizer类并重写其中的方法来完成，这里我们就不详细讨论了。</p>

<p>每一个Gesture Recognizer关联一个View，但是一个View可以关联多个Gesture Recognizer，因为一个View可能还能响应多种触控操作方式。当一个触控事件发生时，Gesture Recognizer接收一个动作消息要先于View本身，结果就是Gesture Recognizer作为View处理触控事件的代表，或者叫代理。当Gesture Recognizer接收到指定的事件时，它就会发送一条动作消息(action message)给ViewController并处理。</p>

<h3>连续和不连续动作</h3>

<p><img src="/images/2013/12/ios_event_dispatch/4.png" alt="" /></p>

<p>触控动作同时分为连续动作(continuous)和不连续动作(discrete)，连续动作例如滑动和拖拽，它会持续一小段时间，而不连续动作例如单击，它瞬间就会完成，在这两类事件的处理上又稍有不同。对于不连续动作，Gesture Recognizer只会给ViewContoller发送一个单一的动作消息(action message),而对于连续动作，Gesture Recognizer会发送多条动作消息给ViewController，直到所有的事件都结束。</p>

<p>为一个View添加GestureRecognizer有两种方式，一种是通过InterfaceBuilder实现，另一种就是通过代码实现，我们看看通过代码来如何实现。</p>

<p>```java MyViewContoller.m
&ndash; (void)viewDidLoad {</p>

<pre><code> [super viewDidLoad];

 // 创建并初始化手势对象
 UITapGestureRecognizer *tapRecognizer = [[UITapGestureRecognizer alloc]
      initWithTarget:self action:@selector(respondToTapGesture:)];

 // 指定操作为单击一次
 tapRecognizer.numberOfTapsRequired = 1;

 // 为当前View添加GestureRecognizer
 [self.view addGestureRecognizer:tapRecognizer];

 // ...
</code></pre>

<p>}
```</p>

<p>通过上述代码，我们实现了为当前MyViewController的View添加一个单击事件，首先构造了UITapGestureRecognizer对象，指定了target为当前ViewController本身，action就是后面自己实现的处理方法，这里就呼应了前文提到的Action-Target模式。</p>

<p>在事件处理过程中，这两种方式所处的状态又各有不同，首先，所有的触控事件最开始都是处于可用状态(Possible)，对应UIKit里面的UIGestureRecognizerStatePossible类，如果是不连续动作事件，则状态只会从Possible转变为已识别状态(Recognized,UIGestureRecognizerStateRecognized)或者是失败状态(Failed,UIGestureRecognizerStateFailed)。例如一次成功的单击动作，就对应了Possible-Recognized这个过程。</p>

<p><img src="/images/2013/12/ios_event_dispatch/5.png" alt="" /></p>

<p>如果是连续动作事件，如果事件没有失败并且连续动作的第一个动作被成功识别(Recognized)，则从Possible状态转移到Began(UIGestureRecognizerStateBegan)状态，这里表示连续动作的开始，接着会转变为Changed(UIGestureRecognizerStateChanged)状态，在这个状态下会不断循环的处理连续动作，直到动作执行完成变转变为Recognized已识别状态，最终该动作会处于完成状态(UIGestureRecognizerStateEnded)，另外，连续动作事件的处理状态会从Changed状态转变为Canceled(UIGestureRecognizerStateCancelled)状态，原因是识别器认为当前的动作已经不匹配当初对事件的设定了。每个动作状态的变化，Gesture Recognizer都会发送消息(action message)给Target，也就是ViewController，它可以根据这些动作消息进行相应的处理。例如一次成功的滑动手势动作就包括按下、移动、抬起的过程，分别对应了Possible-Began-Changed-Recognized这个过程。</p>

<h3>UITouch &amp; UIEvent</h3>

<p>在屏幕上的每一次动作事件都是一次Touch，在iOS中用UITouch对象表示每一次的触控，多个Touch组成一次Event，用UIEvent来表示一次事件对象。</p>

<p><img src="/images/2013/12/ios_event_dispatch/6.png" alt="" /></p>

<p>在上述过程中，完成了一次双指缩放的事件动作，每一次手指状态的变化都对应事件动作处理过程中得一个阶段。通过Began-Moved-Ended这几个阶段的动作(Touch)共同构成了一次事件(Event)。在事件响应对象UIResponder中有对应的方法来分别处理这几个阶段的事件。</p>

<ul>
<li>touchesBegan:withEvent:</li>
<li>touchesMoved:withEvent:</li>
<li>touchesEnded:withEvent:</li>
<li>touchesCancelled:withEvent:</li>
</ul>


<p>后面的参数分别对应UITouchPhaseBegan、UITouchPhaseMoved、UITouchPhaseEnded、UITouchPhaseCancelled这几个类。用来表示不同阶段的状态。</p>

<h3>事件传递</h3>

<p><img src="/images/2013/12/ios_event_dispatch/7.png" alt="" /></p>

<p>如上图，iOS中事件传递首先从App(UIApplication)开始，接着传递到Window(UIWindow)，在接着往下传递到View之前，Window会将事件交给GestureRecognizer，如果在此期间，GestureRecognizer识别了传递过来的事件，则该事件将不会继续传递到View去，而是像我们之前说的那样交给Target(ViewController)进行处理。</p>

<h2>响应者链(Responder Chain)</h2>

<p>通常，一个iOS应用中，在一块屏幕上通常有很多的UI控件，也就是有很多的View，那么当一个事件发生时，如何来确定是哪个View响应了这个事件呢，接下来我们就一起来看看。</p>

<h3>寻找hit-test view</h3>

<p>什么是hit-test view呢？简单来说就是你触发事件所在的那个View，寻找hit-test view的过程就叫做Hit-Testing。那么，系统是如何来执行Hit-Testing呢，首先假设现在有如下这么一个UI布局，一种有ABCDE五个View。</p>

<p><img src="/images/2013/12/ios_event_dispatch/8.png" alt="" /></p>

<p>假设一个单击事件发生在了View D里面，系统首先会从最顶层的View A开始寻找，发现事件是在View A或者其子类里面，那么接着从B和C找，发现事件是在C或者其子类里面，那么接着到C里面找，这时发现事件是在D里面，并且D已经没有子类了，那么hit-test view就是View D啦。</p>

<h3>响应者对象(Responsder Object)</h3>

<p>响应者对象是能够响应并且处理事件的对象，UIResponder是所有响应者对象的父类，包括UIApplication、UIView和UIViewController都是UIResponder的子类。也就意味着所有的View和ViewController都是响应者对象。</p>

<h3>第一响应者(First Responder)</h3>

<p>第一响应者是第一个接收事件的View对象，我们在Xcode的Interface Builder画视图时，可以看到视图结构中就有First Responder。</p>

<p><img src="/images/2013/12/ios_event_dispatch/10.png" alt="" /></p>

<p>这里的First Responder就是UIApplication了。另外，我们可以控制一个View让其成为First Responder，通过实现 canBecomeFirstResponder方法并返回YES可以使当前View成为第一响应者，或者调用View的becomeFirstResponder方法也可以，例如当UITextField调用该方法时会弹出键盘进行输入，此时输入框控件就是第一响应者。</p>

<h3>事件传递机制</h3>

<p>如上所说，，如果hit-test view不能处理当前事件，那么事件将会沿着响应者链(Responder Chain)进行传递，知道遇到能处理该事件的响应者(Responsder Object)。通过下图，我们来看看两种不同情况下得事件传递机制。</p>

<p><img src="/images/2013/12/ios_event_dispatch/9.png" alt="" /></p>

<p>左边的情况，接收事件的initial view如果不能处理该事件并且她不是顶层的View，则事件会往它的父View进行传递。initial view的父View获取事件后如果仍不能处理，则继续往上传递，循环这个过程。如果顶层的View还是不能处理这个事件的话，则会将事件传递给它们的ViewController，如果ViewController也不能处理，则传递给Window(UIWindow)，此时Window不能处理的话就将事件传递给Application(UIApplication)，最后如果连Application也不能处理，则废弃该事件。</p>

<p>右边图的流程唯一不同就在于，如果当前的ViewController是由层级关系的，那么当子ViewController不能处理事件时，它会将事件继续往上传递，直到传递到其Root ViewController，后面的流程就跟之前分析的一样了。</p>

<p>这就是事件响应者链的传递机制，通过这些内容，我们可以更深入的了解事件在iOS中得传递机制，对我们在实际开发中更好的理解事件操作的原理有很大的帮助，也对我们实现复杂布局进行事件处理时增添了多一份的理解。</p>

<h2>总结</h2>

<p>通过前面的内容分析，我们已经学习并了解了如下内容：</p>

<ul>
<li>Gesture Recognizers，是用来控制手势识别的过程和方法，并且其通过Action-Target模式与ViewController的通信的方式。连续和不连续手势动作情况下GestureRecognizer的状态转变。</li>
<li>UITouch和UIEvent对象，他们都是UIKit中来进行事件处理的对象，多个UITouch对象构成一个UIEvent对象，重写相应的方法可以控制和处理事件各个阶段的操作。</li>
<li>系寻找hit-test view的方式、事件传递机、制响应者链</li>
</ul>


<blockquote><p>后记：本篇是iOS事件传递机制的上篇，下篇将继续讨论多点触控事件和手势操作的内容！</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果开发者账号那些事儿（三）]]></title>
    <link href="http://ryantang.me/blog/2013/11/28/apple-account-3/"/>
    <updated>2013-11-28T19:52:00+08:00</updated>
    <id>http://ryantang.me/blog/2013/11/28/apple-account-3</id>
    <content type="html"><![CDATA[<blockquote><p>这是一篇教程<br>
这里有手把手教学<br></p></blockquote>

<p>这是苹果开发者账号相关系列第三篇，本篇主要介绍Provisioning Profile，如果你还没有看过前两篇，可以先看看：</p>

<ul>
<li><a href="http://ryantang.me/blog/2013/08/28/apple-account-1/" target="_blank">苹果开发者账号那些事儿（一）</a></li>
<li><a href="http://ryantang.me/blog/2013/09/03/apple-account-2/" target="_blank">苹果开发者账号那些事儿（二）</a></li>
</ul>


<!--More-->


<h2>什么是Provisioning Profile？</h2>

<p>从字面翻译，Provisioning Profile就是配置文件的意思，它在开发者账号体系中所扮演的角色也是配置和验证的作用。如果你有开发者账号，可以打开你的开发者控制台，在首页可以看到如下界面。如果你没有开发者账号，那就看图片意会吧！：）</p>

<p><img src="/images/2013/11/apple_account_3/0.png" alt="0" /></p>

<p>现在开发者控制台相比之前在界面布局上已经进行了改版，更加直观，也更加美观。红框标记的地方我们可以看到Provisioning Profile文件夹图标，点击进去，就来到了所有证书和配置文件的管理控制中心。我们可以在最下方看到标记为Provisioning Profiles的区域，这里就是我们管理iOS或者Mac应用程序Provisioning Profile的地方啦。</p>

<p><img src="/images/2013/11/apple_account_3/1.png" alt="1" /></p>

<p>点击右上方的“+”号会提示我们新建什么类型的Provisioning Profile，可以看到，Provisioning Profile分为两大类，一类是Development，一类是Distribution，前者是创建我们在开发环境下的配置文件，不能进行发布，后者可以创建发布到App Store或者以Ad Hoc发布的配置文件。创建Development下得Provisioning Profile后，我们可以在真机上对App进行开发和调试。在Distribution下的Provisioning Profile，我们可以选择创建发布到应用商店的配置文件，另外就是Ad Hoc方式下的配置文件。Ad Hoc是指在不发布到App Store的情况下，可以将发布状态下的App装在指定的一些真机上进行测试，但是这里指定的设备数量是有限的（99台）。</p>

<p>到这里，我们已经知道Provisioning Profile有两类，一类是开发状态下的，一类是发布状态下得。那Provisioning Profile里面究竟有些什么东西呢，我们接着往下看。</p>

<p><img src="/images/2013/11/apple_account_3/2.png" alt="1" /></p>

<p>我们选择创建一个Development状态下的Provisioning Profile，首先需要我们填写App ID，我们知道，每一个应用都有唯一的App ID，这个ID就好比我们应用程序的身份证，通过下图可以看到关于App ID的构成。</p>

<p><img src="/images/2013/11/apple_account_3/3.png" alt="1" /></p>

<p>现在，App ID由一个Apple产生的Team ID作为前缀，后面跟的其实就是我们在Xcode中设置的Bundle ID，其实就相当于包名（Android里面也是利用应用包名来唯一标记App）。通过这种方式，我们就将一个指定的App与一个Provisioning Profile进行绑定了，也就是说这个Provisioning Profile只能作为这一个App的开发配置文件。那我们每一次开发新应用的时候就得重新来新建Provisioning Profile，这显得非常麻烦，好在Apple已经为我们想到了这一点，我们可以通过通配符来标记App ID，这样我们可以只创建一个开发配置文件就可以来测试所有我们开发的App了，下图是使用通配符标记的App ID格式。</p>

<p><img src="/images/2013/11/apple_account_3/4.png" alt="1" /></p>

<p>关于App ID的创建，可以到证书配置管理控制台Identifiers模块下App IDs栏目下进行创建，这里就不再详细赘述了。App ID选好了，我们继续下面的步骤。这时，提示会要求我们选择Certificates。</p>

<p><img src="/images/2013/11/apple_account_3/5.png" alt="1" /></p>

<p>那什么是Certificates呢？你可以在<a href="http://ryantang.me/blog/2013/09/03/apple-account-2/" target="_blank">苹果开发者账号那些事儿（二）</a>中得到详细的答案。如果你现在不想看，那简单的说，Certificates就是一个来验证你是合法开发者的证书文件，这里通常是对你进行开发的Mac进行授权。我们可以选择一个经过验证的Certificate来配置这个Provisioning Profile。选择完毕后我们就可以进行下一步了。这时，提示会要求我们选择Device。</p>

<p><img src="/images/2013/11/apple_account_3/6.png" alt="1" /></p>

<p>选择Device也就是说我们希望这个Provisioning Profile对哪些设备进行授权，只有选中的设备，才能使用这个配置文件来进行真机调试，否则，装了也没有，因为别人压根没对你授权。设备选择完毕后，我们继续下面的步骤，这时，提示就会要求我们输入这个Provisioning Profile的名字了。</p>

<p><img src="/images/2013/11/apple_account_3/7.png" alt="1" /></p>

<p>在统计信息中我们可以看到，Provisioning Profile的类型为Development类型，选择了一个指定的App ID，指定了一个Certificates，另外指定了一台设备，这样，我们的Provisioning Profile就配置完成了。这时到配置文件列表我们可以看到刚刚生成的这个配置文件，显示为Active已激活，另外要说的是，每一个Provisioning Profile都有一个有效期，通常是一年，过期后就得重新验证一下，不需要重新生成，只需手动验证一下即可，点击查看详情。</p>

<p><img src="/images/2013/11/apple_account_3/8.png" alt="1" /></p>

<p>这里，我们可以看到比之前的详情更丰富的信息，其中Enabled Service中例举的信息是在配置App ID的时候选择的，作用是为这个配置文件申请诸如消息推送和应用内购买的权限。另外，Expires指明了这个配置文件的过期时间，最后Status就显示状态为Activie，如果不可用的话会显示Invalid。如果发现配置文件过期，就像之前说的，手动验证一下即可。最后，可以将Provisioning Profile下载到本地，下载完成后，我们就可以看到一个扩展名为.mobileprovision的文件，打开Xcode，连上设配，双击这个配置文件，这个配置文件就被安装到我们的测试设备中了，通过Xcode的Device窗口可以查看这台测试设备所有的Provisioning Profile。到这里，我们已经知道了Provisioning Profile是用来做验证授权的，也知道了它其实是装在我们的测试设备上的，当然，你也知道了如何去创建它。那么，接下来我们就来看看Provisioning Profile的内部结构图。</p>

<p><img src="/images/2013/11/apple_account_3/9.png" alt="1" /></p>

<p>这里，拿Ad Hoc方式的配置文件来举例，按照之前说的，Ad Hoc能够在不发布到App Store的前提下允许指定的设备安装App，那这个配置文件中肯定就包含Devices信息，同时也包含App ID，另外还包含一个发布状态下的Certificate。到这里，或许你会有疑问，正式发布状态下的配置文件应该是怎样的，首先要说的是，正式发布App时，Provisioning Profile是不需要提前安装到用户手机上的，如果这样的话，那估计Apple就傻了。在正式发布到Apple Store时，发布状态的Provisioning Profile已经以签名的方式和App进行了绑定，有一点不同的是，发布状态的Provisioning Profile不需要指定Device，因为它不知道将被哪些设备使用，下图是发布状态下的配置文件结构。</p>

<p><img src="/images/2013/11/apple_account_3/10.png" alt="1" /></p>

<p>最后，如果是Company类型的开发者账号，可以生成一个供团队使用的Team Provisioning Profile，通过这个配置文件，团队内成员可以共用一个配置文件来进行开发调试，当然，App ID得指定成通配类型的。</p>

<p><img src="/images/2013/11/apple_account_3/11.png" alt="1" /></p>

<p>这里需要注意的是，每一个苹果开发者账号只有一个Agent权限，就就是说，最终真正有权限发布到App Store的人就是这个开发者账号的拥有者，他的身份类型就是Agent，另外还有两种身份类型，一种是Admin，一种是Member，关于更多团队账号角色的信息，你可以参考<a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ManagingYourTeam/ManagingYourTeam.html#//apple_ref/doc/uid/TP40012582-CH16-SW1" target="_blank">这里</a>。</p>

<h2>总结</h2>

<p>通过上面的内容，你是否已经能够回答最开始提出的问题呢？什么是Provisioning Profile？这里做一个简单的总结：</p>

<ul>
<li>Provisioning Profile是一个安装在测试设备上的配置文件，文件扩展名为.mobileprovision</li>
<li>Provisioning Profile有两种类型，一种是Development、一种是Distribution，分别对应开发状态和发布状态的配置文件</li>
<li>配置Provisioning Profile之前需要先设置好Certificates、App ID、Devices等信息</li>
<li>Provisioning Profile的有效期为12个月，过期后得手动验证方可继续使用</li>
</ul>


<p>内容就到这里了，要想理解的更透彻，还是实际去操作和实验来的快。如果你是Xcode5了，进到Preferences里面，选择Accounts选项卡，将你的Apple ID添加到Xcode里面，然后到工程General和Build Settings里面去折腾吧。后面的事，你就自己琢磨吧！：）</p>

<p><img src="/images/2013/11/apple_account_3/13.png" alt="1" /></p>

<p><img src="/images/2013/11/apple_account_3/14.png" alt="1" /></p>

<blockquote><p>本期内容就到这里了，有不足之处，欢迎指正，如果你希望经常收到一些有趣的内容，欢迎微信扫描网页右边的二维码关注我的微信公众账号“Android及iOS开发汇总”。</p></blockquote>

<p>Reference From <a href="https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html">Apple Developer Center</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果开发者账号那些事儿（二）]]></title>
    <link href="http://ryantang.me/blog/2013/09/03/apple-account-2/"/>
    <updated>2013-09-03T21:24:00+08:00</updated>
    <id>http://ryantang.me/blog/2013/09/03/apple-account-2</id>
    <content type="html"><![CDATA[<blockquote><p>这是一篇教程<br>
这里有手把手教学<br></p></blockquote>

<p>这是苹果开发者账号系列第二篇，如果你还没有看过第一篇，也许你会想看一看：</p>

<ul>
<li><a href="http://ryantang.me/blog/2013/08/28/apple-account-1/" target="_blank">苹果开发者账号那些事儿（一）</a></li>
</ul>


<h2>一、关于证书</h2>

<p>苹果使用密文签名技术来验证App的合法性，不管是iOS应用还是Mac应用都需要相应的签名证书来作为测试或发布App用。这里主要谈谈iOS的证书，当然，Mac的证书也基本类似。</p>

<p>在开发iOS应用的时候，我们需要签名证书（<code>开发证书</code>）来验证，并允许我们在真机上对App进行测试。另外，在发布App到App store的时候，我们也需要证书(<code>发布证书</code>)来做验证。那么什么是签名证书，如何获取签名证书，下面听我慢慢道来。</p>

<!--More-->


<p>首先，证书（<code>Certificate</code>）是用来证明某一件事是否成立的，好比拿到的获奖证书，是证明参加比赛并获奖的凭证。类似，在iOS开发中，用证书来证明你是否具有某些权限或者能力来做某事。代码签名验证允许我们的操作系统来判断是谁对App进行了签名，在安装了Xcode后，Xcode会在项目编译期间使用你的代码签名验证，这个验证由一个由Apple认证过的公钥-私钥对组成，私钥存储在你的钥匙串中（Mac本地，在系统实用工具中），公钥包含在证书（Certificates）中，证书在本地钥匙串和开发者账号中都有存储，这种公钥-私钥验证授权的方式在很多地方都有使用到，比如Git中的SSH协议也是通过这种方式来确认访问权限。另外，还有一个我们可以叫做媒介证书的证书来确保我们的证书（Certificates）是经过授权而发布的。如下图所示：</p>

<p><img src="/images/2013/09/apple_account_2/1.png" alt="1" /></p>

<p>当安装好Xcode时，媒介证书（Intermediate Certificate）就已经安装到我们的钥匙串中去了。通过在开发者账号（Developer Account）和本地（Mac）都经过验证的证书（Certificate）我们就可以利用合法的证书进行App的测试和发布了。</p>

<h2>二、请求证书</h2>

<p>在为App签名前，我们需要向Apple请求签名证书，前提是你已经注册了开发者计划并付费。</p>

<p>1、打开Xcode并进入右上角Organizer窗口，选中顶部第一个名为Devices的Tab，如下图：</p>

<p><img src="/images/2013/09/apple_account_2/2.png" alt="2" /></p>

<p>2、点击菜单栏Editor并选择Refresh from Developer Portal</p>

<p>3、输入开发者账号用户名和密码并点击“Log in”，如下图：</p>

<p><img src="/images/2013/09/apple_account_2/3.png" alt="3" /></p>

<p>4、完成后点击“Submit Request”按钮，此时Xcode会向开发者后台请求相应的证书，证书包括开发证书（Development）和发布证书（Distribution）。窗口如下图所示：</p>

<p><img src="/images/2013/09/apple_account_2/4.png" alt="4" /></p>

<p>5、请求完毕后，Xcode会询问是否需要导出开发者证书，选择“Export”导出。前面的介绍中我们提到过，私钥（Private key）是存储在本地的，证书（Certificate）随着公钥（Public key）存储在开发者账号后台，公钥=私钥对完成对一个开发者和一台开发Mac设备的授权，所以，当我们创建证书时就需要马上备份我们的证书，当切换Mac进行作业时，我们只需要导入我们的私钥证书即可（公钥证书在本地和开发者中心都存储有）。</p>

<p><img src="/images/2013/09/apple_account_2/5.png" alt="5" /></p>

<p>6、导出过程中会要求你对导出的证书设置密码，下次导入此证书时需要输入该密码，所以需要记住此处设置的密码。导出的证书扩展名为.developerprofile，当下次切换Mac进行开发时，，导入该证书即可。</p>

<p><img src="/images/2013/09/apple_account_2/6.png" alt="6" /></p>

<p>导入.developerprofile证书：</p>

<p><img src="/images/2013/09/apple_account_2/7.png" alt="7" /></p>

<h2>三、验证证书</h2>

<p>1、在Xcode Organizer中左侧TEAMS选项卡中可以看到两个证书显示其中，一个是开发证书（Development），一个是发布证书（Distribution），如果开发者证书验证授权成功，则在证书上的小人头像会显示绿色小钩。</p>

<p><img src="/images/2013/09/apple_account_2/8.png" alt="8" /></p>

<p>2、当请求了开发者证书后，会自动在钥匙串中（系统实用工具-钥匙串访问）显示开发证书和发布证书。当选中一个证书时，顶部的说明信息包括了证书发行商和授权信息，同样如果看到绿色打钩说明证书已经安装成功。</p>

<p><img src="/images/2013/09/apple_account_2/9.png" alt="9" /></p>

<p>3、在开发者后台查看开发证书，登陆Developer后台以后进入Certificates选项卡，分别在Development和Distribution选项卡中查看开发证书和发布证书。此时，证书的信息应该和在Xcode中一致。</p>

<p><img src="/images/2013/09/apple_account_2/10.png" alt="10" /></p>

<h2>四、回顾总结</h2>

<p>在上面的讨论中，我们介绍了签名证书以及如何请求及验证证书。在iOS开发中，总的来说主要包括两个证书，一个是开发证书（Development certificates）用来验证哪些设备能用来测试App，在开发测试阶段使用这个证书。另一个是发布证书（Distribution certificates），用来验证是否能向App store提交App审核和发布。如果是公司团队账号，发布证书能在具有发布权限的团队成员间共享。以下是官方对证书类型和名字的一个列表统计，比较详细的例举了证书类型、名字以及简要描述。</p>

<p><img src="/images/2013/09/apple_account_2/11.png" alt="11" /></p>

<blockquote><p>后记：本次关于苹果开发者账号证书相关的介绍就到此结束了，不足之处望大家指正和补充。下篇将主要介绍Provisioning Profile的二三事。欢迎继续关注。</p></blockquote>
]]></content>
  </entry>
  
</feed>
