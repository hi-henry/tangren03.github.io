<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ryan's Zone]]></title>
  <link href="http://ryantang.me/atom.xml" rel="self"/>
  <link href="http://ryantang.me/"/>
  <updated>2017-01-23T18:55:05+08:00</updated>
  <id>http://ryantang.me/</id>
  <author>
    <name><![CDATA[唐韧_Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[这是一条自带红包的朋友圈]]></title>
    <link href="http://ryantang.me/blog/2017/01/23/hongbao/"/>
    <updated>2017-01-23T17:28:50+08:00</updated>
    <id>http://ryantang.me/blog/2017/01/23/hongbao</id>
    <content type="html"><![CDATA[<p><img src="http://ryantang.me/images/2017/1.jpg" alt="1" /></p>

<p>支付宝集福分红包到目前已经有5千万人凑齐五福，平均每个人也才分4块钱，就别费那个劲导出扫福或问朋友要福了。春节，是主动送祝福的时候，是和亲朋好友互动的时候，我们需要的是传递祝福、发出红包的同时抢到红包。如果把红包和朋友圈结合起来，会发生什么呢？</p>

<!--More-->


<p>5年前，短信还是我们和亲朋好友沟通送祝福主要方式，那个时候过年，我们会从自己的诺基亚手机中精心编写或者从哪复制来一条短信，然后从手机通讯录中挑选好联系人，然后一键发送。可惜，那时候的手机还只能一次性群发20条短信，所以我们不得不重复这个操作，一旦操作失误，有人就会收到两条甚至多条重复信息。那时候，我们短信包月，得数着剩余条数发，过个年，短信套餐肯定超量。</p>

<p>5年后的今天，7亿人已经装上了微信。短信套餐还是有，可是几乎已经没人再发短信。微信群解决了当年一次只能发20条短信的窘迫，微信让我们不再担心短信套餐超量。微信红包的出现改变了春节过年发红包的方式，让传统的把人民并塞进红纸发红包逐渐失去光泽。与此同时，微信红包让红包本身增加了趣味性，随机数对于任何人来说都是唤起刺激和期待的一剂良药。如今，逢年过节，说上一句祝福话，发一个随机红包到群里，一下对群里的人广施恩泽，抢到的算手快，没抢到的只能怪手慢。或许那条精心编写的信息已经变得无人问津。没办法，这是人性使然，牛奶面包永远优先于风花雪月。</p>

<p>现在，你的手机里已经加了各种各样的群，不乏这样的场景：一个产品经理群或一个技术群里，某人发出一条招聘信息，希望群友帮忙扩散一下。为了给群友一个动力，于是加码，发一个红包并嘱咐一句“希望大家帮忙转发”，大家当然会帮忙，会帮忙把红包抢完，然后就各自离去，真正碰上几个好心人，帮你转一转。此时，求发送者心里的阴影面积。</p>

<p>再如，有个人品牌意识的各种V们越来越多，他们希望建立自己的粉丝群，扩大自己的影响力，能让自己的观点和言论被人们所津津乐道。于是，他们开公众号、开微博、甚至开网站，然后抓各种热点制造内容，折腾一番后发现还是那个老道理。出来做推广的嘛，能用钱解决的问题就不要动文笔。（补充：本公众号纯属个人娱乐，关注我的你们都是有理想、有追求、有品位、有格调之人）</p>

<p>又如，现在开实体店的老板们如果不开个网店都不好意思说自己是出来做生意的。习大大说了，要照顾好基层群众。还有多少基层老板们不知道什么叫百度推广、不知道淘宝开个店的成本已经如此之高。以三四线城市的商户为例，对他们来说，百度推广太高端，淘宝开店没必要，人家也没想把生意做到全球去。但是，他们希望自己的店在当地有自己的品牌，他们希望店里的最新信息能最快速的传递给当地老百姓，他们希望自己能把回头客的价值放到最大。用现在时髦的话来说，他们也想做好精准营销。</p>

<p>于是，回到本文的主题，“红包+朋友圈”会发生什么呢？请上本公司的力作：“24热线”。
1问：24热线是什么？
1答：它是一款App。
2问：它是干嘛的？
2答：它能成为你的头版头条，帮你聚集粉丝。它能成为营销利器，让信息具备四两拨千斤的传播效果。它能成为你联系专家们的最佳方式，让你的问题得到最专业最权威的解答。总之，它能做的还有很多。
3问：它是给谁用的？
3答：正在了解它的你。（是的，每个人都可以用，偷偷的告诉你，用它还可以免费打电话）</p>

<p>分割线&hellip;</p>

<p>支付宝五福我集齐了，眼看着集齐的人是奔着1个亿去的，没人分2块钱，所以。。。
现在，还有一种玩法比支付宝五福更有意思，24热线春节转发动态领红包活动。不说别的，首先肯定是真正的现！金！红！包！（可提现、可消费）。那么第一步是什么呢，到应用商店去搜索“24热线”，然后下载App。</p>

<p>进入App后到拨号界面，输入我的热线号 808050088，注意，跟我读：808050088。这是我的专属热线号，如果你也想要，你肯定能在App里找到地方开通。然后，出来的那个黑白照片就是我了，点击进去就可以来到我的头版头条主页。</p>

<p><img src="http://ryantang.me/images/2017/2.jpg" alt="1" /></p>

<p>我的主页有我的个人动态，右上角有个红色的红包图案，点击后可选择转发，你可以选择转发至你的动态，或者转发至微信。我建议你转发至你的动态，点击红包图案后再点击下方的“我的动态”，然后，你就可以看到自己领了多少钱的红包了。假如ERIC转发了我的动态的同时领了红包，那么ERIC的粉丝再转发他的动态时，同样能从我这里领到一份红包，是不是很简单，是不是很好玩。</p>

<p><img src="http://ryantang.me/images/2017/3.jpg" alt="1" /></p>

<p>过年了，换个方式发红包，转发你的动态的人既能收到你的祝福，也能收到你的红包。那么问题来了，怎么发呢？很简单，进入“我”并点击“发布动态”。是不是很像微信发朋友圈？注意，下面有个“塞红包”，进去塞个红包，体验简单到绝对你会。试想一下，一条带红包的朋友圈的传播力有多强？会带来什么结果呢，你会在24热线里积累你的粉丝群，你的信息能借助红包朋友圈得到放大器的传播效果。</p>

<p><img src="http://ryantang.me/images/2017/4.jpg" alt="1" /></p>

<p>发完后保后怎么能不看看谁收到我的祝福领了我的红包呢！简单，到“我”里面点击右上角的铃铛（我也不知道为啥是铃铛，得问问设计师），进去后就可以看到究竟谁把你的祝福传递出去了。他们为什么会转呢？前面不说了吗，因为有牛奶和面包。</p>

<p><img src="http://ryantang.me/images/2017/5.jpg" alt="1" /></p>

<p>重点来了，抢了红包怎么办呢，两种做法。你可以直接提现，提到你的银行卡上去。第二种就是消费，在24热线上，你能找到前面说的各种场景里的各种人，而且，他们都是专家。（当然，你可以通过24热线转账给我表示对我告诉你这个消息的奖赏）</p>

<p><img src="http://ryantang.me/images/2017/6.jpg" alt="1" /></p>

<p>24热线上还有各种各样的好玩的人，如果你想找个互联网技术大牛、产品大牛、运营大牛、投融资大牛，可以上来看看。如果你想建立自己的个人品牌，可以上来看看。如果你想将你的一个想法传递出去让更多人知道，可以上来试试，如果你想让影响力被放大，那24热线肯定适合你。</p>

<p><img src="http://ryantang.me/images/2017/7.jpg" alt="1" /></p>

<p>第一次写软文，感觉有点不自然。所以以下是福利阶段，下载24热线App在拨号盘输入808050088关注我，晚上10点，红包奉上。怎么抢，请参考前文。</p>

<p>如果只是这点福利，那也太对不起这么多字了。春节期间，24热线平台将有一大批红包福利将送出，总金额：？（反正比支付宝有诚意多了）</p>

<p>好了，打完收工！
回答题图问题：红包+朋友圈=24热线动态</p>

<p>对了，如果你对做产品感兴趣，而且恰好是非技术出身，那么点击 <a href="https://item.jd.com/12075726.html">这里</a> 或者到京东当当搜索《产品经理必懂的技术那点事儿》，你会有所收获的！</p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2017/01/23/hongbao/'>http://ryantang.me/blog/2017/01/23/hongbao/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2016，在路上迭代升级]]></title>
    <link href="http://ryantang.me/blog/2017/01/01/my2016/"/>
    <updated>2017-01-01T17:28:50+08:00</updated>
    <id>http://ryantang.me/blog/2017/01/01/my2016</id>
    <content type="html"><![CDATA[<p><a href="http://mp.weixin.qq.com/s/ObYSx1S6gI9siMrFkBSxsQ">请点击这里查看</a></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2017/01/01/my2016/'>http://ryantang.me/blog/2017/01/01/my2016/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你的产品节奏好吗？]]></title>
    <link href="http://ryantang.me/blog/2016/03/03/pm-rhythm/"/>
    <updated>2016-03-03T08:32:29+08:00</updated>
    <id>http://ryantang.me/blog/2016/03/03/pm-rhythm</id>
    <content type="html"><![CDATA[<blockquote><p>天时地利人和，节奏决定生死</p></blockquote>

<p>一步到位，步步为营，产品节奏是对同理心的考验。有多少产品经理喜欢恢弘的产品设计，却恰恰被这求全心理所害。恰如其时的产品节奏所起到的效果是指数级的，那么什么是产品节奏呢？</p>

<!--More-->


<p>每个产品都有自己的生命周期，从初始阶段到成长期到成熟期到衰亡期，每一步走的是否到位、是否恰如其时，都决定了产品能发挥出多少价值。简单来说，产品节奏就是在适当的时候做适当的功能和运营，也就是所谓的踩到点上。提前或延后做一些设计，都会影响到产品整体价值的体现。举个例子，微信这么大的体量，最初的版本也就只能发文字加好友。随着用户量的不断增加以及使用场景的不断丰富，陆陆续续推出了很多功能，比如附近的人、朋友圈、红包等功能的出现，无疑都是给微信指数级增长的功能。那么，问题来了，产品经理们，该如何把握产品节奏呢？</p>

<p>产品节奏的把握很大程度上取决于对综合信息的判断，当前的市场环境、用户规模、需求级别、研发能力、运营能力等。</p>

<p>恰当的市场环境能营造一个大环境，不管是政策、舆论还是用户习惯，都会对当前的产品造成影响。比如我所在的移动医疗行业，最近国家卫计委发文标示严打黄牛及加号服务，特别对直属医院的医生要求断绝与一切以加号为名的互联网医疗公司的合作。这种政策动荡无疑给以加号主业务的公司致命一击，就我所知道的，做这类业务的公司就有好几家。当然，这反过来反映的是公司战略，这种刀口舔血的业务很难有生命力。</p>

<p>需求级别反映了当前产品的焦点在哪，比如当微信公众号刚出来时，公众号和普通聊天都处于一级列表，这种设计的目的是为了突出公众号，培养用户习惯。过了一段时间后，我们发现微信把这些公账号全部折叠到二级列表里去了，为什么呢？因为随着用户关注公众号的不断增多、内容的不断丰富，用户每天都会被各种信息所干扰，可能第一屏的聊天信息全是公众号内容，这样影响了用户正常使用微信沟通的方便性。所以，公众号被折叠到二级。这就是以需求级别去定义的产品优先级，折叠还是不折叠，微信踩的点很准。当然，这后面必定有庞大的数据支持决策。作为预判性需求，在决定产品决策的时候，第一阶段以一级列表展示是最正确的设计。</p>

<p>研发能力就不用说了，以微信红包举例，这么大的并发量，没有强大研发能力的支持，这个功能再好，也只会碰到宕机和不可用的结果。想法固然重要，现实同样重要，研发能力是否能支撑起一个功能的核心体验，也是最后反映产品价值的直观表现。比如最初的12306，我就不说了。</p>

<p>运营能力同样是决定产品节奏的关键因素。如果你觉得产品只有功能，那抱歉，你只能被称为功能经理。一项业务的开展，不是只有功能就行的，比如滴滴打车业务，如果只是一个滴滴App，是构建不了今天中国的出行巨头的。每天如何发展更多的司机加入平台，如何提高司机接单率和乘客满意度，如何处理乘客和司机纠纷，如何通过线上运营获取更多的用户，如何通过活动运营扩大影响面积等等。这后面有一个庞大的运营团队在支撑着。</p>

<p>作为产品经理，在不长的产品生涯中，逐渐让我感受到产品节奏的重要性，很多时候，我们都太想要所谓的“完整性”，实际上，适合当下的就是最好的。产品往往不能如期上线，就是因为产品经理们为用户“考虑的太多”，“我觉得”、“假设”、“应该”这些词语如果出现在产品讨论中，就该小心了，也许，你已经添加了很多在这阶段根本不需要的设计。精益创业里强调MVP（Minimum Viable Product）最小化可行产品，以MVP的理念去打造产品，只做当下最重要最解决核心问题的事情，产品的演化才是健康的。少一些“不放心”，觉得少了这个用户体验不好，少了那个就不完整，其实，问题远没你想的那么严重。如果你做社交产品，在产品初期就加入联系人分组功能，那就属于节奏不对，起初那么几个人，分啥组呀。如果你做的是O2O类产品，在平台初期就把评价功能考虑设计的特别完善，那就属于节奏不对，先把订单量做上去，把选择服务和订单支付设计好，没几个成单，评价啥呀。</p>

<p>最后，分享几个我的产品反思：</p>

<ol>
<li>“假如用户会&hellip;”只会产生一些少部分用户使用的低频功能；</li>
<li>产品设计者的上帝思维会带来很多根本不需要的东西，好产品会自生长。上帝造物时也只给了这个世界最简单的元素；</li>
<li>产品功能增加要与业务发展节奏和用户认知程度协同，不为未来设计，为下一步设计；</li>
</ol>


<p>你的产品节奏好吗？</p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2016/03/03/pm-rhythm/'>http://ryantang.me/blog/2016/03/03/pm-rhythm/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员，向左或向右]]></title>
    <link href="http://ryantang.me/blog/2016/02/25/left-or-right/"/>
    <updated>2016-02-25T22:11:13+08:00</updated>
    <id>http://ryantang.me/blog/2016/02/25/left-or-right</id>
    <content type="html"><![CDATA[<blockquote><p>我们总是时不时停下来，寻找自己</p></blockquote>

<p>技术吃青春饭，吃多久、怎么吃、如何吃好。吃完了再吃什么呢。一线程序员做了几年后，有没有想过接下来何去何从，是继续码字还是寻求转型？是成为技术专家还是转型管理？成为项目经理还是产品经理？每个你心里也许都有自己的答案，往下，我只是说说我的一些想法，也许，我说的也是错的。</p>

<!--More-->


<p>技术专家
精通一门技术活多门技术，多年之后，已然成为这个领域的高手，从只会写Helloworld到高级架构师，十年是必修之路。不是谁都能成为技术专家，第一需要天赋、第二必备兴趣、第三要有好性格。为什么这么说，做技术和搞艺术一样，没有一点天赋还真不行，到了一定境界，还真得靠点感觉，所谓大师直觉一下顶过菜鸟苦思冥想。为什么要有兴趣呢，钻研技术是一个枯燥的过程，特别是对于新技术的研究，自己不发自内心的喜欢，还真难恒心坚持下去，就好像有人痴迷于钓鱼一样，你得找到里面的乐趣，而且是只有真正钻进去的人才能感觉到的乐趣。为什么要有好性格呢，不言而喻，如果你天生喜动，坐不了两分钟就得关心一下“国家大事”，那你还真不适合做技术。不要在程序员解bug时去打扰他，就是这个道理。所以，成为技术专家需具备的条件是苛刻的，也就是世界上真正顶级的技术牛人少的原因。有些“技术砖家”用年限来标榜，没有干货，你懂的。</p>

<p>技术管理
技术管理者，或者叫CTO吧。这是技术领域的管理职位，做技术管理对于技术的要求可能不像技术专家那么高，他不一定是某一个领域的专家，但他绝对或多或少了解很多横向知识，也就是说，他知道如何构建公司的技术体系，对于每一种技术都能知晓，不管从服务端、前端、测试、运维，甚至是产品、技术等等，是一个横向人才。但CTO的成长之路肯定也是从程序员开始。但也不是所有人都能成为技术管理者的，首先，管理者首先得能管理好自己，如果自己都是个对事情毫无章法、没有时间和风险概念的人，那如何管理好这一大盘子呢，不乱掉才怪。另外，作为技术管理者，如果你不会和人打交道，不知道如何解决问题，不知道如何调动团队、激发员工，那么，在管理之路上也是会颇受挑战的。换句话说，做管理者，情商一定要高。如果你不能比下属高一个段位，试问以何立足呢。这里的段位不是职位高低亦或专业能力，而是在你的带领下，团队能形成合力，并且让每一个人都发挥更大的价值。所以，别整天说以后要做技术管理，先问问自己，目前自己到达哪一个段位了？</p>

<p>产品经理
如果你不是一个内心强大的人，建议千万别选这一条路。技术好做，产品不易。产品经理，这个世界最孤独的群体。而我，已然在这条路上走了一年多了。产品经理貌似人人都能做，也不知道说人人都是产品经理那哥们儿害了多少无辜少年少女，真正要做好产品经理，可没想象的那么简单。</p>

<p>首先，产品经理需要懂技术、懂设计、懂产品、懂业务、懂协调、懂沟通、懂管理，懂···，总之，要懂的很多。这么复杂的技能要求，也就不难解释，为什么有的产品经理只是个实现经理，有的产品经理只是个画图经理，有的产品经理只是个撕逼经理，有的产品经理只是个指挥经理，有的产品经理只是个嘴巴经理，有的产品经理只是个规划经理。如果按照《用户体验要素》一书中的划分，产品从下往上依次是战略层、范围层、结构层、框架层、表现层，每一个阶段产品经理需要做的事和具备的能力都是不同的，抽象到对业务战略的理解和判断，具体到对一个界面的详细设计，配色是否符合战略需要传递的理念。比如，医疗类产品需要传递的是安全感和平和感，但是却用一个大红色，典型的战略范围与表现不搭调。</p>

<p>其次，产品经理需要与不同背景的人打交道，而且需要统一这些不同背景人的理解和认识。跟技术打交道不能用业务语言，跟设计打交道不能用市场语言，比如对于“前端”这个词，技术的理解是前端技术，诸如Android和iOS或者web前端，但对于业务来说，前端就是销售是市场人员。如果不会时刻转变频道，那估计会疯。产品经理绝对是一群内心极度强大的人，他们面对的是不确定性，通过自己的努力将不确定性和复杂性转变为确定的简单。在老板、上司、用户之间，取得一个平衡点，而且产品还被市场所认可，产品经理们，你们都是不简单的。这也就是为什么好的产品经理难求的原因，乔布斯张小龙等斯是杰出代表。产品经理，不能有大爱，如果你是一个大爱分子，肯定做不出好产品，产品经理都是对某一个东西有独特喜爱并为之疯狂的人，乔布斯对于简单极致的追求，追求到他家里没有一个家具，追求到苹果的Macbook笔记本只有银白一个颜色，并且不像其他笔记本贴的各种标签。张小龙对于微信的把控让你始终感觉到简单，如此庞大的微信让用户感觉到它还是几年前的感觉，将复杂性隐藏起来，呈现给你的永远是你最熟悉最需要的东西，而微信的功能已经丰富的你想象不到。如果你做技术，转型产品经理，绝对会让你对工作对人生有一种完全不同的理解。</p>

<p>那么，你的选择是什么呢？</p>

<p>Never let yourself regret</p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2016/02/25/left-or-right/'>http://ryantang.me/blog/2016/02/25/left-or-right/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[致85前90后]]></title>
    <link href="http://ryantang.me/blog/2016/02/11/8590/"/>
    <updated>2016-02-11T13:56:17+08:00</updated>
    <id>http://ryantang.me/blog/2016/02/11/8590</id>
    <content type="html"><![CDATA[<blockquote><p>经历着同样经历的我们，希望一直都在</p></blockquote>

<p>五年前，微信才刚刚诞生，乔布斯还在，iPhone 4s还没发售，习大大还是上海市委书记，雾霾还不是关键词，O2O还是新鲜玩意儿，小米还被广受质疑，诺基亚还是全球最大的手机厂商。看到这些，不得不感叹，五年，确实能改变世界。我们的生活、环境、习惯都在经历着变革。五年，可以成就一个时代，五年，也代表了一代人。1985年到1990年这五年出生的我们，在2016年，也都到了26岁到33岁的年龄。这个年龄，会经历初入职场、恋爱、结婚、生子、家庭责任等等一系列丰富的人生过程。</p>

<!--More-->


<p>我们这一代人，从小到大目睹了中国的发展，感受着生活的改变。也许现在的零零后小孩，觉得互联网是一个天然产物，觉得通过网络解决问题是一种再普通不过的生活方式，他们属于互联网时代，就好比现代人觉得水和电是一种生活方式一样。85后和90前的我们，经历了电脑出现时的那一丝小激动，网吧曾是我们玩单机游戏的好去处，那时一个局域网游戏就能让一个网吧火爆，可层想过现在的互联网游戏能带来的乐趣和激动。小时候叫伙伴玩可能是在别人家楼下喊，买东西是去商店趴在柜台上看，现在找小伙伴玩，一个微信约好时间地点直接去便是，甚至还可以共享实时位置看看那小子是不是真的快到了。买东西完全没必要固定一个时间专门去商店，上厕所的时间、等车的时间就可以在手机上把想买的东西买了。</p>

<p>我们这一代人，小学吃着小浣熊干脆面，收集水浒卡，不够的和小伙伴换，还发明了各种游戏来赢取卡片，只为看谁先集其。这个过程很快乐，我之所以现在能写出来，说明这个过程印象深刻，也相信有过这段经历的人，你们和我一样，印象同样很深刻。今年春节，支付宝弄了个集福卡活动，过程和结果参与过的人都知道了。但试问，十年后，还会有谁记得这个活动？为什么呢，为什么小时候的种种我们愿意去怀恋、去记忆，而互联网时代的种种记忆在我们脑海里的存储周期是那么有限。原因是因为小时候我们是跟人打交道，跟现实在互动，发生的是情感连接。其实，我们记忆的是当初投入的热情，是一种童年的好奇心和期待，能跟小伙伴们每天课后放学去谈论和身体力行去做的一些事情，大家建立的是情感连接。对比今年春节的支付宝福卡，收到一堆好友请求，完了聊的内容就是你有没有多余的福卡，这种利益连接对比情感连接可见其持续性。</p>

<p>我们这一代人，中学听着周杰伦的歌，看着突如其来的各种偶像剧和言情小说，能玩的网络游戏还屈指可数。传奇这款韩国引进的网络游戏，不知“谋害”了多少无知少年。打怪升级、组队打BOSS爆装备，为了一把屠龙刀可以熬上三天三夜，为了攻城拿下沙巴克城主，花“重金”成立行会，招揽有识之士在一夜激战后享受作为沙巴克城主的喜悦。那时候我们和男女同学传情还只能用写的，当年折的那种信纸现在还有多少人会折？在异地的小情侣们更只能等候一周甚至更长时间的等待才能收到对方的信。最盼望的莫过于是下课生活委员去学校邮局拿信时期待那一叠信里面有一封属于自己的。</p>

<p>我们这一代人，赶上了高考大军，挤破头进入大学，发现理想与现实的差距，在象牙塔摸爬滚打四年，最终以半成品的姿态进入社会。不过，在大学我们也没闲着，上课、逃课、考试、挂科、上课代签到等等，这些都构成我们的大学生活。大学里，不谈个恋爱算不完整，谈的太多了，又被说成泛滥，谈恋爱的等着毕业被宣判，运气不好的中途就被打回原形。好不容易熬出头的一对，面对毕业去向、家庭筛选、现实利益，最终又分崩离析。好一部现实版的情深深雨蒙蒙，有情人最终难眷属，可奈世事无情。</p>

<p>我们这一代人，好不容易进入社会参加工作，工作的苦逼和现实的摧残迫使我们越来越“脚踏实地”，加班成为常态，北上广激烈的竞争和高昂的房价，让一步步奋斗的小青年一次次磨灭着自己的梦想，但为了理想国，又一次次的站起来奋勇向前。富二代官二代毕竟是少数，绝大多数的我们还是得靠自己一步步实现自己的理想。好不容易在工作上立稳脚跟，找到了五年甚至十年为之奋斗的目标，婚姻的压力随之而来。受中国传统思想的影响，成家立业，成家先有家，房子成了第一座大山，二三线城市还好点，北上广的广大青年们，正常的博士毕业靠自己能在这个年龄这个阶段买的起房的又有多少。家里条件好的能支持点，不好的只能靠自己了。革命时代的领导人说过，困难只是暂时的，但有多少人熬得起这个“暂时”呀！同学朋友的比较、七大姑八大姨的催促、家里父母老人急切的心情，都能理解，谁能理解我们。如果时光跳转到五年后，我们会如何看待现在的自己呢？</p>

<p>我们这一代人，慢慢成为时代、社会、家庭的主旋律，一切都在发展，用发展的眼光看问题。五年，可以改变的事情太多了，五年，我们这一代人成长着，五年后，世界又将是一个全新的世界！</p>

<blockquote><p>Never let yourself regret</p></blockquote>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2016/02/11/8590/'>http://ryantang.me/blog/2016/02/11/8590/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2015—跌宕与破晓]]></title>
    <link href="http://ryantang.me/blog/2016/01/03/my-2015/"/>
    <updated>2016-01-03T09:09:01+08:00</updated>
    <id>http://ryantang.me/blog/2016/01/03/my-2015</id>
    <content type="html"><![CDATA[<blockquote><p>坚持，本来就是一种胜利</p></blockquote>

<p>2015年已成为过往，与往年一样，记录下这一年自己的点滴。收获、付出、成长、失败、教训、经验，每一年的每一年，都在进步着。无关乎事情本身，而在于内心本真。2015，对我来说觉得是意义非凡的一年，正如题，“跌宕与破晓”，经历了跌宕起伏，迎来了破晓！</p>

<!--More-->


<p>2015年对我来说最大的变化也就是职业转型，从安身立命之本的开发转向产品，这无疑是一场注定艰难的挑战。这一年，是我的产品元年，这一年，我第一次真正以产品经理的角色和心态在努力着，这一年，我想，我进步了！2015年对我来说最大的挑战也就是心态的转变，学习心态、工作心态、生活心态，这一年，我想，我进步了！2015年对我来说最大的收获是成长，人的成长，这一年，我想，我进步了！和往年的回顾一样，2015年的总结照样从三个方面展开。</p>

<h2>第一部分：学习</h2>

<p>学无止境，不管是上学还是工作，停止了学习，无非是给自己的成长判刑。有人说工作那么忙，哪还有时间学习啊！但其实，越忙、学到的东西就越多。忙意味着工作上的事情多，事情本身如果是替代成本很高的高产出，那么，这种忙就是有价值的，这种忙的结果就是收获，这种忙的过程本身就是学习。过去一年，在学习新东西上，我更多的是从工作中去学习，因为工作后就没有特定的时间和环境专门来学习了。在做每一件事情时我会先想想这件事的目的和意义是什么，有时候人会陷入忙碌的麻痹中，如果不去洞察事情本身，那很可能演化成机械无用功。比如做一份产品文档，我会先弄明白目标受众是谁，如果是技术团队，那么就需要用严谨的技术逻辑表达，如果是销售团队，那么就需要符合销售场景，如果是面向用户，那就需要传达用户价值。另外，不重复发明轮子，一件事情完成后能解决一系列的问题是最高效的。再者，系统性、全局性的考虑解决方案会带来事半功倍的效果。在这些过程中，我会学习如何与不同背景的人打交道，试想，技术人员和销售人员可真真儿是完全不同的两种思维呀！</p>

<p>2015年我的主要学习内容就是产品，不管是产品设计、用户体验、产品运营，涉猎比较广，产品不同于技术，对于专业技能的学习，在做产品的过程中总结经验和教训并在下次遇到类似问题时加以运用。我认为，书本上能学到的产品知识是理论框架，实操技能只能落地打仗。理论与实际相结合，产品是经验学，掉的坑多了，撕的逼多了，自然就进步了。对于产品而言，需要学习的东西很多，这是一个持续的过程，戒骄戒躁，急于求成难成事，这是我这一年的一些感受。每一年过去，人都要有进步，而进步最好的方式就是学习了，我会告诉和要求自己，坚持下去，坚持，本来就是一种胜利。</p>

<p>推荐几本2015年我读过的书：《启示录》、《简约至上》、《用户体验要素》、《领导力的五个层次》、《从0到1》、《结网》、《影响力》、《成为技术领导者》</p>

<h2>第二部分：工作</h2>

<p>2015年，关于工作的总结我在<a href="http://ryantang.me/blog/2015/10/25/pm-road/">《我是如何从技术转向产品的》</a>一文中有详细的记录和总结，这也是从技术转产品一年的时间里自身的一些切身体验，这些都将成为我的宝贵财富。其实对于工作，不仅仅是和事情打交道，跟人打交道的挑战更大，一个公司里，大家各自背景和技能都不同，如何与差异性共存共进本身就是一种挑战。这些问题都会反映到平时的沟通中、合作中。另外我也发现，和不同的人交流，收获的东西会超出自己的认知范围，别人带给自己的思想或认识反而会弥补自己某一方面的欠缺。这是一种极好的提高方式。</p>

<p>对于工作上，这一年的收获最大的也就是解决问题的心态，创业公司，问题太多，重复问题的人太多，解决问题的人太少。经常有这么一句话“问题大家都知道，关键是怎么解决”，所以，对于问题的定义、拆解、寻找解决方案是把事情做好取得价值的前提。在做产品的过程中，会遇到各式各样的的问题，需要处理的信息量很大，从大量需要处理的问题中定位到那个最重要也是最紧急的事，这件事完成以后，第二件需要处理的事会自动出来的。公司是一个集体，是一个为了共同利益目标而协作的团体，工作中与别人合作显得尤为重要，在学校，自己学一门课想怎么学就怎么学，可以先做选择后做判断，工作不一样，需要和自己的合作伙伴交流想法，大家奔着一致的目标去努力，沟通，沟通很重要，沟通的重要性整个行业都说烂了。2015年，我的工作围绕产品而展开，也需要负责一个项目，带一个团队，挑战很大，坑也很多，这时，心态很重要，自我梳理和调整是解决问题的第一步。工作即修行，坚持下去，坚持，本来就是一种胜利。</p>

<h2>第三部分：生活</h2>

<p>写到生活的部分，这一年，我还是很忙碌。也经历了很多事情，这些事情让我领悟到很多东西，这些事情让我增长了自己的阅历。年中前同样坚持着跑步，可惜后来受伤就间断了，2014年提的半马目标很遗憾没有实现，但我不会放弃，马拉松会成为我持续努力的目标。这一年，看书变多了，看书能让人静下来，静下来思考自己到底思考的是什么，这是一段很奇妙的旅程。生活也需要进步，生活需要多姿多彩，如果今年的生活和去年的生活没有变化，那生活就是退步的。人活着不仅仅只有工作，为了工作没了生活未免丧失了太多的美好。今年去上海走了一趟，体验一下不同城市的感觉，人的感觉、城市的味道，让自己暂时慢下来是为了更快的起跑。去了一趟张家界，亲近一下自然，在原始生态里反思一下物欲横流的今天，自己寻找的到底是什么。有趣的人会让自己的生活变得更有趣，我争取做一个有趣的人。</p>

<h2>期待2016</h2>

<p>2016年已然开始，学习、工作、生活还在继续着，寻求更大的突破，找到更好的自己，2016我相信好的事情会相继发生，明年此时，再来回顾！黑暗已经过去，破晓已经来临，如果有一个北极星一般的目标，任何时候，都知道该往哪走！</p>

<p>附上我起床时拍下的一缕破晓！</p>

<p><img src="http://ryantang.me/images/2016/1.jpg" alt="1" /></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2016/01/03/my-2015/'>http://ryantang.me/blog/2016/01/03/my-2015/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我是如何从技术转向产品的]]></title>
    <link href="http://ryantang.me/blog/2015/10/25/pm-road/"/>
    <updated>2015-10-25T11:58:53+08:00</updated>
    <id>http://ryantang.me/blog/2015/10/25/pm-road</id>
    <content type="html"><![CDATA[<blockquote><p>放下，是一种修行</p>

<p>拿起，是一种历练</p></blockquote>

<h2>写在前面</h2>

<p>停博许久，这一次回来完全是以另外一种心态和角色，产品经理！从最熟悉的开发跨越到陌生的产品，从最初的好奇到中途的迷茫到最近的有一点开悟，一路经历着着、成长着，抬笔记录下我这一年心态、意识、思维的转变，算是对过去的一段总结，对未来的一份期许，我因技术而入门，因产品而出门。</p>

<!--More-->


<h2>我理解的产品</h2>

<p>说起产品，或者说互联网产品，我第一次明确的知道这个概念的含义应该是在2011年，那一年智能手机开始兴起，印象很深刻，那一年的Android系统还是在1.x到2.x的升级中，那一年的iPhone对我来说还是个遥远的奢侈品。也是在那一年，我开始学习Android开发到后来学习iOS开发，走上了移动开发的道路，也就是在那时候，我开始做移动App项目，那时候，我把项目等于了产品。那时候对产品的理解是浅层的，更多的是看得到的界面、用的到的功能，相信很多初入产品的同学都会有这个阶段，设计出漂亮的界面和酷炫的功能就以为是一款成功的产品。也就是从那个时候开始，我边开发项目，边发现自己对所谓的项目设计有了自己的见解，并时常给项目负责人，也就是产品经理提自己的建议，我想那就是我最早的产品感觉了，从此，发现自己对这个创造、设计一个好用东西的过程充满了兴趣，埋下伏笔，在开发的过程中，我开始有意识的去了解这个过程，在做好开发之余，我开始“不务正业”的去学习、去了解什么是设计、什么是产品。我开始从网络、一些行业会议去学习、了解这方面的内容，从此，我开始对这个过程越发感兴趣，从此，我知道，这个过程叫做产品设计，主导这个过程的角色叫做产品经理，也就是PM（Product Manager）。</p>

<p>产品经理，听起来是多么高端的一个词，但此经理非彼经理，产品经理没有行政权力，没有主导商业战略的权力，产品经理负责商业战略的落地实施，负责定义产品、设计产品，协调各方资源在一定的条件下完成产品的研发和上线以及上线后的运营和维护。如果把产品比喻成一个孩子，那产品经理就是孩子他妈。现实中，产品经理的工作远没有本身称呼那么高端，产品经理需要处理每一个跟产品相关的问题，产品经理需要与各方沟通取得共识，需要去现场解决问题，需要处理大大小小的杂事，忙碌奔波于跟产品相关的每一个场景中，所以，在互联网，伟大的产品经理们自嘲为产品汪或产品狗。在我看来，产品狗是一个褒义词，它忠诚，对自己的产品忠诚，它勤奋，对产品每一个问题都努力解决，它乐观，每一个小小的进步能让它高兴，每一个不足都是它前进的动力。</p>

<p>细数全世界优秀的产品经理，群星璀璨，乔布斯是极致的代言人，他定义并设计的苹果系列产品改变了一个时代，引领了潮流。他的苛刻、极致、改变世界的初心影响着如今科技行业圈的产品经理们，奉为经典。张小龙，微信之父，深谙人性，理解潮流，能把一款产品做到人们的生活中，几亿人都为之买单，实属境界。相信每一个产品经理都有改变世界的梦想，也都在这条不归路上蹒跚前行，改变世界的毕竟是少数，能改变的只有自己，在产品之路上修炼自己、完善自己，不经意间业务就会发现自己已经做了一件了不起的事，脚踏实地，仰望星空，有宇宙的胸怀，同时也要有蝼蚁的勤奋。</p>

<p>我从2014年10月份开始做产品，到现在正好一年，我所在的是一家创业公司，从技术转行产品也实属巧合，这一年，从产品角度来看，我的产品之路总共经历的三个阶段，也是截然不同的三个阶段，这一路，我的心态、意识、思维都在经历着变革，或者说蜕变，伴随的是艰辛和一路不放弃的韧性，总的来说，在思维意识上我经历了工程思维、功能思维、产品思维三个阶段。思维决定心态和行动，记录下我的转变。</p>

<h2>阶段一：工程思维</h2>

<p>我从2014年10月份开始正式做产品，从那个阶段开始的三个月左右，我做产品的思维更多的是以技术和系统角度出发，我定义这个阶段为工程思维阶段。为什么这么说，因为我在设计产品的时候，第一出发点是技术实现层面的，通过实现的难易程度和系统角度去定义产品和设计产品。这么做有一个最大的弊端，就是脱离实际，我说的这个实际并不是技术实现的实际，而是需求和实际场景。容易变成为了设计而设计，相信做技术的同学都会有一种感觉，当接到一个需求的时候，首先是从现有工程架构的角度和扩展角度去考虑，一个需求或者一个功能的实现与否第一考虑要素是对现有系统的兼容性以及扩展难易程度。这是一种很正常的思维，因为我也是这样。但从另一个角度考虑，一个需求的价值不在于它本身的技术难易，而在于是否解决了产品用户的问题，如果把一个需求定义为技术产物，那我们是在做一个科研任务，相反，产品做的是商业任务。所以，我在一开始从技术模式切换到产品模式时，相当一段时间都是在通过技术定义和设计产品，这个时候的产品脱离现实场景，远离用户需求，我开始反思。</p>

<p>工程思维下的产品产出更像是一个工业品，而不是一个能站在人的角度解决现实问题的产出。它是技术产物或者说是科研成果，远离实际需求和场景，最后会发现，这样的产品投入市场后几乎处于不可用状态，这是非常严重的问题。工程思维模式下，缺乏用户意识，当然就更谈不上用户体验了。有问题不是坏事，可怕的是发现不了问题，发现问题后我开始解决问题，于是，我逐渐进入第二阶段。</p>

<h2>阶段二：功能思维</h2>

<p>发现工程思维下的产品工作不尽如人意，于是我开始有意识的思考，如何去分析和理解需求，如果通过技术手段将一个需求转化为一个给用户使用的功能。这是我的第二阶段，即功能思维，这个阶段维持了近半年，这时候我开始意识到，产品最终是交付给用户使用的，所有的设计过程都是将一个业务需求转化为一个具体场景下的特定功能。而每一个功能都具备完整的业务逻辑和功能体验。</p>

<p>好在的是，这时候我开始站在用户的角度去设计产品，将一个业务需求转化为一个技术能实现的功能，于是我开始围绕功能而思考，每一个需求或者优化我都首先从功能角度入手，如何让用户更好用，应该展现哪些信息等等，我将注意力集中在功能体验和视觉体验上，开始学习市场上各种优秀的产品设计，于是我在解决产品可用性的前提下陷入了一个功能设计怪圈。会为了完成一个需求开始考虑功能体验上的各种可能性，重点都是关注产品功能本身，而忽略了其业务目标和业务价值。而且，这时候我发现，一个产品从商业战略到最后的落地产品上线，期间不仅仅是一个技术产品，还包括业务定义、全业务流程设计等等，产品始终与业务并行发展，真正好的产品应该做到产品驱动业务，在产品设计过程中我忽视了与业务的互动，包括产品上线后产品运营和业务运营，这些环环相扣构成一套整体来支撑一个产品的运转。而且做产品的都知道，与各方的沟通和达成一致实际占到了产品工作的很大一部分。我的思路再一次被打开，开始关注业务、关于产品战略和定义、关注产品需要实现的业务目标，在保证实现一个正确功能的前提下更多的思考这个功能的业务目标是什么，不以结婚为目的的谈恋爱都是耍流氓，不以实现业务目标为目的的产品设计都是扯淡。</p>

<p>功能思维下的产品产出具备了一定的可行性，因为它结合实际需求，在功能思维下我对整个移动App的产品功能设计有了深刻的认识，从信息架构到产品交互设计和部分视觉设计都形成了自己的思维模式。同时，我开始站在业务角度去思考产品问题，产品究竟实现了什么业务目标，与产品相关的各环节究竟该如何定义和设计才能保证最终产品产出是具备可用性的，于是，我逐渐进入第三阶段。</p>

<h2>阶段三：产品思维</h2>

<p>产品思维，也是我目前所处的阶段，这个阶段我关注的更多的是业务价值和业务目标，在充分理解商业战略的前提下来完成产品定义和产品设计，通过充分了解产品所围绕的业务场景去提升产品的可用性和易用性，改善业务体验和产品体验，提升整体的用户体验。返璞归真，回归产品的本质。在产品思维下，我理解产品的过程超出工程和功能，但又涵盖工程和功能，正是因为有了前两个阶段，才让我对产品整个过程和每一个细节有了更进一步的了解和认识。在产品意识和产品思维的驱使下，我在前期定义产品的阶段会充分了解业务并清晰定义业务目标，衡量在目前的产品环境和可用资源下如何快速实现。期间需要完成大量的沟通工作，与业务、运营、设计、技术和公司其他相关职能部门等等。在共识和可行性的基础上再开始进一步的详细设计工作。</p>

<p>产品思维其实可以大大简化产品工作，在思路梳理和分工协作上相比之前有了效率的极大提高。整个产品体系从下到上分为战略层、范围层、结构层、框架层、表现层。最下层的战略层决定了业务和产品需要实现什么目标，为什么人和什么场景服务，范围层需要定义清楚在既有战略的基础上做哪些东西来实现战略目标，结构层需要基于范围层的内容完成基础信息架构和交互设计，框架层完成我们能看的到的界面设计，表现层则是视觉表现设计，让产品看起来更友好。一个完整的产品定义和设计过程都需要经历从下到上的每个阶段，缺失某一个阶段都会导致产品的不完整，重点关注某一个阶段也会导致产品的不平衡，所以需要产品经理找到其中的平衡点。但就重要性来说，越往下，重要程度越高。</p>

<p>产品思维还有一个非常重要的环节就是对业务流程的设计，产品经理为最终的产品质量和用户体验负责，在设计前期就需要考虑产品从设计到开发到最终投入使用需要经历哪些环节，需要与哪些人进行合作。比如需要数据准备的产品，在产品设计阶段就需要与数据提供方达成一致，保证产品上线时数据准备是ok的，比如需要运营介入的产品设计，需要在前期沟通阶段就邀请运营人员加入，确保其对整体业务流程和产品环节是足够清晰而且理解一致的，才能在最后产品上线时大家集体发力保证产品能高效运转，而不是产品单方面思考和定义然后交付给下游配合方，这样会导致产品与业务脱节。所以，产品思维需要在考虑整体性的同时顾全细节，心里要装下业务、运营、设计、研发，这个过程很累，但也足以让人成长。做好产品的同时，也做好了自己。</p>

<h2>我的产品方法</h2>

<p>在整个互联网产品行业里，我属于产品新人，需要学习和掌握的东西还有很多，在此不敢高谈阔论，只把自己的理解记录下来。在这一年的修炼过程中，我慢慢形成了自己的一套做产品的方法，分享出来，算是接受批评建议和与大家讨论。产品和技术一样，需要通过不断的学习和积累加上不断的思考才能突破才能破局，所以对我来说，这是一次重新学习和突破的旅程，好比当初学习技术一样，学习、理解、掌握、整理、思考、突破。以下五点是我做产品过程中的五个关键步骤：</p>

<h4>1.定义产品战略</h4>

<p>定义产品战略需要基于商业战略，我理解的商业战略和产品战略还是略有不同的，商业战略的目标是实现组织利益最大化，而产品战略的目标是实现用户利益的最大化，在确保围绕商业战略的前提下落实到产品战略。所以，对于产品战略的定义需要建立在对商业战略的充分理解上。这就需要从组织高层也就是组织商业战略制定者那获取到一手信息，以最完整的状态将商业战略的定义做到充分理解。接下来就根据完整的商业战略定义来制定产品战略。</p>

<p>一个组织或者公司可能有多条产品线，这时就会有个产品战略，但是商业战略只有一个，所有的产品战略都是为了实现这一个商业战略而制定的。定义产品战略需要分析清楚产品的目标用户是谁，使用场景在哪，关键资源是什么，当然最重要的一点是产品解决了用户什么问题，如果要用一句话来回答什么是产品战略，我总结就是：“我们用什么方法为谁解决了一个什么问题”。这里的“我们”就是组织，是团队，“什么方法”是指我们的核心业务，是服务，“谁”是指我们的目标用户，是客户，“什么问题”是指核心需求，是场景。这个过程不需要用到什么工具或特别的方法，只需要做到组织和团队的理解共识，通过文字记录下来即可，关键是思考清楚。通过对关键问题定义，回答清晰后就可以进入下一步，对业务流程进行完整的梳理了。</p>

<h4>2.梳理业务流程</h4>

<p>梳理业务流程需要基于对产品战略的清晰定义。业务流程围绕产品战略目标而设计，需要明确业务目标，流程围绕目标进行最简化设计。在这个过程中最关键的是定义好业务目标，明确清晰业务目标即要达到什么目的后再进行进一步的流程设计。梳理业务流程的过程中需要考虑整个业务流程中涉及哪些关键角色，这些角色的关键动作是什么，业务流程中包括哪些关键信息，同时要定义清楚各角色间信息流动的方式。完成对业务目标、关键角色及动作、关键信息的定义后，可以使用流程图将设计好的业务流程通过图的方式表达出来。流程图的画法就不赘述了，有很多方法，关键是明确业务流程设计中的三个关键环节。</p>

<p>在梳理业务流程的过程中，需要定义清楚哪些是需要人去参与和处理的，哪些是需要技术处理的，这样一个完整的业务流程梳理下来后就已经很明确，技术产品的边界在哪，而边界之外的需要协调各方资源来完成。同时，整个过程中需要与组织各方进行充分的沟通，确保设计的业务流程在现有资源环境下是可行的，也要与研发团队就技术产品在业务流程中所扮演的角色和定义进行充分沟通，确保在现有技术上是可行的。总的来说，梳理业务流程的过程就是产品经理在现有资源下为实现产品战略目标而设计的一套可行的业务操作流程。</p>

<h4>3.产品原型设计</h4>

<p>业务流程梳理清晰后，就可以开始产品原型的设计了。产品原型设计包括信息架构设计、功能设计、交互设计和视觉设计。产品经理首先需要对产品信息架构进行定义，产出完整的产品信息结构图，接下来基于对业务流程的理解开始进行功能设计，功能设计的目的是为了满足业务流程的设计，所以是先有业务流程设计后有功能设计。产品功能设计时确保采用最小化原则，我们采用的是最小化可行性原则，也就是MVP（Minimum Viable Product）原则，这是精益创业中的一个概念，关于什么是MVP什么是精益创业大家可以去了解一下，我觉得这是一套非常好的业务和产品设计实践。</p>

<p>功能定义完后就是交互设计和视觉设计了，在大公司可能有专门的交互设计师和视觉设计师，但我认为，产品经理还是需要有比较强的交互设计能力和视觉审美能力的，之所以说需要具备交互设计能力，是因为前期的业务流程定义和功能定义都是产品经理直接参与的，而最能理解并将其直接转化为一个技术产品的非产品经理最合适不过，这是我认为的一种比较高效的方式，当然，用什么方式取决于其所在组织的实际情况，像大公司就是人多工种细，但弊端就是效率低。而我们作为创业公司来说，我是极力倡导产品经理需要进行功能和交互设计，最后产出产品功能交互图，这个过程称之为低保真设计。当然这个过程可以和设计师一起沟通进行，吸取专业建议。之所以说产品经理需要视觉审美能力，就是最后由视觉设计师完善高保真设计，但是一个好的产品经理我认为是能分辨出什么是好的设计和不好的设计，而且用户的第一感是从表现层开始，也就是看的见的界面和用的着的功能。</p>

<p>产品原型设计过程中可以用到的工具有很多，我常用的有苹果的keynote，用它来制作产品界面原型快速而且美观，交互设计逻辑用简单的文字加上连线标示来标示跳转关系即可，当然还有很多的工具可以选择和使用，就不赘述了。这一步完成后应该就能产出一个所谓的RPD了，之所以说所谓的PRD是因为我认为创业公司最好不要去弄一大套文档来各种说明，PRD的目的是用来记录整个设计产出，同时作为业务各方和研发团队的输入材料，做到描述清晰、利于业务和技术理解即可。这也是精益创业的核心所在，不要做多余的东西，简单直接、达到目标。</p>

<h4>4.沟通协调资源</h4>

<p>完成产品战略定义、业务流程梳理、产品原型设计后，就进入设计实施落地阶段了，这个阶段主要是沟通和资源协调工作。同时需要对设计产出进行微调和优先级处理。这个阶段是考验产品经理优先级处理和沟通协调能力的阶段。团队里每个人的思维方式和角度不同，如何使大家在理解上达成一致本来就是一个浩大的工程，沟通技巧在中间就起到了非常关键的作用。与业务的沟通不能完全用产品技术思维，与技术沟通不能完全用业务思维，所以，产品经理起到承上启下进行信息传递的关键作用。在确保业务目标的前提下保证技术产品能在有限的资源和时间内完成。</p>

<p>沟通讲究的是找对人，同时注意沟通顺序。明确沟通目的让后找到能解决这个问题的那个最关键的角色，如果找错人付出的就是时间和精力然后还得不到结果。找对人后接下来就得确定沟通顺序，要确保事情顺利开展和问题的快速解决，定义一个沟通顺序很重要，一般来说，我按照问题阶段来确定沟通顺序，比如处于问题定义阶段，需要和问题提出人和相关决策定义人完成问题的定义，问题定义清楚后针对具体的解决方案，再和与这个解决方案相匹配的资源各方进行充分沟通，然后确保在解决方案的执行过程中执行各方的理解是一致的。全程确保沟通的直接、高效，避免出现重复沟通和沟通不到位的情况。</p>

<p>在沟通协调这个环节中，产品经理千万不能怕麻烦，重要的事说三遍，沟通、沟通、沟通，很重要！</p>

<h4>5.验证改进产品</h4>

<p>经历以上四步后，产品能按期上线了，这时候需要监测业务和产品的实际运转情况，深入现场了解问题，回来后及时总结并制定改进方案。这是精益创业中的验证环节，前期的设计在某种程度上都可以说是先验的设计，上线后就需要根据实际运转情况来反向验证业务和产品，这也是之前为什么要做MVP设计的原因，因为前期设计越简单后期验证改进的成本就越小，好产品是在不断验证和改进的过程中打磨出来的，没有一次性完整的设计。</p>

<p>在验证和改进产品的过程中，我认为最重要的一个环节就是去现场，去到业务发生的地方，去到用户中间，在实际场景中体验产品，发现问题并制定解决方案。避免接收二手信息，这样会误导产品经理做出判断。改进产品的时候，可以结合业务流程中的每个节点，找到现场很重要，去现场，在现场定义问题，回来制定解决方案，快速验证、快速试错、快速改进。</p>

<h2>写在最后</h2>

<p>过去这一年，我完成了一次转型，从一个专业技术人员转型到产品人员，技术让我入门，看到这个行业的细节，产品让我出门，让我看到更广阔的空间。这个过程中没少走过弯路，经历过开始的好奇、憧憬，到中途的迷茫、自我否定，过度到现在的慢慢开悟和真正理解产品。人的成长本来就是一个过程，春天播种秋天才能收获，回想这个过程感受到更多的是收获和成长。我的产品生涯才刚刚开始，路还很长，我会坚持在这条路上走下去，走好，走漂亮！以上说的这些都是我个人的一些总结，不代表任何观点。放下，是一种修行，对过去的珍重和告别，拿起，是一种历练，是对未来的信心和期待。</p>

<p>就写到这，我所说的不一定都是对的！</p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2015/10/25/pm-road/'>http://ryantang.me/blog/2015/10/25/pm-road/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2014-转折中前行]]></title>
    <link href="http://ryantang.me/blog/2015/02/17/my-2014/"/>
    <updated>2015-02-17T13:58:26+08:00</updated>
    <id>http://ryantang.me/blog/2015/02/17/my-2014</id>
    <content type="html"><![CDATA[<blockquote><p>路漫漫其修远兮，吾将上下而求索</p></blockquote>

<p>2014已过，2015如期而至。原本这篇总结应该在2014年结尾就完成的，无奈事情太多而一再拖延，昨天离京回家，今日在家闲下来补上这篇总结。如果用一句话来描述我的2014，那就是，转折中前行。</p>

<!--More-->


<p>在去年的年度总结<a href="http://ryantang.me/blog/2014/01/01/my-2013/">《我的2013-前进并思考着》</a>中的第二部分，我说了下对选择工作的看法，时过一年，工作已确定下来，回过去看自己当初设定的标准和最终做出的选择，基本符合自己的预期。2014年初找工作时有拿到大公司的offer也有创业公司的邀请，最终我选择了加入目前所在的创业公司，公司所在的领域为移动医疗，作为最早加入公司的几个人之一，初入公司我的定位当然就是负责移动平台的产品研发，并在去年10月份的时候转战产品工作。还是一样，接下来我仍然将从学习、工作、生活三方面来对我的2014做一个全面的总结。</p>

<h2>第一部分：学习</h2>

<p>相比起以前，2014年的学习基本都是在工作中学习，在平时的积累中学习，由于已经离开学校正式参加工作，没有了特定的学习时间和学习环境，所以学习更多的是在实践中和平时的空余时间。在工作中，学习的是做事方法和思考方式，和书本上的学习内容比，工作中学习的内容更加实际、更加落地。对一个问题的处理方式多种多样，如何利用有限的资源在最短的时间内把问题处理好是在工作中需要不断学习和积累的。对于这一点，我想我还有很长的路要走。</p>

<p>关于工作后没有特定时间学习的问题，其实也没有那么严重，真正想学习的话是不限于时间和地点的，关键就是你想不想。但执行起来，肯定是有一些方式方法上的调整，以前在学习技术的时候，我会把一些知识点或专题整理出来，然后专门花时间去收集资料、理解并消化，这样肯定需要花一些时间和精力，特别是还要写出来的话，花费的时间成本就更高。现在工作后，明显已不具备这种精力，所以我会把以前的专题拆成小点，然后一点一点的消化和理解。在2014年10月份以前我都是采用这种方式给自己充电的。当然，真正整理成博客记录下来的就寥寥无几了，因为在创业公司，所以时间和精力的分配的确是个大问题，我也在想今年如何解决这个问题。</p>

<p>2014年10月份以后，由于公司技术小伙伴逐渐增多，开发的工作可以分一部分出去，而那时公司的产品工作无人承接，所以leader找到我后我毫不犹豫就答应下来了，因为本身对产品就很感兴趣，加上这又是一次锻炼自己的好机会，所以我就上了。期间也遇到了很多问题，由于对产品工作的不了解和不熟悉，期间也出现了很多问题，比如对需求的把控，在设计与开发同学之间的沟通以及在技术团队与业务团队间的沟通等。这些方面我会在工作部分做详细说明，这里其实想说的是跨工作学习，从开发岗转战产品岗，中间需要适应和学习的东西太多，我也看了很多书和类似的文章，但最后会发现，真正沉淀下来的东西还是自己亲身经历总结的方法，因为这都是经过验证的经验。</p>

<p>2014年在技术博客更新上内容减少很多，这也是我一直纠结的问题，说明在学习内容的沉淀和整理上减少了，2015年我需要在这方面寻找一些新的方式来弥补因为工作带来的时间和精力不足。在以后的工作中，我的精力会主要放在产品上，这是一条“不归路”，但我希望自己能走好，以后究竟会怎样，谁知道呢，万一梦想就那么一不小心实现了呢！最后推荐几本我在2014年看过的书：《权利与影响力》、《麦肯锡思维》、《微管理》。</p>

<h2>第二部分：工作</h2>

<p>2014对我来说最大的不一样就是工作，完全脱离学生身份，进入职场，而且是进入创业公司的职场，面对的挑战更多，对工作本身的要求就更高。我在<a href="http://ryantang.me/blog/2014/11/30/tech_and_product/">一半技术，一半产品</a>中简要介绍了下我在公司的工作内容以及一些工作方法，一路过来，感觉需要学习和完善的东西太多了。</p>

<p>在公司的一年中，我做过一线的开发工作，主要是iOS客户端的开发工作，然后又转战产品从事产品工作，中间的转折也是随着公司的发展而发生的。也许创业公司就是这样，到了一定的阶段后总有些事是需要有人来承担的，就好比最开始的时候，公司刚刚开始，技术开发工作需要从零开始，那么我有幸承担了这份工作，并最终将公司产品上线发布至市场。如今更多的是从事产品工作，产品工作没有技术工作那么单纯，需要顾及和考虑的面更加多，与设计的沟通、与技术沟通、与业务沟通、翻译并执行老板的想法等。产品工作就是一个大而杂的工种，但在这里面我觉得还是学到了很多东西，虽然还是有很多的不足，但起码我已经上路了。虽然路上会充满荆棘，但起码我已经跨出了第一步，这一路上还需要更多的人来帮助我，我也需要学习和吸收更多的知识来指导实践。</p>

<p>在这一年的工作中，发现的一个最大的问题就是沟通问题，因为人与人的背景不一样，专业领域不一样，所以在讨论一个问题的时候很难在同一种思维框架下思考和理解问题，就会出现用各自的语言说同一个问题的局面，另外，还有一个问题就是每个人对同一个问题关注的点不一样，比如技术关注的更多的是具体的实现，而设计考虑的更多的是设计美感，业务考虑的是产品功能是否满足自身的业务发展需求。而作为产品工作者，需要在这中间承担起桥梁的作用，发挥翻译官的作用，所以面对这个挑战，我依然在路上，2015对我来说挑战将更大，但我已经准备好去面对这个挑战。有时候，多向前跨出一步，会看到更好的风景。</p>

<h2>第三部分：生活</h2>

<p>2014的生活只能用一个字来描述，那就是“忙”。整整一年在工作上的时间要远远大于在生活上的时间，工作日基本都是工作到晚上十点以后才回家，早上九十点又投入新的工作，这种紧张的高节奏下，需要一种方式来调节，那么我选择的方式就是跑步。我从2012年开始跑步，从开始的一两公里，到现在的十几公里，我在朝着我的半马和全马努力着。跑步带给我很多感触，如果用一些关键词描述，那就是坚持、不放弃、毅力、韧性、方法、努力。跑步是孤独的，但这份孤独能形成一种自我空间，能让思维安静下来进行思考，而且长跑后的那种轻松感和愉悦感是只有亲身经历过的人才知道的。2014年我累计跑步距离超过了400公里，身体体质明显好很多，精神状态也好很多。如果说忙碌的工作中还有一丝调节剂，对我来说那就是跑步了。2015的目标是要完成一次半程马拉松。</p>

<p>工作忙，没了生活，其实是一件挺可惜的事，如果为了工作而放弃生活，那就是一件可悲的事。工作和生活是可以取得平衡的，而2014年我明显没有平衡好，新的一年，我对自己的期望就是尽可能的平衡好工作和生活，鱼与熊掌不可兼得，但起码是一个动态平衡的过程。2015的第一天对我来说意义非凡，至于是什么事，这里先卖个关子，待明年总结时再做分解，哈哈！</p>

<h2>期待2015</h2>

<p>2015是启程年，在学习、工作、生活上对我来说又是一个新的阶段性开始，希望通过自己的努力和大家的帮助能一切都好，也希望在2015的年度总结中我能给自己交上一份满意的答卷。</p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2015/02/17/my-2014/'>http://ryantang.me/blog/2015/02/17/my-2014/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一半技术，一半产品]]></title>
    <link href="http://ryantang.me/blog/2014/11/30/tech_and_product/"/>
    <updated>2014-11-30T21:11:15+08:00</updated>
    <id>http://ryantang.me/blog/2014/11/30/tech_and_product</id>
    <content type="html"><![CDATA[<blockquote><p>不会写代码的设计师不是好产品经理！</p></blockquote>

<h2>写在前面</h2>

<p>忙！忙！忙！基本上可以概括我这半年多的生活。年初加入目前所在的创业公司（移动医疗），作为最早加入的几个人之一，经历了一个初创公司从无到有的过程，半年的时间，仿佛过了一两年，从最初的业务讨论、产品雏形、技术选型到迭代开发、业务转型、团队扩张等等，都一幕幕亲身经历着，这种历练或许就是在大公司感受不到的。在创业公司能感受到组织的成长，能把握自己做事的节奏，带来的成就感也许正是创业公司的魅力，这也是当初我选择加入创业公司的理由。创业，是一场修行，是一段非常有意思的旅途，成长着、学习着、感悟着！</p>

<!--More-->


<h2>一半技术</h2>

<p>一半技术，这是对我现阶段工作的描述。回到两个月之前，我还在每日coding，白天讨论产品，晚上直接写代码实现，那是一段煎熬并快乐的日子。一转眼，进入移动开发领域也3年多了，从最初的Android到后来的iOS，期间也是一半Android一半iOS。不能说精，至少这3年的打磨让我对这两个平台有了一个基本的认识，从2012年开始写博客，原本只是记录下自己的学习笔记，没想到无意之举竟然得到了很多朋友的关注，博客的访问量不断增多，昨天一看，CSDN的博客访问量竟然快一百万了，这是我之前绝对不曾想过的。通过写博客，提高了自己的思维表达能力和总结能力，对一些技术点的理解也越发深刻，同时，还结交了一批志同道合的朋友，这些收获是通过技术获得的。我喜欢写代码，我喜欢通过一行行的代码去创造一个产品，我喜欢研究技术点，弄懂一个问题带来的那种感觉是无与伦比的。技术的美妙就在于永远都有问题在等着你，而且那种未知性恰恰是最有意思的地方。我是那种写代码有洁癖的人，每个命名，每个换行，每个空格都很在乎，我也觉得理应如此，不说写的最好，至少让团队里其他人看起来不费劲，对自己负责，也对别人负责。</p>

<p>做技术的，有两种人，一种是在一个领域做深做透的人，另一种是技能全而广的人，两种选择，各有利弊，因人而异。如果让我选，我还是比较倾向于前一种（如果可以的话），因为这样能让我更专注。我也很佩服后一种人，因为他们能融会贯通。做技术的，思维一般比较严谨，或者叫工程师思维，逻辑严丝合缝，想问题总是有很多切入点，这是工程师优势。</p>

<h3>在创业公司做技术</h3>

<p>毕业找工作时也有几个大公司可选，但后来还是选择了创业公司。在创业公司做技术，我的感觉就是，“全靠你了”，这种感觉起初就是孤军作战，在创业公司，一个技术领域至少要有一个能hold住事的人，有问题，要解决，有难点，要攻破，要不，找谁去呢！所以，在创业公司做事，对技术的成长是一个极好的锻炼机会，因为这要求你必须不断突破自己，找方法提高自己。我们公司起初的技术团队就那么几个人，一切从零开始，不断摸索、不断调整、不断适应，这其中的坑只有自己走过才知道。团队总要扩大，我们招人有三个原则，第一，必须自身认可并感兴趣我们所做的事情，而不是单纯为了找个工作拿工资或找个地方写代码，这对创业公司尤其重要，创业公司初始阶段寻找的更多的是志同道合的合作伙伴而非员工。第二，明确知道我们目前缺乏什么样的人才，对方加入我们后是否能立马帮助到我们，这是匹配度的要求，能让加入者快速切入我们的工作，产生共鸣、产生成就感。第三，新加入的伙伴要融入我们的团队，适应我们的文化，不会对团队氛围造成影响。考虑团队的延续性，大家得是齐心的，这样才能一起打好仗、做好事、分好钱。</p>

<p>技术管理，是让团队能力不断提升，组织不断发展的手段。在研发流程上，我们使用的是敏捷开发，即scrum流程，我们尝试过很多方法，最终形成了一套适合我们团队自身的研发方法。和很多公司一样，我们也有自己的早会，但这个会时间一般很短，我们会要求所有人站着开会，之前我们的方法是要求每个人说明三个问题，也就是昨天完成了什么，今天计划做什么，有没有什么问题，这种方式我们持续了大概三四个月，起初人少的时候还好，基本上信息沟通都比较及时，后来人多了，这样效率就下去了，就会出现谁也没听谁说什么，造成了早会流于形式，所以，这种形式的会议要控制人数，理论上超过五个人的话这种形式的会议效率就很低了。</p>

<p>后来，我们人数增加到10人，早会就需要换一种方式了，我们采取的是任务需求驱动的早会，我们使用github issue来管理需求，每周一个sprint，每个sprint会把当周需要完成的任务通过issue的方式记录下来，通过label和comments来管理进度。每天早上由产品需求负责人来drive早会，从整个任务需求的角度来审视前一天的进度以及遇到的问题，大家实现信息共享后即结束会议，这个会上我们只抛出问题，并不讨论问题，所有的问题都是会后由问题相关人单独讨论，这样能比较好的保证会议效率。另外，我们在每周五下午会有个retrospect会，也就是对当前srpint的一个回顾，每个成员都说说本周的well和less well，会议driver把大家说的记录在白板上，less well需要形成AP（Action Point）并指定负责人，下一个retrospect时再反过来看看是否有改进，这个会上我们鼓励大家畅所欲言，毫无保留，这样能保证团队间能在无所顾忌的情况下指出问题并及时改进，这样，团队的整体实力是迭代提高的，这也是敏捷开发的好处。经过大半年的尝试，这种方法为我们磨合团队，提升团队作战力提供了很多有利的帮助。</p>

<h2>一半产品</h2>

<p>一半产品，这也是对我现阶段工作的描述，或者说是主要描述。很早之前就对产品工作非常感兴趣，期间也一直关注移动互联网领域的产品变迁，从2011年开始接触移动互联网，从那时比较火的签到应用和各种LBS社交应用，到现在遍地开花的O2O应用产品，移动产品也在一步步演进着。在公司写了大半年代码后，由于没有找到合适的产品经理，加上开发和需求间的间隙，产品的工作需要立马开始，所以，我被委任担任产品一职，说是说做产品，其实做的更多的是PE（Product Execution）的工作，和公司业务团队另一个同事配合组成PE Group，正式开始了我们公司的产品工作。初入产品圈，没有经验，没有积累，一切从头开始，其中辛酸历程，听我慢慢道来。</p>

<h3>在创业公司做产品</h3>

<p>由于我们公司的产品工作是从头开始，所以一切靠自己，还是那句话“全靠你了！”。Ok，没有经验那就从头开始积累经验，没有方法，那就从头开始摸索方法，于是我们PE便开始了在产品路上的披荆斩棘。</p>

<p>做产品，对需求的理解和整理肯定是第一要做的，由于我们做的是新业务，没有可参考或模仿的对象，所以需求的来源更多的来自前期的假设，说白了就是YY，我们会把可能的需求点全部列出来，然后根据业务主干原则，把其中影响业务的关键节点选出来，从很长的需求列表中挑选出必须完成的需求，把需求沉淀成功能，这个过程就叫做最小化原型产品MVP，通过完成MVP，我们可以快速将假设的产品投入实际验证，根据验证反馈的结果再来对产品进行迭代和改进，因为前期的需求选择和功能设计都是按照最小化原则展开的，所以根据验证结果去修改或推翻之前的假设所造成的影响或损失就非常小。经过不断的迭代，原本基于假设的产品可以逐渐演化成经过证实的验证，得出的产品基本是用户或市场真实的反馈。这个过程在《精益创业》一书里面说的比较详细，推荐大家阅读。</p>

<p>通过开发最小化原型产品，我们可以快速验证假设，经过几轮的迭代下来，原本的需求可能会发生天翻地覆的变化甚至是被砍掉，因为我们以为我们自己了解用户、了解市场，其实我们只是基于自己的认识或先验的结论在做一件使我们越来越自信的事情。然而，在创业公司成长的过程中，最怕的应该也就是这个不断自信的过程。这里说的自信，是只对自己假设的业务或产品盲目崇拜，没有经过验证的业务或产品，都是YY，都是对公司资源的浪费。所以，我们做产品就基于这么一个原则，若是得到没有经过验证需求或产品功能设计，我们一定要以最小的代价去实现，把今后修改或推翻的成本降到最低，哪怕它是多么的丑陋或无法使用。因为一个功能对用户如果真的有价值，用户会帮助我们慢慢去完善它，如果我们把一个无用的产品功能做的绚丽无比，那这只是在浪费用户和浪费我们自己。另外，对用户体验和视觉的设计也是如此，设计我们也采用最小化设计原则，通过简单的交互，直观的视觉体验，尽可能简单的把我们想传达信息呈现给用户，其他的全部砍掉。因为很多时候，我们自high出来的产品往往不是用户和市场真正想要的，所以，要尽量避免团队陷入这种“自信”的误区。</p>

<p>我们做产品没有大公司的流程和各种文档，我们通过github的issue来管理需求，给每个需求在issue中编上号并归入不同的milestone，通过label去管理每个需求的状态，在每个sprint期完成对下个sprint中产品功能的线框图设计和高保真设计，当下个sprint来临时直接基于上一个sprint的产品产出进行开发。当然，还是那个千年不变的问题，没有不变的需求，所以，我们制定了应对需求变更的SOP，通过衡量每个需求的优先级来排定开发计划，我们设定了三个优先级，分别是P0、P1和P2，P代表priority，P0是优先级最高的程度，代表需要立马解决的，P0级别情况一般是比较少出现的，大部分情况下，我们的需求级别定义在P1和P2，在完成P1级别的功能后再处理P2的任务。</p>

<p>沟通，是做产品最重要的工作之一，理解老板的意图，翻译成产品语言，通过设计传达给开发团队，其中任何一个环节的理解和执行不到位都会导致信息丢失或失效。所以，产品经理往往也是一个公司的中枢，起到承上启下的作用。与老板沟通要用宏观语言，站在战略角度，与设计沟通需要用设计体验语言，站在用户体验的角度，与开发团队沟通要用技术语言，站在工程实现的角度。产品经理不易，且行且珍惜。业界产品经理们自嘲自己为产品狗，可见我们的无赖与委屈，但那又怎样，看到用户使用我们的产品流露出的满意感，看到公司业务随着产品的完善而不断增长，看到团队因为产品的完善而充满成就感，那么，我们也值了。</p>

<h2>写在最后</h2>

<p>一半产品，一半技术！我因技术而入行，因产品而成长！我不会放弃技术，但我会重新学习产品。今天说了很多这半年多的一些感受，有的是总结，有的是分享，不一定正确，但都是我真真实实经历着的，希望这段旅程上能收获更多的知识，得到更大的提高和成长，不管是在技术路上还是产品路上，希望能得到大家的帮助。</p>

<blockquote><p>后记：我所说的不一定是对的！</p></blockquote>

<p><code>Focus on life. Focus on work. Don't let yourself regret forever! ——Ryan</code></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/11/30/tech_and_product/'>http://ryantang.me/blog/2014/11/30/tech_and_product/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[置换测试: Mock, Stub 和其他]]></title>
    <link href="http://ryantang.me/blog/2014/08/21/test-doubles/"/>
    <updated>2014-08-21T10:18:38+08:00</updated>
    <id>http://ryantang.me/blog/2014/08/21/test-doubles</id>
    <content type="html"><![CDATA[<h6>本文为objc.io原创译文，发布在<a href="http://objccn.io/issue-15-5/">objc中国</a>上。</h6>

<h2>简介</h2>

<p>在理想情况下，你所做的所有测试都是能应对你实际代码的高级测试。例如，UI 测试将模拟实际的用户输入（Klaas 在<a href="http://objccn.io/issue-15-6">他的文章</a>中有讨论）等等。实但际上，这并非永远都是个好主意。为每个测试用例都访问一次数据库或者旋转一次 UI 会使你的测试跑得非常慢，这会降低你的生产力，并导致你不去经常跑那些测试。若你测试的某段代码依赖于网络连接，这会要求你的测试环境具备网络接入条件，而且这也难以模拟某些特殊的测试，比如当电话处于飞行模式情况下的时候。</p>

<p>正因如此，我们可以用一些模拟代码替换你的实际代码来编写一些测试用例。</p>

<!--More-->


<h2>什么时候你会需要用到一些模拟 (mock) 对象呢？</h2>

<p>让我们从以下这些不同类型的模拟对象的基本定义开始。</p>

<p><em>double</em> 可以理解为置换，它是所有模拟测试对象的统称，我们也可以称它为替身。一般来说，当你创建任意一种测试置换对象时，它将被用来替代某个指定类的对象。</p>

<p><em>stub</em> 可以理解为测试桩，它能实现当特定的方法被调用时，返回一个指定的模拟值。如果你的测试用例需要一个伴生对象来提供一些数据，可以使用 stub 来取代数据源，在测试设置时可以指定返回每次一致的模拟数据。</p>

<p><em>spy</em> 可以理解为侦查，它负责汇报情况，持续追踪什么方法被调用了，以及调用过程中传递了哪些参数。你能用它来实现测试断言，比如一个特定的方法是否被调用或者是否使用正确的参数调用。当你需要测试两个对象间的某些协议或者关系时会非常有用。</p>

<p><em>mock</em> 与 spy 类似，但在使用上有些许不同。<em>spy</em> 追踪所有的方法调用，并在事后让你写断言，而 mock 通常需要你事先设定期望。你告诉它你期望发生什么，然后执行测试代码并验证最后的结果与事先定义的期望是否一致。</p>

<p><em>fake</em> 是一个具备完整功能实现和行为的对象，行为上来说它和这个类型的真实对象上一样，但不同于它所模拟的类，它使测试变得更加容易。一个典型的例子是使用内存中的数据库来生成一个数据持久化对象，而不是去访问一个真正的生产环境的数据库。</p>

<p>实践中，这些术语常常用起来不同于它们的定义，甚至可以互换。稍后我们在这篇文章中会看到一些库，它们自认为自己是 &ldquo;mock 对象框架&#8221;，但是其实它们也提供 stub 的功能，而且验证行为的方式也类似于我描述的 &#8220;spy&rdquo; 而不是 &ldquo;mock&#8221;。所以不要太过于陷入这些词汇的细节；我下这些定义更多的是因为要在高层次上区分这些概念，并且它对考虑不同类型测试对象的行为会有帮助。</p>

<p>如果你对不同类型的模拟测试对象更多的细节讨论感兴趣，Martin Fowler 的文章 <a href="http://martinfowler.com/articles/mocksArentStubs.html">&ldquo;Mocks Aren&rsquo;t Stubs&rdquo;</a> 被认为是关于这个问题的权威讨论。</p>

<h3>模拟主义者 (Mockists) vs. 统计主义者 (Statists)</h3>

<p>许多关于模拟对象的讨论主要是衍生自 Fowler 的文章的，它们讨论了两种不同类型的程序员，模拟主义者和统计主义者，所写的测试。</p>

<p>模拟主意的方式是测试对象之间的交互。通过使用模拟对象，你可以更容易地验证被测对象是否遵循了它与其他类已建立的协议，使得在正确的时间发生正确的外部调用。对于那些使用行为驱动 (behavior-driven) 的开发者来说，这种测试可以驱动出更好的生产代码，因为你需要明确模拟出特定的方法，这可以帮你设计出在两个对象之间使用的更优雅的API，这种想法与模拟驱动紧密联系在一起。因此模拟主义的测试更偏向于单元级别的测试，而不是完全的端到端 (end-to-end) 测试。</p>

<p>统计主义的方式是不使用模拟对象。这种思路是测试时只测试状态而不是行为，因此这种类型的测试更加健壮。使用模拟测试时，如果你更新了实际类的行为，模拟类也需要同步更新；如果你忘了这么做，你可能会遇到测试可以通过但是代码却不能正确工作的情况。通过强调在测试环境中只使用那些真正的代码，统计主意的测试可以帮助你减少测试代码和实现代码的耦合度，并降低出错率。这种类型的测试，您可能已经猜到，适合于更全面的端到端的测试。</p>

<p>当然，并不是说有两个对立的程序员学派；你不可能看到模拟主义和统计主义的当街对决。这种分歧是有用的，但是，得认识到 mock 在有些时候是你的工具箱里最好的工具，但是有时候又不是。不同类型的测试适用于不同的任务，并且最高效的测试套件往往是不同测试风格的集合体。仔细考虑你到底想要用单个测试来验证些什么，这能帮助你找到最合适的测试方式，而且能帮你决定对于当前工作来说，使用模拟测试对象是否是正确的工具。</p>

<h2>深入代码</h2>

<p>理论上谈起来所有一切都没什么问题，但让我们来看一个你需要用到 mock 的真实用例。</p>

<p>让我们试着测试一个对象，它上面有一个方法，是通过调用 <code>UIApplication</code> 的 <code>openURL:</code> 方法来打开另外一个应用程序。(这是我在测试我的 <a href="http://intentkit.github.io">IntentKit</a> 库时遇到的一个真实问题。) 给这个用例写一个端到端的测试，就算是有可能做到，也是非常困难的，因为 &lsquo;成功状态&rsquo; 本身导致了应用程序的关闭。自然的选择是，模拟出一个 <code>UIApplication</code> 对象，并验证这个模拟对象是否确实调用了 <code>openURL</code> 方法打开正确的 URL。</p>

<p>假设这个对象有这样的方法：</p>

<pre><code>@interface AppLinker : NSObject
        - (instancetype)initWithApplication:(UIApplication *)application;
        - (void)doSomething:(NSURL *)url;
@end
</code></pre>

<p>这是一个非常牵强的例子，但是请容忍我一下。在这个例子中，你会注意到我们使用了构造方法进行注入，当我们创建 <code>AppLinker</code> 的对象时将 <code>UIApplication</code> 对象注入到其中。大部分情况下，使用模拟对象要求使用某种形式的依赖注入。如果这个概念对你很陌生，请一定看看本期的 <a href="http://objccn.io/issue-15-3/">Jon 的文章</a> 中的描述。</p>

<h3>OCMockito</h3>

<p><a href="https://github.com/jonreid/OCMockito">OCMockito</a> 是一个非常轻量级的使用模拟对象的库：</p>

<pre><code>UIApplication *app = mock([UIApplication class]);
AppLinker *linker = [AppLinker alloc] initWithApplication:app];
NSURL *url = [NSURL urlWithString:@"https://google.com"];

[linker doSomething:URL];

[verify(app) openURL:url];
</code></pre>

<h3>OCMock</h3>

<p><a href="http://ocmock.org">OCMock</a> 是另一个 Objective-C 的模拟对象库。和 OCMockito 类似，它提供了关于 stub 和 mock 的所有功能，并且包括了你可能需要的一切功能。它比 OCMockito 的功能更强，依赖于你的个人选择，各有利弊。</p>

<p>在最基本层面上，我们可以使用 OCMock 来重写出与之前非常类似的测试：</p>

<pre><code>id app = OCMClassMock([UIApplication class]);
AppLinker *linker = [AppLinker alloc] initWithApplication:app];
NSURL *url = [NSURL urlWithString:@"https://google.com"];

[linker doSomething:url];

OCMVerify([app openURL:url]);
</code></pre>

<p>这种在你测试后再验证调用方法的模拟测试风格被认为是一种 “运行后验证” 的方式。OCMock 只在最近 3.0 版本后增加了对该功能的支持。同时它也支持老版本的风格，即对期望运行的验证，在执行测试代码前先设定对测试结果的期望。最后，你只需要验证期望和实际结果是否对应：</p>

<pre><code>id app = OCMClassMock([UIApplication class]);

AppLinker *linker = [AppLinker alloc] initWithApplication:app];
NSURL *url = [NSURL urlWithString:@"https://google.com"];

OCMExpect([app openURL:url]);

[linker doSomething:url];

OCMVerifyAll();
</code></pre>

<p>Because OCMock lets you stub out class methods, you could also test this using OCMock, if your implementation of <code>doSomething</code> uses <code>[UIApplication sharedApplication]</code> rather than the <code>UIApplication</code> object injected in the initializer:
由于 OCMock 也支持对类方法的 stub，你也可以用这种方式来来测试，如果 <code>doSomething</code> 方法通过 <code>[UIApplication sharedApplication]</code> 来实现而不是 <code>UIApplication</code> 对象的注入初始化：</p>

<pre><code>id app = OCMClassMock([UIApplication class]);
OCMStub([app sharedInstance]).andReturn(app);

AppLinker *linker = [AppLinker alloc] init];
NSURL *url = [NSURL urlWithString:@"https://google.com"];

[linker doSomething:url];

OCMVerify([app openURL:url]);
</code></pre>

<p>你会发现 stub 类方法和 stub 实例方法看起来是一样的。</p>

<h2>构建你自己的测试</h2>

<p>对于像这种简单的用例，你也许不需要这么重量级的模拟对象测试库。通常，你只需要创建你自己的模拟对象来测试你关心的行为：</p>

<pre><code>@interface FakeApplication : NSObject
    @property (readwrite, nonatomic, strong) NSURL *lastOpenedURL;

    - (void)openURL:(NSURL *)url;
@end

@implementation FakeApplication
    - (void)openURL:(NSURL *)url {
        self.lastOpenedURL = url;
    }
@end
</code></pre>

<p>以下是测试：</p>

<pre><code>FakeApplication *app = [[FakeApplication alloc] init];
AppLinker *linker = [AppLinker alloc] initWithApplication:app];
NSURL *url = [NSURL urlWithString:@"https://google.com"];

[linker doSomething:url];

XCAssertEqual(app.lastOpenedURL, url, @"Did not open the expected URL");
</code></pre>

<p>对于类似这个已经设计好的例子，就可能会出现这种情况，创造你自己的模拟对象只是增加了很多不必要的样板，但如果你觉得需要模拟更为复杂的对象交互，那么完全控制模拟对象的行为就会非常有价值。</p>

<h3>使用哪一个？</h3>

<p>选择哪一种方案完全依赖于你的具体测试情况以及你的个人偏好。OCMockito 和 OCMock 都可以通过 CocoaPods 安装，将它们集成到你现有的测试环境都非常简单，但需要注意的是，除非你需要，否则避免新增一些其他的依赖。另外除非真的需要，最好就都创建一些简单的模拟对象。</p>

<h2>模拟测试时的注意事项</h2>

<p>在任何形式的测试中你有可能碰到的最大的问题之一是写的测试和实现代码耦合过于紧密。测试中一个最重要的关键点是降低未来的变化所带来的成本；如果改变代码的实现细节破坏了当前的测试，则这种成本已经增加了。也就是说，其实为了最小化由于使用模拟测试所造成不利影响，其实你有很多可以做的。</p>

<h3>依赖注入是你的好伙伴</h3>

<p>如果你还没有使用<a href="http://objccn.io/issue-15-3">依赖注入</a>，或许你会需要它。虽然有时候不使用依赖注入来模拟对象也是可以的的 (比如以上面使用 OCMock 模拟类方法)，但是通常是不太可能的。即使可能，设置测试所引入的复杂度也可能大于它能带来的好处。如果你使用依赖注入的话，你会发现使用 stub 和 mock 方式写测试要容易的多。</p>

<h3>不要模拟你没有的</h3>

<p>许多有经验的测试人员都会警告你“不要模拟你没有的东西”，意思是你应该只为你代码库本身拥有的对象创建 mock 或 stub，而不是为第三方依赖或一些库去创建。这里主要有两个原因，一个是基于实际情况的，一个是更具有哲学性的考虑。</p>

<p>对于你的代码库，你对它不同接口的稳定性和不稳定性大概会有一个感觉，所以你可以通过你的直觉来判断使用替换测试的方法是不是可能会导致测试过于脆弱。一般来说，你对第三方代码没有这样的把握。为了解决这个问题，一个通用的做法是为第三方代码创建包装类来抽象出它的行为。在某些情况下，仅仅是转移复杂性而不是降低复杂性往往是没什么意义的。但是在一些情况下，你会很经常使用你的第三方代码，这时这就是一个精简你测试的好方法。你的单元测试能模拟出自定义对象，并使用高层次的集成或功能测试来测试你的包装类本身。</p>

<p>iOS 和 OS X 开发世界的唯一性导致了事情稍微复杂一些。我们做的很多事情都依赖于 Apple 的框架，这个框架远远超过了其他语言的一些标准库。虽然 <code>NSUserDefaults</code> 不是一个“你拥有”对象，但是，如果你发现你有需要把它模拟出来，那就放心去做吧，苹果不太可能会在未来的 Xcode 的版本中推出打破这个 API 的变化。</p>

<p>另一个不要模拟第三方依赖库的原因更具哲学性。使用模拟主义风格书写测试的部分原因是通过这样的测试能比较容易的找到两个对象间最清晰可行的接口。但是如果是第三方依赖，你无法对其进行控制；API 协议中的一些详细信息已经被第三方库定死了，所以你无法通过测试来通过实验有效地验证接口是否有改进的余地。这本身不是问题，但在很多情况下，它降低了模拟测试的效果，直到把模拟测试的优点抹杀殆尽。</p>

<h2>不要模仿我！</h2>

<p>测试没有银弹；基于你的个人倾向和代码的具体特性，不同的情况下需要使用不同的策略。测试替身可能不适用所有的情况，但它们会是你测试工具箱中一个非常有效的工具。不管你倾向于使用框架在单元测试中模拟出一切，还是只是根据需要创建你自己的模拟对象，当你思考如何测试你的代码时，牢记模拟对象是非常有意义。</p>

<hr />

<p>原文 <a href="http://www.objc.io/issue-15/mocking-stubbing.html">Test Doubles: Mocks, Stubs, and More</a></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/08/21/test-doubles/'>http://ryantang.me/blog/2014/08/21/test-doubles/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的iOS工程结构]]></title>
    <link href="http://ryantang.me/blog/2014/08/03/ios-prj-structure/"/>
    <updated>2014-08-03T11:09:53+08:00</updated>
    <id>http://ryantang.me/blog/2014/08/03/ios-prj-structure</id>
    <content type="html"><![CDATA[<blockquote><p>好的架构不是设计出来的，而是进化而来的！</p></blockquote>

<h4>写在前面</h4>

<p>从2011年底开始学习iOS开发，到现在也已经快3年了，虽然中途没有一直进行iOS的开发（总是在Android和iOS间切换），但始终没有离开，而我现在的工作也一样，在iOS和Android间来回游走，正如我博客的slogan一样，“In Android&amp;iOS”。其实对我来说，两个平台没有绝对的好坏，我都喜欢、我都热爱。有人会说，同样的产品在不同平台做两次不会觉得厌烦吗？这个问题我会给出肯定的回答，不会！因为如果你真的喜欢你所做的产品，做多少次都不会觉得烦，每一次的复盘都是一次改进的过程，很多创新都是在重复的工作中产生的。在技术层面，同一套思想用不同的技术来实现，本身就是一个加强对不同平台技术巩固和理解的过程，技术本来就是来承载和表现业务的，在实现业务的过程中加强对业务的理解、实现对业务的创新，这或许也就是堆代码和写程序的区别吧！^_^</p>

<!--More-->


<h4>我的iOS工程结构</h4>

<p>接下来，我就简单介绍下我做iOS项目时使用的工程结构。首先要说的是，这只是我的工程结构，并不是规范，或许它存在很多问题和不规范的地方，我只是把它分享出来，给大家提供一个参考，也希望收到大家的一些反馈来帮助我改进！</p>

<h5>项目结构</h5>

<p>下图是我做iOS项目的一个常用工程结构，整体模式还是按照MVC的结构，只是在每一层做了一些细分处理，下面就简单介绍下。</p>

<p><img src="http://ryantang.me/images/2014/08/ios_prj_structure/1.png" alt="1" /></p>

<p>iOS工程中没有像Java那样非常严格的分包机制，不过在iOS工程中我们也可以通过Group的方式在工程中实现逻辑分包，这样更有利于我们组织和管理代码，使工程结构更清晰和易于理解。在我的工程结构中，主要有如下group：</p>

<ul>
<li>Application：这个group中放的是AppDelegate和一些系统常量及系统配置文件；</li>
<li>Base：一些基本父类，包括父ViewController和一些公用顶层自定义父类，其他模块的类一般都继承自这里的一些类；</li>
<li>Controller：系统控制层，放置ViewController，均继承于Group Base中的BaseViewController或BaseTableViewController；</li>
<li>View：系统中视图层，由于我比较喜欢通过代码实现界面，所以这里放的都是继承于UIView的视图，我将视图从ViewController中分离出来全部放在这里，这样能保持ViewController的精简；</li>
<li>Model：系统中的实体，通过类来描述系统中的一些角色和业务，同时包含对应这些角色和业务的处理逻辑；</li>
<li>Handler：系统业务逻辑层，负责处理系统复杂业务逻辑，上层调用者是ViewController；</li>
<li>Storage：简单数据存储，主要是一些键值对存储及系统外部文件的存取，包括对NSUserDefault和plist存取的封装；</li>
<li>Network：网络处理层(<a href="https://github.com/tangren03/RTLibrary-ios/blob/master/RTLibrary-ios/RTHttpClient.h">RTHttpClient</a>)，封装了基于AFNetworking的网络处理层，通过block实现处理结果的回调，上层调用者是Handler层；</li>
<li>Database：数据层，封装基于FMDB的sqlite数据库存取和管理(<a href="https://github.com/tangren03/RTLibrary-ios/blob/master/RTLibrary-ios/RTDatabaseHelper.h">RTDatabaseHelper</a>)，对外提供基于Model层对象的调用接口，封装对数据的存储过程。</li>
<li>Utils：系统工具类(<a href="https://github.com/tangren03/RTLibrary-ios/blob/master/RTLibrary-ios/AppUtils.h">AppUtils</a>)，主要放置一些系统常用工具类；</li>
<li>Categories：类别，对现有系统类和自定义类的扩展；</li>
<li>Resource：资源库，包括图片，plist文件等；</li>
</ul>


<p>以上是对我的工程结构中各个group的介绍，通过以下登录模块的系统类图，可以比较直观的看到这种工程结构的全貌。</p>

<p><img src="http://ryantang.me/images/2014/08/ios_prj_structure/2.png" alt="2" /></p>

<p>整体来看分为三大块，黄色区域的模型和业务逻辑层（M），蓝色区域的视图层（V），红色区域的视图控制器层（C），其中，黄色区域实现了对业务逻辑和数据处理的封装，对应他们的上层ViewController，可以实现非常简单的接口调用，将业务复杂性从ViewController中抽离出来，通过模块化的方式，保证ViewController的可读性和可维护性。</p>

<h5>保持ViewController简单</h5>

<p>往往大家都会抱怨iOS中ViewController写着写着就会越来越臃肿，那时因为随着业务的复杂，功能的增多，所有的逻辑都包含在ViewController中，还包括一些诸如UITableViewDatasource的代理方法，使得ViewController臃肿不堪，可维护性极低，耦合性也很高，为了使ViewController能更简单，便于维护和后续的开发，给ViewController瘦身就显得尤为必要，我的做法主要有三个方面。</p>

<h6>1、View视图与ViewController分离</h6>

<p>如果你用Storyboard或者xib这是当然的，我比较喜欢手写代码，所以不在ViewController里面嵌入过多的View层代码是保证ViewController简单的方法之一，那么，可以将View部分的代码单独封装到一个继承自UIView的子类当中，然后通过自定义Delegate实现View与ViewController的通信。</p>

<h6>2、业务逻辑与ViewController分离</h6>

<p>将网络请求处理和复杂的业务逻辑以及数据的存取工作单独放到Handler层，对ViewController只暴露简单的调用接口和通过block或delegate实现的回调，这样不仅能使我们的工程模块化，也能大大降低ViewController的复杂性，就不会出现既包括网络处理又包括数据处理的冗长的ViewController代码了。Handler通过block或delegate将处理完的结果回调给ViewController，ViewController再将结果与View视图层相关联处理，这样就真正起到了MVC的作用，整体原则就是，让ViewController只关系和负责处理与它相关的事。</p>

<p>在BaseHandler.h中可以定义一些简单的业务处理规则：</p>

<figure class='code'><figcaption><span>BaseHandler.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  Handler处理完成后调用的Block</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">void</span> <span class="p">(</span><span class="o">^</span><span class="n">CompleteBlock</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  Handler处理成功时调用的Block</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">void</span> <span class="p">(</span><span class="o">^</span><span class="n">SuccessBlock</span><span class="p">)(</span><span class="n">id</span> <span class="n">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  Handler处理失败时调用的Block</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">void</span> <span class="p">(</span><span class="o">^</span><span class="n">FailedBlock</span><span class="p">)(</span><span class="n">id</span> <span class="n">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">interface</span> <span class="n">BaseHandler</span> <span class="o">:</span> <span class="n">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  获取请求URL</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  @param path</span>
</span><span class='line'><span class="cm"> *  @return 拼装好的URL</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">requestUrlWithPath</span><span class="o">:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">path</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在LoginHandler中就可以定义对LoginViewController暴露的调用接口，在LoginHandler中封装负责的网络处理和业务处理逻辑，对LoginViewcontroller来说，只需要调用这个方法并传入对应的UserEntity实体对象和处理成功和失败状态下的回调block就可以了。</p>

<figure class='code'><figcaption><span>LoginHandler.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#import &quot;BaseHandler.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;UserEntity.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">interface</span> <span class="n">LoginHandler</span> <span class="o">:</span> <span class="n">BaseHandler</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  用户登录业务逻辑处理</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  @param user</span>
</span><span class='line'><span class="cm"> *  @param success</span>
</span><span class='line'><span class="cm"> *  @param failed  </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">executeLoginTaskWithUser</span><span class="o">:</span><span class="p">(</span><span class="n">UserEntity</span> <span class="o">*</span><span class="p">)</span><span class="n">user</span> <span class="n">success</span><span class="o">:</span><span class="p">(</span><span class="n">SuccessBlock</span><span class="p">)</span><span class="n">success</span> <span class="n">failed</span><span class="o">:</span><span class="p">(</span><span class="n">FailedBlock</span><span class="p">)</span><span class="n">failed</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h6>3、Datasource或Delegate与ViewController分离</h6>

<p>在iOS开发中经常用到的UITableView包含了一系列的代理方法，这些方法往往也是使得ViewController变长变复杂的元凶之一，那么，将这些Datasource或Delegate分离出来也是行之有效的方法之一，例如，通过自定义Datasource类（实现UITableViewDatasource协议）来将跟UITableView相关的数据源处理代理方法都集中到一个特定的类当中，ViewController只需要设置这个自定义数据源类给UITableView，然后其他的就都可以交给自定义数据源类去处理了。</p>

<p>我参考了<a href="http://www.objc.io/issue-1/lighter-view-controllers.html">Lighter View Controllers</a>上的介绍改进了一个<code>BaseTableViewProtocol</code>，基本上常用的一些场景是可以使用的，不过这个还得不断优化以适应更多的场景，具体的代码我放在Github上了，感兴趣的同学可以去看看，使用方法可以参考上面链接中的介绍，基本类似，我的改进主要是支持对多section的适用。</p>

<ul>
<li><a href="https://github.com/tangren03/RTLibrary-ios/blob/master/RTLibrary-ios/BaseTableViewProtocol.h">BaseTableViewProtocol.h</a></li>
<li><a href="https://github.com/tangren03/RTLibrary-ios/blob/master/RTLibrary-ios/BaseTableViewProtocol.m">BaseTableViewProtocol.m</a></li>
</ul>


<h4>写在最后</h4>

<p>以上是我在开发iOS项目中的一些总结和工程实践，其中肯定还是存在很多问题的，我也在不断寻求改进的方法，也欢迎各路高手给我提出意见和建议。关于这个工程结构的一个简单事例我放在我的Github上了，感兴趣的同学可以去看看<a href="https://github.com/tangren03/RTLibrary-ios">RTLibrary-ios</a>。</p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/08/03/ios-prj-structure/'>http://ryantang.me/blog/2014/08/03/ios-prj-structure/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员的生活]]></title>
    <link href="http://ryantang.me/blog/2014/06/29/efficient-life/"/>
    <updated>2014-06-29T16:33:27+08:00</updated>
    <id>http://ryantang.me/blog/2014/06/29/efficient-life</id>
    <content type="html"><![CDATA[<blockquote><p>生活对我们都是公平的，快乐取决于我们怎么对待生活！</p></blockquote>

<!--More-->


<h3>写在前面</h3>

<p>时隔近四个月后重新开始恢复博客的写作，这四个月对我来说可以发生了翻天覆地的变化，经历了从校园到职场的过度，身份从学生转变为在职人员，一路走来，经历颇多、感受颇多、成长颇多、感谢颇多！经过一番思考，最终我选择加入了一家创业公司，选择的依据基本契合了我在<a href="http://ryantang.me/blog/2014/01/01/my-2013/">《我的2013——前进并思考着》</a>中第二部分关于选择工作的三个问题。目前我所在的公司是做医疗相关的创业，创始团队成员都很给力，我在里面负责移动开发。从今年2月份到现在，公司从无到有，大家为了一个共同的目标在努力，这个过程很美好，我很享受！</p>

<h3>程序员的生活</h3>

<p>程序员是一个特殊的群体，他们具备专业性很强的知识能力，他们具备挑战困难的勇气，他们拥有一颗包容性的大心脏。为什么这么说，第一，专业性很强的知识能力这个不用说了，每个程序员都有一个黑客的灵魂；第二，面对顽固的bug和不断变化的业务需求以及系统优化，每一个都是困难，需要坚定的信心和不断接受挑战的勇气；第三，技术每天都在更新，新知识不断引入迫使程序员需要时常更新自己的知识体系，可能过几年，自己之前引以为傲的技术就过时了，不得不学习新技术，这需要一颗包容的心。所以，程序员是勤奋的！</p>

<p>因为上面这三条，程序员需要很多很多的时间来逐项完成，因此，8小时工作制几乎无法适用于程序员这一群体，他们需要经常加班来完成系统开发，他们需要在周末复出额外的时间去学习掌握新技术，他们付出自己的青春和时间给屏幕前的代码。他们没有时间去锻炼身体，没有精力去拾到自己，所以在大众眼里，穿件T恤、一条牛仔裤、一双休闲鞋、一副眼镜、一个双肩包，那么这个人十有八九就是程序员了，而现在，程序员自嘲为屌丝程序员。程序员每天的生活生活单调乏味，家和公司两点一线，每天坐着的时间超过10个小时，别人下班后还得为了任务进度而坚守岗位，碰到上线还得等待到夜深人静，系统紧急情况还得随叫随到。程序员被视为是高薪职业，但每年猝死案例层出不穷，公司都希望花一个人的钱招一个人然后当两个人使，所以，程序员是苦逼的！</p>

<p>程序员是生产力的代表，他们的直接产出是代码，由这些代码直接构成了现在的互联网，我们所接触的网络世界都是由代码构成，具体到每天使用的手机App，去银行操作的ATM机，超市结账的收银机等等，它们的系统都是由代码构成，而这些都是程序员们夜以继日的劳动成果。程序员的存在为这个世界以及社会的进步做出了非常大的贡献，他们是社会生产力的代表，他们推动了科技的进步，推动了人类的进步。优秀的程序员会不断的提升和完善自己，每一个程序员都对自己的代码情有独钟，会认为自己写的是世界上最好的代码，他们会因为解决一个系统问题而高兴，他们会因为突破了一个技术难题而备受敬仰，他们中的一些优秀人士会被历史铭记，所以，程序员是伟大的！</p>

<h3>程序员的高效生活</h3>

<p>什么是高效的生活，这本无定论，我们能选择的、能做的就是如何用自己认可的高效方式去过自己的生活。为什么说是高效的生活而不是高效的工作？那是因为工作就是生活，放大到人的一生，每一天不管在干吗，那都是生活。基于我也是程序员，那就说说我所认为的程序员的高效生活吧！</p>

<h4>1、对自己好一点</h4>

<p>生活不易，且行且珍惜！不要每天苦大仇深，整天想着多余的加班和来自上头的压力，每一件事到自己手上，都可以转化成以自己的方式去处理，刻板的执行只会使我们变得机械。创造性执行会使我们更有成就感，会提高我们分析问题和解决问题的能力，而这种能力直接决定了程序员的个人价值。吃好一点，不要吃些垃圾食品了，少喝些可乐和功能饮料吧，多吃些蔬菜水果和谷物，再来点鱼类，早上来杯牛奶或蔬菜榨汁，配以面包或馒头，最好外加一个鸡蛋，美好的一天就开始了，保证你上午写代码思绪如飞。中午和晚上就不要拖拖拉拉，到时间该吃饭就去吃饭吧，多写几行代码你也成不了专家，调一个bug也不要那么钻牛角尖，吃完饭回来补充好能量或许思路就有了。不要叫什么外卖了，本来坐那么久了，趁着吃饭时间出去走走吧，真想把自己坐(zuo)死啊。吃饭少吃些大油大刺激性的东西。运动多一点，早上早起半小时到1小时，天气好出去跑跑步，坚持下去，保证你每天都是充满阳光和能量的。周末有时间去游个泳，约上好友去骑个行都是不错的运动和放松方式，生命在于运动不是瞎说的。睡的好一点，保证7小时左右的睡眠吧，否则就是在消耗生命了，晚上9点后尽量进入放松方式，看看书、听听音乐就很不错嘛，或者停下需要思考的一些事，进入放松模式，12点前就上床睡觉吧（最好是11点），为了保证7小时睡眠，这是必须的。对自己好一点，是对自己的投资，何乐而不为呢！</p>

<h4>2、对自己狠一点</h4>

<p>竞争激烈，优胜劣汰！视野开阔一点吧，全世界跟你使用一门编程语言的人多了去了，你在这个群体中是一个什么样的水平？小一点，在跟你使用同样技术的圈子中，你处于什么样的水平？多学一点，技多不压身，多掌握几门技术，触类旁通，融会贯通，学习技术和修炼武功是一样的，需要长期的积累和练习，但结果可能是不一样的。同样的时间下，效果是会有很大出入的，为什么同样的时间下，有些人成为了大师，有些人还是那么原地不动、固步自封。多想一点，思考本身就是一件非常有价值的事，张小龙也说过，思辩胜于执行，怎么做之前先想明白，会让过程和结果都发生变化。对技术的追求没有止境，你不上，就会有更强的人来顶替你，保持对新技术的敏感性，坚持对现有功力的强化，对自己要求高一点，相信潜力无极限。能力越大，责任越大，价值也越大，试想，一个程序员完成一项工作需要8小时，他每小时的工资是150块，另一个程序员完成同样的工作只需要4个小时，而他每小时的工资是200块，从公司的角度，会认为哪一个价值会大一些呢？公司是利益集合体，能给公司带来利益的同时也能给自己带来利益，而这背后的驱动就是我们自己的努力。每天进步一点点，真的只需要一点点，不积跬步无以至千里，不积小流无以成江海。对自己狠一点，受益者是自己，何乐而不为呢！</p>

<blockquote><p>后记：我所说的不一定是对的！</p></blockquote>

<p><code>Focus on life. Focus on work. Don't let yourself regret forever! ——Ryan</code></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/06/29/efficient-life/'>http://ryantang.me/blog/2014/06/29/efficient-life/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014正在发生的事]]></title>
    <link href="http://ryantang.me/blog/2014/02/07/about-2014/"/>
    <updated>2014-02-07T14:41:00+08:00</updated>
    <id>http://ryantang.me/blog/2014/02/07/about-2014</id>
    <content type="html"><![CDATA[<blockquote><p>这个世界，唯一不变的就是变化！</p></blockquote>

<p>每一个时间节点，整个互联网和移动互联网都在不断发生着大大小小的事，这些事有些续写着2013，有些延续在2014!</p>

<!--More-->


<h3>一、互联网生活</h3>

<p>有没有感觉，身边用微信的人越来越多，我这里所指的多出来的这部分是我们的父母、长辈，他们逐渐开始用上智能手机，开始接触各种各样的App，慢慢的，我们都加入了移动互联网构建的生活。如果说各种类型的网站我们父母还不怎么用，那么，各种App他们是能驾驭得了的。</p>

<p>有没有感觉，现在吃饭、娱乐、购物、出行等等生活中的一切，都可以通过手机来处理，根据当前位置来找找附近有什么好吃的、好玩的、用手机逛淘宝购物、用手机订火车票机票，回忆一下，这一切，在两年前都不曾出现在我们的生活中。</p>

<p>有没有感觉，自己越来越有了一种存在感和掌控感，发微博、发朋友圈，每一次好友的评论、转发和赞都无形在增加我们内心的存在感。手机支付缴费、购物等，让我们的消费变得简单、快速，让我们越来越容易掌控自己生活中的一切。</p>

<p>2014，随着互联网的普及和移动互联网用户的爆发式增长，生活中的方方面面将朝着移动化发展，届时，互联网没有征服的用户也会被移动互联网征服。</p>

<h3>二、互联网金融</h3>

<p>互联网金融在2013年开始风生水起，支付宝余额宝的推出，将天弘基金这支名不见经传的基金捧上高位，目前千亿级别的规模也是其他互联网理财产品后来者眼红的。余额宝抓住了很大一部分人这样的心理：有点小钱但不多，想通过这点小钱再赚点没有风险的小钱，没有时间也不想费工夫去银行听这种理财产品介绍，又想自己投入的钱能随取随用。恰好，余额宝的出现弥补了这一鸿沟，1块钱起的入门坎也使得很多屌丝一族也能高大上一回。这也许也印证了那句话，得屌丝着得天下。</p>

<p>百度、腾讯接踵而至，相继推出了自己的理财产品，不可忽视的是腾讯利用微信这个入口能大大吸收不少用户进入。目前通过微信可以直接绑定银行卡并进行移动支付，过年期间推出的微信红包也是得到了各路神仙的追捧。各种评论说明文也是道出了微信红包背后的秘密，腾讯借此机会完成了用户通过微信绑定银行卡这个动作，从而将用户拉入了自家的移动支付客户群中，微信此举，可谓是一举夺得，实在是妙。</p>

<p>2014，随着智能手机出货量和普及率的逐渐提高，智能手机用户群会越来越大，一二线城市的主体用户群基本稳定，三四线城市的用户群也逐渐从新进用户向成熟用户转变，届时，三四线城市同样会爆发同样的需求，类似余额宝这样的产品会更加被三四线城市的用户接受。</p>

<h3>三、互联网教育</h3>

<p>互联网教育或者说是在线教育在这两年也是风生水起，各种各样公司和产品的出现也使得这个市场火爆异常，但就目前的情况来看，还没有出现一家引领规范和流程的公司。针对K12（中小学）、英语、职业技能教育的互联网产品层出不穷，但总的来看都大同小异，也难怪有很多文章都说他们还没有找到在线教育的精髓，其实什么是精髓，我相信也没几个人说的出，这些后话都是需要经过长期的实践摸索和市场检验才能得出的结论。从国外引进的MOOC模式也被国内众多跟随者效仿，连淘宝都推出了淘宝同学，各大互联网巨头都在在线教育领域持续布局，具体怎么玩，看各自的游戏规则是什么了。</p>

<p>2014，互联网教育仍然会是持续的主题，各大公司会抓紧圈地布局，创业公司不断打磨各自的产品，扩大市场占有率的同时提升产品体验。教育是以结果为导向的，既学习完成后必定有结果作为衡量标准，同时，能把在线教育的过程和传统教育区分开，而不是简单的将线下教育模式照搬到线上，最终能给接受教育者在学习完成后的结果给出可衡量并且可利用的结果，或许就能解决现有存在的很多问题了。</p>

<h3>四、互联网医疗</h3>

<p>互联网医疗也是随着教育、金融而逐渐爆发的一个行业，目前已经有很多提供医疗咨询和诊断服务的公司，他们利用互联网手段完成以前传统方式无法解决的问题。降低各项成本的同时，提升了患者的用户体验。为了实现小病不进医院，大病提前知的愿景，越来越多的创业公司正在路上，让普通人都能有一个随身医生，这是多么利国利民的事。</p>

<p>2014，互联网医疗领域仍然有很长的路要走，巨头涉及还不是很多，可能会通过收购来完成布局。但政策对医疗领域的影响还是不可小视的，这里就不详述了。</p>

<h3>总结</h3>

<p>细心看看过年期间开始的各种电视广告，百度、腾讯、阿里、京东、小米都已经开始在电视上开启了广告攻势，一大波移动互联网攻势即将来袭。我们的生活将越来越深入的被互联网所影响，智能手机、可穿戴设备、智能电视、智能家居、智能汽车、物联网等等以前电影中的情节都将照进现实。2014，奋斗吧，少年！</p>

<blockquote><p>后记：我所说的不一定是对的！</p></blockquote>

<p><code>Focus on life. Focus on work. Don't let yourself regret forever! ——Ryan</code></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/02/07/about-2014/'>http://ryantang.me/blog/2014/02/07/about-2014/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android布局优化]]></title>
    <link href="http://ryantang.me/blog/2014/01/24/android-optimise-layout/"/>
    <updated>2014-01-24T20:42:44+08:00</updated>
    <id>http://ryantang.me/blog/2014/01/24/android-optimise-layout</id>
    <content type="html"><![CDATA[<h6>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/android-optimise-layout">http://www.infoq.com/cn/articles/android-optimise-layout</a>。如需转载，请与InfoQ中文站联系。</h6>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/0.png" alt="" /></p>

<p>在Android开发中，我们常用的布局方式主要有LinearLayout、RelativeLayout、FrameLayout等，通过这些布局我们可以实现各种各样的界面。与此同时，如何正确、高效的使用这些布局方式来组织UI控件，是我们构建优秀Android App的主要前提之一。本篇内容就主要围绕Android布局优化来讨论在日常开发中我们使用常用布局需要注意的一些方面，同时介绍一款SDK自带的UI性能检测工具HierarchyViewer。</p>

<!--More-->


<h2>布局原则</h2>

<p>通过一些惯用、有效的布局原则，我们可以制作出加载效率高并且复用性高的UI。简单来说，在Android UI布局过程中，需要遵守的原则包括如下几点：</p>

<ul>
<li>尽量多使用RelativeLayout，不要使用绝对布局AbsoluteLayout；</li>
<li>将可复用的组件抽取出来并通过&lt; include />标签使用；</li>
<li>使用&lt; ViewStub />标签来加载一些不常用的布局；</li>
<li>使用&lt; merge />标签减少布局的嵌套层次；</li>
</ul>


<p>由于Android的碎片化程度很高，市面上存在的屏幕尺寸也是各式各样，使用RelativeLayout能使我们构建的布局适应性更强，构建出来的UI布局对多屏幕的适配效果越好，通过指定UI控件间的相对位置，使在不同屏幕上布局的表现能基本保持一致。当然，也不是所有情况下都得使用相对布局，根据具体情况来选择和其他布局方式的搭配来实现最优布局。</p>

<h4>1、&lt; include />的使用</h4>

<p>在实际开发中，我们经常会遇到一些共用的UI组件，比如带返回按钮的导航栏，如果为每一个xml文件都设置这部分布局，一是重复的工作量大，二是如果有变更，那么每一个xml文件都得修改。还好，Android为我们提供了&lt; include />标签，顾名思义，通过它，我们可以将这些共用的组件抽取出来单独放到一个xml文件中，然后使用&lt; include />标签导入共用布局，这样，前面提到的两个问题都解决了。例如上面提到的例子，新建一个xml布局文件作为顶部导航的共用布局。</p>

<figure class='code'><figcaption><span>common_navitationbar.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>    <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_alignParentLeft=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Back&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;TextView</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_centerInParent=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Title&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们在需要引入导航栏的布局xml中通过&lt; include />导入这个共用布局。</p>

<figure class='code'><figcaption><span>main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;include</span>
</span><span class='line'>        <span class="na">android:layout_alignParentTop=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">layout=</span><span class="s">&quot;@layout/common_navitationbar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过这种方式，我们既能提高UI的制作和复用效率，也能保证制作的UI布局更加规整和易维护。布局完成后我们运行一下，可以看到如下布局效果，这就是我们刚才完成的带导航栏的界面。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/1.png" alt="" /></p>

<p>接着我们进入sdk目录下的tools文件夹下，找到HierarchyViewer并运行（此时保持你的模拟器或真机正在运行需要进行分析的App），双击我们正在显示的这个App所代表的进程。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/3.png" alt="" /></p>

<p>接下来便会进入hierarchyviewer的界面，我们可以在这里很清晰看到正在运行的UI的布局层次结构以及它们之间的关系。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/4.png" alt="" /></p>

<p>分析刚刚我们构建的导航栏布局，放大布局分析图可以看到，被include进来的common_navitationbar.xml根节点是一个RelativeLayout，而包含它的主界面main.xml根节点也是一个RelativeLayout，它前面还有一个FrameLayout等几个节点，FrameLayout就是Activity布局中默认的父布局节点，再往上是一个LinearLayout，这个LinearLayout就是包含Activity布局和状态栏的整个屏幕显示的布局父节点，这个LinearLayout还有一个子节点就是ViewStub，关于这个节点我们在后面会详细介绍。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/2.png" alt="" /></p>

<h4>2、&lt; merge />的使用</h4>

<p><merge>标签的作用是合并UI布局，使用该标签能降低UI布局的嵌套层次。该标签的主要使用场景主要包括两个，第一是当xml文件的根布局是FrameLayout时，可以用merge作为根节点。理由是因为Activity的内容布局中，默认就用了一个FrameLayout作为xml布局根节点的父节点，这一点可以从上图中看到，main.xml的根节点是一个RelativeLayout，其父节点就是一个FrameLayout，如果我们在main.xml里面使用FrameLayout作为根节点的话，这时就可以使用merge来合并成一个FrameLayout，这样就降低了布局嵌套层次。</p>

<p>我们修改一下main.xml的内容，将根节点修改为merge标签。</p>

<figure class='code'><figcaption><span>main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;merge</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/darker_gray&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;include</span> <span class="na">layout=</span><span class="s">&quot;@layout/common_navitationbar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/merge&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重新运行并打开HierarchyViewer查看此时的布局层次结构，发现之前多出来的一个RelativeLayout就没有了，直接将common_navigationbar.xml里面的内容合并到了main.xml里面。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/5.png" alt="" /></p>

<p>使用&lt; merge />的第二种情况是当用include标签导入一个共用布局时，如果父布局和子布局根节点为同一类型，可以使用merge将子节点布局的内容合并包含到父布局中，这样就可以减少一级嵌套层次。首先我们看看不使用merge的情况。我们新建一个布局文件common_navi_right.xml用来构建一个在导航栏右边的按钮布局。</p>

<figure class='code'><figcaption><span>common_navi_right.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_alignParentRight=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Ok&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后修改common_navitationbar.xml的内容，添加一个include，将右侧按钮的布局导入：</p>

<figure class='code'><figcaption><span>common_navitationbar.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>    <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_alignParentLeft=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Back&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;TextView</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_centerInParent=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Title&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;include</span> <span class="na">layout=</span><span class="s">&quot;@layout/common_center&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行后的效果如下图，在导航栏右侧添加了一个按钮“ok”</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/6.png" alt="" /></p>

<p>然后再运行HierarchyViewer看看现在的布局结构，发现common_navi_right.xml作为一个布局子节点嵌套在了common_navitationbar.xml下面。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/7.png" alt="" /></p>

<p>这时我们再将common_navi_right.xml的根节点类型改为merge。</p>

<figure class='code'><figcaption><span>common_navi_right.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;merge</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_alignParentRight=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Ok&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/merge&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重新运行并打开HierarchyViewer查看布局结构，发现之前嵌套的一个RelativeLayout就没有了，这就是使用merge的效果，能降低布局的嵌套层次。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/8.png" alt="" /></p>

<h4>3、&lt; ViewStub />的使用</h4>

<p>也许有不少同学对ViewStub还比较陌生，首先来看看ViewStub在官方文档里是怎么介绍的：</p>

<p>A ViewStub is an invisible, zero-sized View that can be used to lazily inflate layout resources at runtime. When a ViewStub is made visible, or when inflate() is invoked, the layout resource is inflated. The ViewStub then replaces itself in its parent with the inflated View or Views. Therefore, the ViewStub exists in the view hierarchy until setVisibility(int) or inflate() is invoked. The inflated View is added to the ViewStub&rsquo;s parent with the ViewStub&rsquo;s layout parameters.</p>

<p>大致意思是：ViewStub是一个不可见的，能在运行期间延迟加载的大小为0的View，它直接继承于View。当对一个ViewStub调用inflate()方法或设置它可见时，系统会加载在ViewStub标签中引入的我们自己定义的View，然后填充在父布局当中。也就是说，在对ViewStub调用inflate()方法或设置visible之前，它是不占用布局空间和系统资源的。它的使用场景可以是在我们需要加载并显示一些不常用的View时，例如一些网络异常的提示信息等。</p>

<p>我们新建一个xml文件用来显示一个提示信息：</p>

<figure class='code'><figcaption><span>common_msg.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;TextView</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_centerInParent=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>        <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Message&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在main.xml里面加入ViewStub的标签引入上面的布局：</p>

<figure class='code'><figcaption><span>main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;merge</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/darker_gray&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;include</span> <span class="na">layout=</span><span class="s">&quot;@layout/common_navitationbar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ViewStub</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/msg_layout&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>        <span class="na">android:layout=</span><span class="s">&quot;@layout/common_msg&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/merge&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改MainActivity.java的代码，我们这里设置为点击右上角按钮的时候显示自定义的common_msg.xml的内容。</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">View</span> <span class="n">msgView</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">rightButton</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">arg0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;111&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="k">if</span><span class="o">(</span><span class="n">flag</span><span class="o">){</span>
</span><span class='line'>                  <span class="n">showMsgView</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>                  <span class="n">closeMsgView</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="n">flag</span> <span class="o">=</span> <span class="o">!</span><span class="n">flag</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">showMsgView</span><span class="o">(){</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">msgView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>          <span class="n">msgView</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">ViewStub</span> <span class="n">stub</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewStub</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">msg_layout</span><span class="o">);</span>
</span><span class='line'>        <span class="n">msgView</span> <span class="o">=</span> <span class="n">stub</span><span class="o">.</span><span class="na">inflate</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">closeMsgView</span><span class="o">(){</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">msgView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>          <span class="n">msgView</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">GONE</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中我们通过flag来切换显示和隐藏common_msg.xml的内容，然后我们运行一下并点击右上角按钮来切换，效果如下：</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/9.png" alt="" /></p>

<h2>总结</h2>

<p>好了，到目前为止，我们就介绍了Android中关于布局优化的一些内容以及工具HierarchyViewer的使用。将前文提及的布局原则再列一下，欢迎大家补充更多的关于Android布局优化的实用原则。</p>

<ul>
<li>尽量多使用RelativeLayout，不要使用绝对布局AbsoluteLayout；</li>
<li>将可复用的组件抽取出来并通过&lt; include />标签使用；</li>
<li>使用&lt; ViewStub />标签来加载一些不常用的布局；</li>
<li>使用&lt; merge />标签减少布局的嵌套层次；</li>
</ul>


<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/01/24/android-optimise-layout/'>http://ryantang.me/blog/2014/01/24/android-optimise-layout/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CocoaPods管理依赖库]]></title>
    <link href="http://ryantang.me/blog/2014/01/05/cocoapods/"/>
    <updated>2014-01-05T20:16:17+08:00</updated>
    <id>http://ryantang.me/blog/2014/01/05/cocoapods</id>
    <content type="html"><![CDATA[<blockquote><p>工欲善其事，必先利其器</p></blockquote>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/1.png" alt="" /></p>

<p>本篇内容将介绍Mac和iOS开发中必备的一个依赖库管理工具<a href="https://github.com/CocoaPods/CocoaPods">CocoaPods</a>。</p>

<!--More-->


<h2>CocoaPods是什么</h2>

<p>在iOS开发中势必会用到一些第三方依赖库，比如大家都熟悉的ASIHttpRequest、AFNetworking、JSONKit等。使用这些第三方类库能极大的方便项目的开发，但是，集成这些依赖库需要我们手动去配置，例如集成ASIHttpRequest库时除了加入源码以外还需要手动去添加一些系统的framework，CFNetwork、MobileCoreServices等，如果这些第三方库发生了更新，还需要手动去更新项目。这就显得非常麻烦。有麻烦自然有解决办法，CocoaPods就是为了解决这个问题而生的。通过CocoaPods，我们可以将第三方的依赖库统一管理起来，配置和更新只需要通过简单的几行命令即可完成，大大的提高了实际开发中的工作效率，使我们的主要精力集中到更重要的事情上去。</p>

<h2>安装CocoaPods</h2>

<p>我的环境为Mac OS X 10.9.1，安装CocoaPods之前，先确保本地有Ruby环境，因为CocoaPods运行于Ruby之上，默认情况下，Mac是自带了Ruby环境的，可以通过命令行<code>ruby -v</code>查看当前Ruby的版本，我用的是1.9.3p448。接下来我们就可以通过如下命令安装CocoaPods了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo gem install cocoapods</span></code></pre></td></tr></table></div></figure>


<p>输入上述命令后可能会无响应，那是因为你身在天朝，伟大的墙拦住了你的去路，不知为什么，cocoapods.org这种无害产物也要被墙。不过没关系，我们可以通过淘宝的Ruby镜像来访问Cocoapods，在终端输入如下命令将Ruby镜像替换为淘宝的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem sources --remove https://rubygems.org/
</span><span class='line'>$ gem sources -a http://ruby.taobao.org/</span></code></pre></td></tr></table></div></figure>


<p>完成后可以通过如下命令来查看当前的Ruby镜像是否已经指向了淘宝的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem sources -l</span></code></pre></td></tr></table></div></figure>


<p>如果输出结果是如下这样，那说明这一步就成功了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*** CURRENT SOURCES ***
</span><span class='line'>
</span><span class='line'>http://ruby.taobao.org/</span></code></pre></td></tr></table></div></figure>


<p>接下来就可以重新运行安装命令来安装CocoaPods了，根据你的网络情况，几秒或十几秒后安装过程就完成了，总的来说，安装过程还是比较简单的。如果其中你遇到了什么问题，请自行Google解决，都能找到你想要的答案。</p>

<h2>使用CocoaPods</h2>

<p>我们通过集成JSONKit类库来演示如何使用CocoaPods来做依赖库管理。首先，建立一个xcode工程，命名为CocoaPodsTest，现在的工程结构如下图所示。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/2.png" alt="" /></p>

<p>这里我们要集成JSONKit，可以先通过如下命令来判断其是否支持CocoaPods。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod search JSONKit</span></code></pre></td></tr></table></div></figure>


<p>执行后通过输出结果可以看到JSONKit是支持CocoaPods的，注意红框标记的内容，这是待会我们配置xcode时需要的信息，这条配置项就是告诉CocoaPods去下载和管理哪一个第三方库。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/3.png" alt="" /></p>

<p>检测完毕后我们来到工程CocoaPodsTest的目录下，新建一个名为Podfile的文件（这里通过命令行创建）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim Podfile</span></code></pre></td></tr></table></div></figure>


<p>这个Podfile文件的作用是配置依赖库信息，就是告诉CocoaPods去下载和管理哪些依赖库，文件创建好以后，打开文件并加入如下内容。（vim打开文件后按i进入插入模式，编辑完成后按esc退出编辑模式，接着输入:wq保存并退出文件）</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/4.png" alt="" /></p>

<p>这时候，工程目录下就会有一个Podfile文件了，注意必须和.xcodeproj在同一个目录下。接下来就可以使用CocoaPods来安装并管理JSONKit库了，确保命令行当前路径是在CocoaPodsTest目录下，运行如下命令。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod install</span></code></pre></td></tr></table></div></figure>


<p>安装完成后会提示如下信息，并且我们的工程目录下会多出一个.xcworkspace结尾的文件，命令行信息绿色部分提醒我们“从此使用CocoaPodsTest.xcworkspace来打开项目”。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/5.png" alt="" /></p>

<p>通过CocoaPodsTest.xcworkspace来打开项目，这时，我们的项目工程结构就会变成下图这样，多出一个名为Pods的依赖工程，打开Pods文件夹后，发现JSONKit已经在里面了</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/6.png" alt="" /></p>

<p>这时候就可以在项目文件中引入JSONKit.h了，这时候如果你发现import的时候没有提示JSONKit的文件，可以在target-Build Settings下修改“User Header Search Paths”项，新增${SRCROOT}并选择rcursive，如下图。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/7.png" alt="" /></p>

<p>设置完成后就可以在文件中直接引用第三方库的文件并使用了。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/8.png" alt="" /></p>

<p>到此，新建工程并使用CocoaPods来管理依赖库的过程就完成了，如果是直接使用已有CocoaPods的项目，则需要首先运行一下pod update命令来更新项，然后照样通过.xcworkspace来打开工程。</p>

<p>如果需要依赖多个第三方类库，只需要修改Podfile文件的配置，然后运行pod update命令即可，比如新增一个AFNetworking的依赖库，首先执行pod search AFNetworking查看一下AFNetworking的配置信息，修改Podfile文件，在后面增加AFNetworking的对应配置信息，然后运行pod update命令就完成了对AFNetworking的集成。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/9.png" alt="" /></p>

<p>添加AFNetworking库后的目录结构如下。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/10.png" alt="" /></p>

<p>如果类库有更新，查看更新配置并执行pod update即可简单完成了，从此从手动更新繁重的体力劳动中解脱出来。</p>

<p>简单小结一下：</p>

<ul>
<li>安装CocoaPods</li>
<li>新建项目并在工程根目录下新建Podfile文件，配置需要管理的第三方库</li>
<li>运行pod install下载安装第三方库</li>
</ul>


<h6>更多内容请参考<a href="http://guides.cocoapods.org/">CocoaPods Guides</a></h6>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/01/05/cocoapods/'>http://ryantang.me/blog/2014/01/05/cocoapods/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android事件传递机制]]></title>
    <link href="http://ryantang.me/blog/2014/01/02/android-event-dispatch/"/>
    <updated>2014-01-02T10:12:13+08:00</updated>
    <id>http://ryantang.me/blog/2014/01/02/android-event-dispatch</id>
    <content type="html"><![CDATA[<h6>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/android-event-delivery-mechanism">http://www.infoq.com/cn/articles/android-event-delivery-mechanism</a>。如需转载，请与InfoQ中文站联系。</h6>

<blockquote><p>运用的前提是掌握</br>
掌握的本质是理解</p></blockquote>

<p>本篇内容将结合Android源码来分析Android的事件传递机制。众所周知，点按、滑动、触摸构成了Android等智能设备的基本操作，几乎所有的应用都通过对触摸屏的操作来进行应用程序的使用。那么，在Android中，触摸事件是如何响应及传递的呢，通过本篇内容你将有一个初步的了解。</p>

<!--More-->


<h4>实验环境</h4>

<ul>
<li>OS X 10.9</li>
<li>Eclipse(ADT)</li>
<li>Android源码版本：API Level 19（Android 4.4）</li>
</ul>


<h2>Android事件构成</h2>

<p>在Android中，事件主要包括点按、长按、拖拽、滑动等，点按又包括单击和双击，另外还包括单指操作和多指操作。所有这些都构成了Android中得事件响应。总的来说，所有的事件都由如下三个部分作为基础：</p>

<ul>
<li>按下（ACTION_DOWN）</li>
<li>移动（ACTION_MOVE）</li>
<li>抬起（ACTION_UP）</li>
</ul>


<p>所有的操作事件首先必须执行的是按下操作（ACTION_DOWN），之后所有的操作都是以按下操作作为前提，当按下操作完成后，接下来可能是一段移动（ACTION_MOVE）然后抬起（ACTION_UP），或者是按下操作执行完成后没有移动就直接抬起。这一系列的动作在Android中都可以进行控制。</p>

<p>我们知道，所有的事件操作都发生在触摸屏上，而在屏幕上与我们交互的就是各种各样的视图组件（View），在Android中，所有的视图都继承于View，另外通过各种布局组件（ViewGroup）来对View进行布局，ViewGroup也继承于View。所有的UI控件例如Button、TextView都是继承于View，而所有的布局控件例如RelativeLayout、容器控件例如ListView都是继承于ViewGroup。所以，我们的事件操作主要就是发生在View和ViewGroup之间，那么View和ViewGroup中主要有哪些方法来对这些事件进行响应呢？记住如下3个方法，我们通过查看View和ViewGroup的源码可以看到：</p>

<figure class='code'><figcaption><span>View.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ViewGroup.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在View和ViewGroup中都存在dispatchTouchEvent和onTouchEvent方法，但是在ViewGroup中还有一个onInterceptTouchEvent方法，那这些方法都是干嘛的呢？别急，我们先看看他们的返回值。这些方法的返回值全部都是<code>boolean</code>型，为什么是boolean型呢，看看本文的标题，“事件传递”，传递的过程就是一个接一个，那到了某一个点后是否要继续往下传递呢？你发现了吗，“是否”二字就决定了这些方法应该用boolean来作为返回值。没错，这些方法都返回true或者是false。在Android中，所有的事件都是从开始经过传递到完成事件的消费，这些方法的返回值就决定了某一事件是否是继续往下传，还是被拦截了，或是被消费了。</p>

<p>接下来就是这些方法的参数，都接受了一个<code>MotionEvent</code>类型的参数，MotionEvent继承于InputEvent，用于标记各种动作事件。之前提到的ACTION_DOWN、ACTION_MOVE、ACTION_UP都是MotinEvent中定义的常量。我们通过MotionEvent传进来的事件类型来判断接收的是哪一种类型的事件。到现在，这三个方法的返回值和参数你应该都明白了，接下来就解释一下这三个方法分别在什么时候处理事件。</p>

<ul>
<li><code>dispatchTouchEvent</code>方法用于事件的分发，Android中所有的事件都必须经过这个方法的分发，然后决定是自身消费当前事件还是继续往下分发给子控件处理。返回true表示不继续分发，事件没有被消费。返回false则继续往下分发，如果是ViewGroup则分发给onInterceptTouchEvent进行判断是否拦截该事件。</li>
<li><code>onTouchEvent</code>方法用于事件的处理，返回true表示消费处理当前事件，返回false则不处理，交给子控件进行继续分发。</li>
<li><code>onInterceptTouchEvent</code>是ViewGroup中才有的方法，View中没有，它的作用是负责事件的拦截，返回true的时候表示拦截当前事件，不继续往下分发，交给自身的onTouchEvent进行处理。返回false则不拦截，继续往下传。这是ViewGroup特有的方法，因为ViewGroup中可能还有子View，而在Android中View中是不能再包含子View的（iOS可以）。</li>
</ul>


<p>到目前为止，Android中事件的构成以及事件处理方法的作用你应该比较清楚了，接下来我们就通过一个Demo来实际体验实验一下。</p>

<h2>Android事件处理</h2>

<p>首先在Eclipse新建一个工程，并新建一个类RTButton继承Button，用来实现我们对按钮事件的跟踪。</p>

<figure class='code'><figcaption><span>RTButton.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RTButton</span> <span class="kd">extends</span> <span class="n">Button</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">RTButton</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---dispatchTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---dispatchTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---dispatchTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---onTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---onTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---onTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在RTButton中我重写了dispatchTouchEvent和onTouchEvent方法，并获取了MotionEvent各个事件状态，打印输出了每一个状态下的信息。然后在activity_main.xml中直接在根布局下放入自定义的按钮RTButton。</p>

<figure class='code'><figcaption><span>activity_main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:id=</span><span class="s">&quot;@+id/myLayout&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;com.ryantang.eventdispatchdemo.RTButton</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/btn&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Button&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来在Activity中为RTButton设置onTouch和onClick的监听器来跟踪事件传递的过程，另外，Activity中也有一个dispatchTouchEvent方法和一个onTouchEvent方法，我们也重写他们并输出打印信息。</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">RTButton</span> <span class="n">button</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>      <span class="n">button</span> <span class="o">=</span> <span class="o">(</span><span class="n">RTButton</span><span class="o">)</span><span class="k">this</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btn</span><span class="o">);</span>
</span><span class='line'>      <span class="n">button</span><span class="o">.</span><span class="na">setOnTouchListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnTouchListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouch</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">,</span> <span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---onTouch---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">break</span><span class="o">;</span>
</span><span class='line'>              <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---onTouch---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">break</span><span class="o">;</span>
</span><span class='line'>              <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---onTouch---UP&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">break</span><span class="o">;</span>
</span><span class='line'>              <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                  <span class="k">break</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">button</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton clicked!&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Activity---dispatchTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Activity---dispatchTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Activity---dispatchTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Activity---onTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Activity---onTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Activity---onTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码部分已经完成了，接下来运行工程，并点击按钮，查看日志输出信息，我们可以看到如下结果：</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/2.png" alt="" /></p>

<p>通过日志输出可以看到，首先执行了Activity的dispatchTouchEvent方法进行事件分发，在<code>MainActivity.java</code>代码第55行，dispatchTouchEvent方法的返回值是super.dispatchTouchEvent(event)，因此调用了父类方法，我们进入<code>Activity.java</code>的源码中看看具体实现。</p>

<figure class='code'><figcaption><span>Activity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Called to process touch screen events.  You can override this to</span>
</span><span class='line'><span class="cm"> * intercept all touch screen events before they are dispatched to the</span>
</span><span class='line'><span class="cm"> * window.  Be sure to call this implementation for touch screen events</span>
</span><span class='line'><span class="cm"> * that should be handled normally.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @param ev The touch screen event.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @return boolean Return true if this event was consumed.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ev</span><span class="o">.</span><span class="na">getAction</span><span class="o">()</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">onUserInteraction</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">getWindow</span><span class="o">().</span><span class="na">superDispatchTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从源码中可以看到，dispatchTouchEvent方法只处理了ACTION_DOWN事件，前面提到过，所有的事件都是以按下为起点的，所以，Android认为当ACTION_DOWN事件没有执行时，后面的事件都是没有意义的，所以这里首先判断ACTION_DOWN事件。如果事件成立，则调用了onUserInteraction方法，该方法可以在Activity中被重写，在事件被分发前会调用该方法。该方法的返回值是void型，不会对事件传递结果造成影响，接着会判断getWindow().superDispatchTouchEvent(ev)的执行结果，看看它的源码：</p>

<figure class='code'><figcaption><span>Activity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Used by custom windows, such as Dialog, to pass the touch screen event</span>
</span><span class='line'><span class="cm"> * further down the view hierarchy. Application developers should</span>
</span><span class='line'><span class="cm"> * not need to implement or call this.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">boolean</span> <span class="nf">superDispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过源码注释我们可以了解到这是个抽象方法，用于自定义的Window，例如自定义Dialog传递触屏事件，并且提到开发者不需要去实现或调用该方法，系统会完成，如果我们在MainActivity中将dispatchTouchEvent方法的返回值设为true，那么这里的执行结果就为true，从而不会返回执行onTouchEvent(ev)，如果这里返回false，那么最终会返回执行onTouchEvent方法，由此可知，接下来要调用的就是onTouchEvent方法了。别急，通过日志输出信息可以看到，ACTION_DOWN事件从Activity被分发到了RTButton，接着执行了onTouch和onTouchEvent方法，为什么先执行onTouch方法呢？我们到RTButton中的dispatchTouchEvent看看View中的源码是如何处理的。</p>

<figure class='code'><figcaption><span>View.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Pass the touch screen motion event down to the target view, or this</span>
</span><span class='line'><span class="cm"> * view if it is the target.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param event The motion event to be dispatched.</span>
</span><span class='line'><span class="cm"> * @return True if the event was handled by the view, false otherwise.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mInputEventConsistencyVerifier</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mInputEventConsistencyVerifier</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">onFilterTouchEventForSecurity</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//noinspection SimplifiableIfStatement</span>
</span><span class='line'>        <span class="n">ListenerInfo</span> <span class="n">li</span> <span class="o">=</span> <span class="n">mListenerInfo</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">li</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">li</span><span class="o">.</span><span class="na">mOnTouchListener</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">mViewFlags</span> <span class="o">&amp;</span> <span class="n">ENABLED_MASK</span><span class="o">)</span> <span class="o">==</span> <span class="n">ENABLED</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span> <span class="n">li</span><span class="o">.</span><span class="na">mOnTouchListener</span><span class="o">.</span><span class="na">onTouch</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mInputEventConsistencyVerifier</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mInputEventConsistencyVerifier</span><span class="o">.</span><span class="na">onUnhandledEvent</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>挑选关键代码进行分析，可以看代码第16行，这里有几个条件，当几个条件都满足时该方法就返回true，当条件li.mOnTouchListener不为空时，通过在源码中查找，发现mOnTouchListener实在以下方法中进行设置的。</p>

<figure class='code'><figcaption><span>View.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Register a callback to be invoked when a touch event is sent to this view.</span>
</span><span class='line'><span class="cm"> * @param l the touch listener to attach to this view</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setOnTouchListener</span><span class="o">(</span><span class="n">OnTouchListener</span> <span class="n">l</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">getListenerInfo</span><span class="o">().</span><span class="na">mOnTouchListener</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法就已经很熟悉了，就是我们在<code>MainActivity.java</code>中为RTButton设置的onTouchListener，条件(mViewFlags &amp; ENABLED_MASK) == ENABLED判断的是当前View是否是ENABLE的，默认都是ENABLE状态的。接着就是li.mOnTouchListener.onTouch(this, event)条件，这里调用了onTouch方法，该方法的调用就是我们在<code>MainActivity.java</code>中为RTButton设置的监听回调，如果该方法返回true，则整个条件都满足，dispatchTouchEvent就返回true，表示该事件就不继续向下分发了，因为已经被onTouch消费了。</p>

<p>如果onTouch返回的是false，则这个判断条件不成立，接着执行onTouchEvent(event)方法进行判断，如果该方法返回true，表示事件被onTouchEvent处理了，则整个dispatchTouchEvent就返回true。到这里，我们就可以回答之前提出的“为什么先执行onTouch方法”的问题了。到目前为止，ACTION_DOWN的事件经过了从Activity到RTButton的分发，然后经过onTouch和onTouchEvent的处理，最终，ACTION_DOWN事件交给了RTButton得onTouchEvent进行处理。</p>

<p>当我们的手（我这里用的Genymotion然后用鼠标进行的操作，用手的话可能会执行一些ACTION_MOVE操作）从屏幕抬起时，会发生ACTION_UP事件。从之前输出的日志信心中可以看到，ACTION_UP事件同样从Activity开始到RTButton进行分发和处理，最后，由于我们注册了onClick事件，当onTouchEvent执行完毕后，就调用了onClick事件，那么onClick是在哪里被调用的呢？继续回到<code>View.java</code>的源代码中寻找。由于onTouchEvent在<code>View.java</code>中的源码比较长，这里就不贴出来了，感兴趣的可以自己去研究一下，通过源码阅读，我们在ACTION_UP的处理分支中可以看到一个<code>performClick()</code>方法，从这个方法的源码中可以看到执行了哪些操作。</p>

<figure class='code'><figcaption><span>View.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Call this view&#39;s OnClickListener, if it is defined.  Performs all normal</span>
</span><span class='line'><span class="cm"> * actions associated with clicking: reporting accessibility event, playing</span>
</span><span class='line'><span class="cm"> * a sound, etc.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return True there was an assigned OnClickListener that was called, false</span>
</span><span class='line'><span class="cm"> *         otherwise is returned.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">performClick</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sendAccessibilityEvent</span><span class="o">(</span><span class="n">AccessibilityEvent</span><span class="o">.</span><span class="na">TYPE_VIEW_CLICKED</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ListenerInfo</span> <span class="n">li</span> <span class="o">=</span> <span class="n">mListenerInfo</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">li</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">li</span><span class="o">.</span><span class="na">mOnClickListener</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">playSoundEffect</span><span class="o">(</span><span class="n">SoundEffectConstants</span><span class="o">.</span><span class="na">CLICK</span><span class="o">);</span>
</span><span class='line'>        <span class="n">li</span><span class="o">.</span><span class="na">mOnClickListener</span><span class="o">.</span><span class="na">onClick</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在if分支里可以看到执行了li.mOnClickListener.onClick(this);这句代码，这里就执行了我们为RTButton实现的onClick方法，所以，到目前为止，可以回答前一个“onClick是在哪里被调用的呢？”的问题了，onClick是在onTouchEvent中被执行的，并且，onClick要后于onTouch的执行。</p>

<p>到此，点击按钮的事件传递就结束了，我们结合源代码窥探了其中的执行细节，如果我们修改各个事件控制方法的返回值又会发生什么情况呢，带着这个问题，进入下一节的讨论。</p>

<h2>Android事件拦截</h2>

<p>从上一节分析中，我们知道了在Android中存在哪些事件类型，事件的传递过程以及在源码中对应哪些处理方法。我们可以知道在Android中，事件是通过层级传递的，一次事件传递对应一个完整的层级关系，例如上节中分析的ACTION_DOWN事件从Activity传递到RTButton，ACTION_UP事件也同样。结合源码分析各个事件处理的方法，也可以明确看到事件的处理流程。</p>

<p>之前提过，所有事件处理方法的返回值都是boolean类型的，现在我们来修改这个返回值，首先从Aactivity开始，根据之前的日志输出结果，首先执行的是Activity的dispatchTouchEvent方法，现在将之前的返回值super.dispatchTouchEvent(event)修改为true，然后重新编译运行并点击按钮，看到如下的日志输出结果。</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/1.png" alt="" /></p>

<p>可以看到，事件执行到dispatchTouchEvent方法就没有再继续往下分发了，这也验证了之前的说法，返回true时，不再继续往下分发，从之前分析过的Activity的dispatchTouchEvent源码中也可知，当返回true时，就没有去执行onTouchEvent方法了。</p>

<p>接着，将上述修改还原，让事件在Activity这继续往下分发，接着就分发到了RTButton，将RTButton的dispatchTouchEvent方法的返回值修改为true，重新编译运行并查看输出日志结果。</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/3.png" alt="" /></p>

<p>从结果可以看到，事件在RTButton的dispatchTouchEvent方法中就没有再继续往下分发了。接着将上述修改还原，将RTButton的onTouchEvent方法返回值修改为true，让其消费事件，根据之前的分析，onClick方法是在onTouchEvent方法中被调用的，事件在这被消费后将不会调用onClick方法了，编译运行，得到如下日志输出结果。</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/4.png" alt="" /></p>

<p>跟分析结果一样，onClick方法并没有被执行，因为事件在RTButton的onTouchEvent方法中被消费了。下图是整个事件传递的流程图。</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/7.png" alt="" /></p>

<p>到目前为止，Android中的事件拦截机制就分析完了。但这里我们只讨论了单布局结构下单控件的情况，如果是嵌套布局，那情况又是怎样的呢？接下来我们就在嵌套布局的情况下对Android的事件传递机制进行进一步的探究和分析。</p>

<h2>Android嵌套布局事件传递</h2>

<p>首先，新建一个类RTLayout继承于LinearLayout，同样重写dispatchTouchEvent和onTouchEvent方法，另外，还需要重写onInterceptTouchEvent方法，在文章开头介绍过，这个方法只有在ViewGroup和其子类中才存在，作用是控制是否需要拦截事件。这里不要和dispatchTouchEvent弄混淆了，后者是控制对事件的分发，并且后者要先执行。</p>

<p>那么，事件是先传递到View呢，还是先传递到ViewGroup的？通过下面的分析我们可以得出结论。首先，我们需要对工程代码进行一些修改。</p>

<figure class='code'><figcaption><span>RTLayout.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RTLayout</span> <span class="kd">extends</span> <span class="n">LinearLayout</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">RTLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---dispatchTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---dispatchTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---dispatchTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onInterceptTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onInterceptTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onInterceptTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onInterceptTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>同时，在布局文件中为RTButton添加一个父布局，指明为自定义的RTLayout，修改后的布局文件如下。</p>

<figure class='code'><figcaption><span>activity_main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;com.ryantang.eventdispatchdemo.RTLayout</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/myLayout&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;com.ryantang.eventdispatchdemo.RTButton</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/btn&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Button&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/com.ryantang.eventdispatchdemo.RTLayout&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，我们在Activity中也为RTLayout设置onTouch和onClick事件，在MainActivity中添加如下代码。</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">rtLayout</span><span class="o">.</span><span class="na">setOnTouchListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnTouchListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouch</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">,</span> <span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onTouch---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onTouch---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onTouch---UP&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>  
</span><span class='line'><span class="n">rtLayout</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout clicked!&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码修改完毕后，编译运行工程，同样，点击按钮，查看日志输出结果如下：</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/5.png" alt="" /></p>

<p>从日志输出结果我们可以看到，嵌套了RTLayout以后，事件传递的顺序变成了Activity->RTLayout->RTButton，这也就回答了前面提出的问题，Android中事件传递是从ViewGroup传递到View的，而不是反过来传递的。</p>

<p>从输出结果第三行可以看到，执行了RTLayout的onInterceptTouchEvent方法，该方法的作用就是判断是否需要拦截事件，我们到ViewGroup的源码中看看该方法的实现。</p>

<figure class='code'><figcaption><span>ViewGroup.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法的实现很简单，只返回了一个false。那么这个方法是在哪被调用的呢，通过日志输出分析可知它是在RTLayout的dispatchTouchEvent执行后执行的，那我们就进到dispatchTouchEvent源码里面去看看。由于源码比较长，我将其中的关键部分截取出来做解释说明。</p>

<figure class='code'><figcaption><span>ViewGroup.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Check for interception.</span>
</span><span class='line'><span class="kd">final</span> <span class="kt">boolean</span> <span class="n">intercepted</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">actionMasked</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span>
</span><span class='line'>                    <span class="o">||</span> <span class="n">mFirstTouchTarget</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">disallowIntercept</span> <span class="o">=</span> <span class="o">(</span><span class="n">mGroupFlags</span> <span class="o">&amp;</span> <span class="n">FLAG_DISALLOW_INTERCEPT</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">disallowIntercept</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">intercepted</span> <span class="o">=</span> <span class="n">onInterceptTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">ev</span><span class="o">.</span><span class="na">setAction</span><span class="o">(</span><span class="n">action</span><span class="o">);</span> <span class="c1">// restore action in case it was changed</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">intercepted</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// There are no touch targets and this action is not an initial down</span>
</span><span class='line'>                <span class="c1">// so this view group continues to intercept touches.</span>
</span><span class='line'>                <span class="n">intercepted</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从这部分代码中可以看到onInterceptTouchEvent调用后返回值被赋值给intercepted，该变量控制了事件是否要向其子控件分发，所以它起到拦截的作用，如果onInterceptTouchEvent返回false则不拦截，如果返回true则拦截当前事件。我们现在将RTLayout中的该方法返回值修改为true，并重新编译运行，然后点击按钮，查看输出结果如下。</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/6.png" alt="" /></p>

<p>可以看到，我们明明点击的按钮，但输出结果显示RTLayout点击事件被执行了，再通过输出结果分析，对比上次的输出结果，发现本次的输出结果完全没有RTButton的信息，没错，由于onInterceptTouchEvent方法我们返回了true，在这里就将事件拦截了，所以他不会继续分发给RTButton了，反而交给自身的onTouchEvent方法执行了，理所当然，最后执行的就是RTLayout的点击事件了。</p>

<h2>总结</h2>

<p>以上我们对Android事件传递机制进行了分析，期间结合系统源码对事件传递过程中的处理情况进行了探究。通过单布局情况和嵌套布局情况下的事件传递和处理进行了分析，现总结如下：</p>

<ul>
<li>Android中事件传递按照从上到下进行层级传递，事件处理从Activity开始到ViewGroup再到View。</li>
<li>事件传递方法包括<code>dispatchTouchEvent</code>、<code>onTouchEvent</code>、<code>onInterceptTouchEvent</code>，其中前两个是View和ViewGroup都有的，最后一个是只有ViewGroup才有的方法。这三个方法的作用分别是负责事件分发、事件处理、事件拦截。</li>
<li>onTouch事件要先于onClick事件执行，onTouch在事件分发方法dispatchTouchEvent中调用，而onClick在事件处理方法onTouchEvent中被调用，onTouchEvent要后于dispatchTouchEvent方法的调用。</li>
</ul>


<blockquote><p>后记：本文结合Android系统源码对事件传递机制进行了深入剖析，结合实例分析了事件传递和处理过程。不足之处还望指正。</p></blockquote>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/01/02/android-event-dispatch/'>http://ryantang.me/blog/2014/01/02/android-event-dispatch/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2013——前进并思考着]]></title>
    <link href="http://ryantang.me/blog/2014/01/01/my-2013/"/>
    <updated>2014-01-01T09:34:24+08:00</updated>
    <id>http://ryantang.me/blog/2014/01/01/my-2013</id>
    <content type="html"><![CDATA[<blockquote><p>春去冬来又一年，前进并思考着！</p></blockquote>

<p><img src="http://ryantang.me/images/2014/01/my_2013/1.png" alt="1" /></p>

<p>2013已经过去，今天是2014年1月1日，新年伊始！刚刚过去的2013年我经历了很多事情，有过希望、有过激情、有过彷徨、有过犹豫、有过无助、有过力量、有过憧憬。太多的太多，今天，在这里，一并回顾总结一下，作为向过去的告别和对未来的迎接！</p>

<!--More-->


<p>时间总是悄无声息的悄悄溜过，回看第一篇年度总结<a href="http://blog.csdn.net/ryantang03/article/details/8575889">《我的2012——移动开发在路上》</a>，至今仍是感慨颇深。人总是要向前看，无论经历什么，我们都该感谢，因为正是这些经历在不断的锻造我们，使我们成长、成熟。我为2013年的年度总结命名为“我的2013——前进并思考着”，一方面我还在自己的道路上前进着，另一方面，包含了我对过去一年更多的是思考，思考所做的事情、思考未来的方向。本篇，我仍将按照去年总结中的几方面，围绕着我的学习、工作、生活三方面进行整理。</p>

<h2>第一部分：学习</h2>

<p>说起学习，不得不说的一件事是我完成了研究生阶段的学习并顺利通过了毕业答辩，就此便完成了我人生前段18年的学生生涯。说起来，这应该就是我在2013年所经历的最大、最有意义的一件事了。至此，宣告了我现阶段学生生涯的结束，但学无止境，谁知道以后会怎样呢？</p>

<p>我在2013年的学习，总的来说更多的是在实践中去总结、在实践中去思考。没有了学校书本课程的束缚，学习的内容来源成了工作实践和平时总结。对比书本学习和工作实践，我觉得前者给我们的是一种规范和框架，只需要了解这个规范或者约定，然后照章运用即可，而后者需要推陈出新，不仅仅是需要遵照规范，更多的是需要理解核心要义，能在现有规范的条件下提炼出自己的见解，面对难题，能提出基于自己理解的解决方案。也许，学习和工作的最主要差别就是，学习只需要弄懂，然后做题，而工作需要解决问题并优化解决方案。</p>

<p>关于学习方法，我在2013年一直沿用专题专攻的方式，好比我在实践中或平时学习中遇到什么问题，如果我感兴趣或是觉得这个问题的解决方案对其他很多方面都通用的话，我便乐于去深入弄明白其中的要义，这个过程可能会很痛苦，毕竟很多问题都是之前没碰到过的，也许为了解决一个问题会需要去先解决其他几个子问题，但整个过程下来的结果肯定是收获颇丰的。我写博客的过程基本就是这个样子。好处显而易见，第一，这个过程能锻炼耐心；第二，这是个发现问题解决问题的过程；第三，这是个使自己在这个专题里精通的机会。对于这三点，如果做好了，日积月累，今后的我们也会感谢如今艰苦奋斗的自己。作为一个新人，我还在这条路上前进着、思考着！</p>

<p>关于学习时间安排，对于这个问题，我的看法其实很简单，学习并不一定需要专门的时间，一个小间隙、一次茶余饭后的谈论，甚至是一次蹲洗手间的时间都可以用来解决一个问题。当然，前提是自己关心这个问题，喜欢解决问题，而这些大前提就是自己喜欢正在做的工作，如果自己所做的事不是自己所喜欢的，那么这一定是痛苦的，也就不会有上面这些场景，更不会有心情去发现和解决问题了。其实，每一天我们可以利用的学习时间很多，如果你需要坐地铁公交上班，现在各种学习内容App也是满地开花，利用好路上干等的这段时间是不是比抱怨地铁公交的拥挤要更有意义呢！每天饭后一到两个小时的时间花在和同学同事谈天说地、饭后散步、抽烟小憩，还不如把这个时间的三分之二或一半花在了解一下最新的技术进展和某一个问题的最新解决方案，这里带来的收益要远远超过无聊的打发。每天回去需要花一到两个小时看看电影、玩玩游戏的少年们，如果能把这个时间的一半拿出来去总结总结当天的问题和收获，长此以往，提升远比在游戏里等级的提升带来的成就感要大。仔细算算，每天至少能拿出一到两个小时来学习，何乐而不为呢。以上这些，如果你说我没有生活情趣，一味只知道学习，也对，因为我就是这么做的，嘿嘿！或者五年或者十年，对比下我们的同龄人或者后辈，也许会发现问题，或者也可以看看本篇第三部分。</p>

<p>2013年学习及取得成果总结：</p>

<ul>
<li>Android的学习内容来源更多的是阅读官方文档和国外知名技术博客，并开始从源码去了解每一个知识点的内部机制；</li>
<li>iOS的学习以专题为主，阅读国内外优秀技术博客吸取学习内容，同时开始喜欢上官方文档的阅读。</li>
<li>阅读过的书籍《精益创业》、《淘宝技术这十年》、《正能量》、《大数据时代》；</li>
<li>参加行业活动、会议、论坛6场，学习到很多前沿内容，听取了很多实用的分享；</li>
<li>完成博客文章37篇，CSDN博客点击量52W，将博客内容更新迁移到Octopress，创建维护QQ群4个，群成员近2000人，创建微信公众账号“Android及iOS开发汇总”，订阅人数1026人，线上结识很多志同道合的好朋友。</li>
</ul>


<h2>第二部分：工作</h2>

<p>在2013年，对于工作，有实践、有思考，毕竟临近毕业，需要为今后的职业发展做一个初步规划，选择什么样的工作，加入什么样的公司和团队，自己究竟适合什么样的工作和公司文化，需要考虑的问题太多。作为一个新手，在工作方面，确实需要前人的指点与自身的学习。</p>

<p>2013年，我结束了在爱立信的实习，可以说，这段实习时光会令我终生难忘，从学生到半个社会人的过度，从校园到职场的过度都在这里完成了，在公司，结识了一些为人好、实力强的同事和领导，见识并体验了世界500强的工作文化，对自己今后的工作方式和职业素养确实都有非常大的影响和帮助作用。</p>

<p>从校园过度到职场的这个过程，也产生了我对于工作和职场的一些看法，现在将我今年思考的一些东西总结如下。</p>

<h4>1.选择什么工作</h4>

<p>2013年结束，我也将面临求职的过程，关于选择什么样的工作，我也有自己的标准，首先，这份工作必须是我喜欢的。如果每天做着自己不感兴趣的事，那简直是浪费生命和时间，如果只是拿了那份工资而去从事自己不喜欢甚至反感的工作，那势必是悲哀的。其次，工作的内容必须是自己的强项，至少是自己擅长的，作为一个职场新人，我觉得第一份工作的内容必须是自己所擅长的领域，选择一份工作其实也是选择了接下来很长一段时间的生活方式，选择擅长的工作既是对工作结果的负责，也是对公司的负责，如果为了挑战而去选择一份自己不擅长的工作，一方面工作做不好，另一方面对公司也是不负责的。最后，在开始求职前，我给自己定了一个标准，选择的工作是移动开发相关的，这是我喜欢的，工作内容是Android或iOS开发，这是我擅长的，如果工作内容能接触产品相关的那就更好，毕竟能让技术与产品结合，是我所希望的。</p>

<h4>2.选择什么公司</h4>

<p>对于选择什么样的公司，其实各有各的看法，有倾向大公司的，有倾向创业公司的，至于选择谁，也是各有伯仲。进入大公司，好处显而易见，平台大，起点高，能接触到规范的管理流程和制度，享受公司带来的各方面的优势。而劣势也各有说法，有说大公司流程过于固定，工作内容比较受限，一个萝卜一个坑，干好自己本职工作即可高枕无忧，发挥的空间不大。关于创业公司，挑战大、机会大，接触的工作内容比较多，对能力的提升也最为有效，发挥空间大，如果成功则回报率也大于在大公司。但有一定风险，都不知道公司下一步会怎样。所以，这两个选择，我想一定也纠结过很多人。有从大公司出来的人会说去创业公司吧，有激情、有挑战，有从创业公司出来的又会说，去大公司吧，有保障，工作不累，在大公司锻炼几年再出来创业也有优势。所以，这个问题本来就没有一个标准的答案，我也就不再多说了。</p>

<h4>3.选择什么团队</h4>

<p>对于选择加入一个什么样的团队，这就非常重要了，不管进大公司还是创业公司，一个积极向上、效率高、没有等级制度的团队是我很看重的，能进入一个氛围好，大家一同齐心协力做事的团队会是一件非常幸运的事。作为一个新人，选择团队可能考虑的更多的是这个团队里面有没有能指导自己的大N，能不能在这个团队里使自己得到提高。当然，现实情况是，作为求职者，选择团队的几率很小，基本是公司把你安排在哪就在哪，所以在选择不同的公司时就可以同时了解可能会去的团队的基本情况。一个好团队能让我们工作更加开心，工作效率和工作质量也会更高。总的来说，我认为的好团队是能够交流自由、氛围好、工作敏捷、效率高、管理扁平化、Leader本身具备很深功力的团队。</p>

<p>2013年工作情况总结：</p>

<ul>
<li>在工作方式上得到了比较大的进步；</li>
<li>完成在爱立信的实习工作；</li>
<li>在Github上完成了一款开源项目<a href="https://github.com/tangren03/RTCommon">RTCommon</a></li>
<li>通过在线协作方式发起了一个移动应用的开发工作，正在不断完善</li>
</ul>


<h2>第三部分：生活</h2>

<p>对于生活，我等同行被冠以没有品位和情调，只知道整天对着屏幕敲代码的一族。其实，也不是所有的程序员都只知道对着屏幕敲代码，至少我不是，嘿嘿！平时闲暇也有自己的爱好，宅在家看看书、看看电影，出去跑跑步、游游泳，周末和朋友打打台球、聊聊天，兴致好和好友去唱唱歌，再有情调点，前阵子就和好友自驾去内蒙完了几天，文章最开始的日出就是我们在零下20度的草原上拍到的。</p>

<p>如何在原本枯燥乏味的工作间隙找寻生活中的快乐，我觉得这是现在这个社会很多人都缺失的，太多的人都奔波于生计，投入于工作，忽视了原本美好的生活，冷淡了亲人和爱人，疏远了朋友，忽视了健康。是现在这个时代的问题呢还是我们自己的问题。总之，这是一个目前无解的问题。</p>

<p>要说2013年我在生活上最大的感悟就是，照顾好自己！照顾好自己包含了太多的内容，让自己吃好、睡好是最基本的，让身体保持健康的状态，让心情保持愉悦，让每天都充满希望与期待，让自己和身边的人都感受到快乐和正能量。照顾好自己不仅仅关乎自己，关乎我们的家人、朋友，如果你的家人为你的健康担心，告诉他们你现在过的很好，并且要付诸行动，如果你现在正好有女朋友或男朋友，照顾好自己，让对方放心。生活其实很简单，快乐、向上、有目标。有空的时候给自己做做饭吃，别老在外面吃或吃速食或垃圾食品，其实，我发现做饭其实是一件很有成就感而且很快乐的事(但我不喜欢洗碗，哈哈)。有空的时候约三两好友一起出来聚聚，聊聊近况、扯扯天扯扯地。找个有阳光的周末，把自己的房间打扫整理一下，洗洗衣服被子，让一切都充满太阳的味道。其实，生活可以很美好！</p>

<p>毕竟我才这么大，生活阅历有限，所以谈不出非常高深的生活哲理与体验，我所说的都是自己真实的感受，希望能对看到的你有所启发与帮助。</p>

<p>2013年生活总结：</p>

<ul>
<li>坚持每天按时三餐，合理搭配饮食，尽量不吃垃圾食品；</li>
<li>有空一定自己做饭吃，虽然简单，但是快乐；</li>
<li>PM2.5不高、天气好就坚持早起晨跑，累计跑步316.7公里；</li>
<li>不熬夜，没有特殊情况，12点前睡觉，保持7小时平均睡眠时间；</li>
</ul>


<h2>我的2014</h2>

<p>2014年，对我来说，充满太多的未知因素，也充满太多的挑战。2014，我将正式开始自己的职业生涯，我将进入一家什么样的公司，和一群什么人合作，能做出一些什么样的成果，能达到一些什么目标，能取得些什么进步。这一切，都促使我干劲十足，准备好一切去迎接。2014，希望自己开心、快乐！新的一年，希望一切都好！</p>

<p>最后，附图一张，这是毕业答辩后和同学自驾去内蒙塞罕坝玩拍的一张照片，和文章顶部的对应，当时零下二十多度，到达看日出的地方时太阳正好升起，东边是日出，而另一面就是高挂的月亮。爬上小山头，太阳正好升起，看到阳光的那一刻，感觉整个世界是那么的美好！</p>

<p><img src="http://ryantang.me/images/2014/01/my_2013/2.png" alt="2" /></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/01/01/my-2013/'>http://ryantang.me/blog/2014/01/01/my-2013/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS事件机制(二)]]></title>
    <link href="http://ryantang.me/blog/2013/12/29/ios-event-dispatch-2/"/>
    <updated>2013-12-29T10:20:43+08:00</updated>
    <id>http://ryantang.me/blog/2013/12/29/ios-event-dispatch-2</id>
    <content type="html"><![CDATA[<p>本篇内容接上一篇<a href="http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/">iOS事件机制(一)</a>，本次主要介绍iOS事件中的多点触控事件和手势事件。</p>

<p>从上一篇的内容我们知道，在iOS中一个事件用一个UIEvent对象表示，UITouch用来表示一次对屏幕的操作动作，由多个UITouch对象构成了一个UIEvent对象。另外，<code>UIResponder</code>是所有响应者的父类，UIView、UIViewController、UIWindow、UIApplication都直接或间接的集成了UIResponder。关于事件响应者链的传递机制在上一篇中也有阐述，如果你还不是很了解，可以先看看<a href="http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/">iOS事件机制(一)</a>。</p>

<!--More-->


<h2>事件处理方法</h2>

<p>UIResponder中定义了一系列对事件的处理方法，他们分别是：</p>

<ul>
<li>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
<li>&ndash;(void)touchesMoved:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
<li>&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
<li>&ndash;(void)touchesCancelled:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
</ul>


<p>从方法名字可以知道，他们分别对应了屏幕事件的开始、移动、结束和取消几个阶段，前三个阶段理解都没问题，最后一个取消事件的触发时机是在诸如突然来电话或是系统杀进程时调用。这些方法的第一个参数定义了UITouch对象的一个集合(NSSet)，它的数量表示了这次事件是几个手指的操作，目前iOS设备支持的多点操作手指数最多是5。第二个参数是当前的UIEvent对象。下图展示了一个UIEvent对象与多个UITouch对象之间的关系。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/11.png" alt="" /></p>

<h3>一、点击事件</h3>

<p>首先，新建一个自定义的View继承于UIView，并实现上述提到的事件处理方法，我们可以通过判断UITouch的tapCount属性来决定响应单击、双击或是多次点击事件。</p>

<figure class='code'><figcaption><span>MyView.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#import &quot;MyView.h&quot;</span>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">MyView</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesBegan</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesMoved</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesEnded</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">UITouch</span> <span class="o">*</span><span class="n">aTouch</span> <span class="n">in</span> <span class="n">touches</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">aTouch</span><span class="p">.</span><span class="n">tapCount</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 处理双击事件</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="n">respondToDoubleTapGesture</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesCancelled</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">respondToDoubleTapGesture</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;respondToDoubleTapGesture&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>二、滑动事件</h3>

<p>滑动事件一般包括上下滑动和左右滑动，判断是否是一次成功的滑动事件需要考虑一些问题，比如大部分情况下，用户进行一次滑动操作，这次滑动是否是在一条直线上？或者是否是基本能保持一条直线的滑动轨迹。或者判断是上下滑动还是左右滑动等。另外，滑动手势一般有一个起点和一个终点，期间是在屏幕上画出的一个轨迹，所以需要对这两个点进行判断。我们修改上述的MyView.m的代码来实现一次左右滑动的事件响应操作。</p>

<figure class='code'><figcaption><span>MyView.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#import &quot;MyView.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define HORIZ_SWIPE_DRAG_MIN  12    </span><span class="c1">//水平滑动最小间距</span>
</span><span class='line'><span class="cp">#define VERT_SWIPE_DRAG_MAX    4    </span><span class="c1">//垂直方向最大偏移量</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">MyView</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesBegan</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UITouch</span> <span class="o">*</span><span class="n">aTouch</span> <span class="o">=</span> <span class="p">[</span><span class="n">touches</span> <span class="n">anyObject</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// startTouchPosition是一个CGPoint类型的属性，用来存储当前touch事件的位置</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">startTouchPosition</span> <span class="o">=</span> <span class="p">[</span><span class="n">aTouch</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesMoved</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesEnded</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UITouch</span> <span class="o">*</span><span class="n">aTouch</span> <span class="o">=</span> <span class="p">[</span><span class="n">touches</span> <span class="n">anyObject</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">currentTouchPosition</span> <span class="o">=</span> <span class="p">[</span><span class="n">aTouch</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//  判断水平滑动的距离是否达到了设置的最小距离，并且是否是在接近直线的路线上滑动（y轴偏移量）</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">fabsf</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">startTouchPosition</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">currentTouchPosition</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">HORIZ_SWIPE_DRAG_MIN</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="n">fabsf</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">startTouchPosition</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">currentTouchPosition</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">VERT_SWIPE_DRAG_MAX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 满足if条件则认为是一次成功的滑动事件，根据x坐标变化判断是左滑还是右滑</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">startTouchPosition</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">currentTouchPosition</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="n">rightSwipe</span><span class="p">];</span><span class="c1">//右滑响应方法</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="n">leftSwipe</span><span class="p">];</span><span class="c1">//左滑响应方法</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">//重置开始点坐标值</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">startTouchPosition</span> <span class="o">=</span> <span class="n">CGPointZero</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesCancelled</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//当事件因某些原因取消时，重置开始点坐标值</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">startTouchPosition</span> <span class="o">=</span> <span class="n">CGPointZero</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">rightSwipe</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;rightSwipe&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">leftSwipe</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;leftSwipe&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>三、拖拽事件</h3>

<p>在屏幕上我们可以拖动某一个控件(View)进行移动，这种事件成为拖拽事件，其实现原理就是在不改变View的大小尺寸的前提下改变View的显示坐标值，为了达到动态移动的效果，我们可以在move阶段的方法中进行坐标值的动态更改，还是重写MyView.m的事件处理方法，这次在touchesMove方法中进行处理。</p>

<figure class='code'><figcaption><span>MyView.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#import &quot;MyView.h&quot;</span>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">MyView</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesBegan</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesMoved</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UITouch</span> <span class="o">*</span><span class="n">aTouch</span> <span class="o">=</span> <span class="p">[</span><span class="n">touches</span> <span class="n">anyObject</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//获取当前触摸操作的位置坐标</span>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">loc</span> <span class="o">=</span> <span class="p">[</span><span class="n">aTouch</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//获取上一个触摸点的位置坐标</span>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">prevloc</span> <span class="o">=</span> <span class="p">[</span><span class="n">aTouch</span> <span class="n">previousLocationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">myFrame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//改变View的x、y坐标值</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">deltaX</span> <span class="o">=</span> <span class="n">loc</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">prevloc</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">deltaY</span> <span class="o">=</span> <span class="n">loc</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">prevloc</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">deltaX</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+=</span> <span class="n">deltaY</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//重新设置View的显示位置</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">setFrame</span><span class="o">:</span><span class="n">myFrame</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesEnded</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesCancelled</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>四、双指缩放</h3>

<p>之前提到过UIEvent包含了一系列的UITouch对象构成一次事件，当设计多点触控操作时，可与对UIEvent对象内的UITouch对象进行处理，比如实现一个双指缩放的功能。</p>

<figure class='code'><figcaption><span>MyView.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#import &quot;MyView.h&quot;</span>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">MyView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">BOOL</span> <span class="n">pinchZoom</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">previousDistance</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">zoomFactor</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="n">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pinchZoom</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//缩放前两个触摸点间的距离</span>
</span><span class='line'>        <span class="n">previousDistance</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="n">zoomFactor</span> <span class="o">=</span> <span class="mf">1.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesBegan</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">allTouches</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pinchZoom</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSArray</span> <span class="o">*</span><span class="n">touches</span> <span class="o">=</span> <span class="p">[</span><span class="n">event</span><span class="p">.</span><span class="n">allTouches</span> <span class="n">allObjects</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">//接收两个手指的触摸操作</span>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">pointOne</span> <span class="o">=</span> <span class="p">[[</span><span class="n">touches</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">pointTwo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">touches</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="mi">1</span><span class="p">]</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">//计算出缩放前后两个手指间的距离绝对值（勾股定理）</span>
</span><span class='line'>        <span class="n">previousDistance</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">pow</span><span class="p">(</span><span class="n">pointOne</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">pointTwo</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="mf">2.0f</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>                                <span class="n">pow</span><span class="p">(</span><span class="n">pointOne</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">pointTwo</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mf">2.0f</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pinchZoom</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesMoved</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">YES</span> <span class="o">==</span> <span class="n">pinchZoom</span> <span class="o">&amp;&amp;</span> <span class="n">event</span><span class="p">.</span><span class="n">allTouches</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSArray</span> <span class="o">*</span><span class="n">touches</span> <span class="o">=</span> <span class="p">[</span><span class="n">event</span><span class="p">.</span><span class="n">allTouches</span> <span class="n">allObjects</span><span class="p">];</span>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">pointOne</span> <span class="o">=</span> <span class="p">[[</span><span class="n">touches</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">pointTwo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">touches</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="mi">1</span><span class="p">]</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">//两个手指移动过程中，两点之间距离</span>
</span><span class='line'>        <span class="n">CGFloat</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">pow</span><span class="p">(</span><span class="n">pointOne</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">pointTwo</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="mf">2.0f</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>                                <span class="n">pow</span><span class="p">(</span><span class="n">pointOne</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">pointTwo</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mf">2.0f</span><span class="p">));</span>
</span><span class='line'>        <span class="c1">//换算出缩放比例</span>
</span><span class='line'>        <span class="n">zoomFactor</span> <span class="o">+=</span> <span class="p">(</span><span class="n">distance</span> <span class="o">-</span> <span class="n">previousDistance</span><span class="p">)</span> <span class="o">/</span> <span class="n">previousDistance</span><span class="p">;</span>
</span><span class='line'>        <span class="n">zoomFactor</span> <span class="o">=</span> <span class="n">fabs</span><span class="p">(</span><span class="n">zoomFactor</span><span class="p">);</span>
</span><span class='line'>        <span class="n">previousDistance</span> <span class="o">=</span> <span class="n">distance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//缩放</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CATransform3DMakeScale</span><span class="p">(</span><span class="n">zoomFactor</span><span class="p">,</span> <span class="n">zoomFactor</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesEnded</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">allTouches</span><span class="p">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pinchZoom</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="n">previousDistance</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesCancelled</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面实现的方式有一点不足之处就是必须两个手指同时触摸按下才能达到缩放的效果，并不能达到相册里面那样一个手指触摸后，另一个手指按下也可以缩放。如果需要达到和相册照片缩放的效果，需要同时控制begin、move、end几个阶段的事件处理。这个不足就留给感兴趣的同学自己去实现了。</p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2013/12/29/ios-event-dispatch-2/'>http://ryantang.me/blog/2013/12/29/ios-event-dispatch-2/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS事件机制(一)]]></title>
    <link href="http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/"/>
    <updated>2013-12-07T15:10:42+08:00</updated>
    <id>http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1</id>
    <content type="html"><![CDATA[<blockquote><p>运用的前提是掌握</br>
掌握的本质是理解</p></blockquote>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/1.png" alt="" /></p>

<!--More-->


<p>本篇内容将围绕iOS中事件及其传递机制进行学习和分析。在iOS中，事件分为三类：</p>

<ul>
<li>触控事件（单点、多点触控以及各种手势操作）</li>
<li>传感器事件（重力、加速度传感器等）</li>
<li>远程控制事件（远程遥控iOS设备多媒体播放等）</li>
</ul>


<p>这三类事件共同构成了iOS设备丰富的操作方式和使用体验，本次就首先来针对第一类事件：触控事件，进行学习和分析。</p>

<h2>Gesture Recognizers</h2>

<p>Gesture Recognizers是一类手势识别器对象，它可以附属在你指定的View上，并且为其设定指定的手势操作，例如是点击、滑动或者是拖拽。当触控事件 发生时，设置了Gesture Recognizers的View会先通过识别器去拦截触控事件，如果该触控事件是事先为View设定的触控监听事件，那么Gesture Recognizers将会发送动作消息给目标处理对象，目标处理对象则对这次触控事件进行处理，先看看如下流程图。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/2.png" alt="" /></p>

<p>在iOS中，View就是我们在屏幕上看到的各种UI控件，当一个触控事件发生时，Gesture Recognizers会先获取到指定的事件，然后发送动作消息(action message)给目标对象(target)，目标对象就是ViewController，在ViewController中通过事件方法完成对该事件的处理。Gesture Recognizers能设置诸如单击、滑动、拖拽等事件，通过Action-Target这种设计模式，好处是能动态为View添加各种事件监听，而不用去实现一个View的子类去完成这些功能。</p>

<p>以上过程就是我们在开发中在方法中常见的设置action和设置target，例如为UIButton设置监听事件等。</p>

<h3>常用手势识别类</h3>

<p>在UIKit框架中，系统为我们事先定义好了一些常用的手势识别器，包括点击、双指缩放、拖拽、滑动、旋转以及长按。通过这些手势识别器我们可以构造丰富的操作方式。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/3.png" alt="" /></p>

<p>在上表中可以看到，UIKit框架中已经提供了诸如UITapGestureRecognizer在内的六种手势识别器，如果你需要实现自定义的手势识别器，也可以通过继承UIGestureRecognizer类并重写其中的方法来完成，这里我们就不详细讨论了。</p>

<p>每一个Gesture Recognizer关联一个View，但是一个View可以关联多个Gesture Recognizer，因为一个View可能还能响应多种触控操作方式。当一个触控事件发生时，Gesture Recognizer接收一个动作消息要先于View本身，结果就是Gesture Recognizer作为View处理触控事件的代表，或者叫代理。当Gesture Recognizer接收到指定的事件时，它就会发送一条动作消息(action message)给ViewController并处理。</p>

<h3>连续和不连续动作</h3>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/4.png" alt="" /></p>

<p>触控动作同时分为连续动作(continuous)和不连续动作(discrete)，连续动作例如滑动和拖拽，它会持续一小段时间，而不连续动作例如单击，它瞬间就会完成，在这两类事件的处理上又稍有不同。对于不连续动作，Gesture Recognizer只会给ViewContoller发送一个单一的动作消息(action message),而对于连续动作，Gesture Recognizer会发送多条动作消息给ViewController，直到所有的事件都结束。</p>

<p>为一个View添加GestureRecognizer有两种方式，一种是通过InterfaceBuilder实现，另一种就是通过代码实现，我们看看通过代码来如何实现。</p>

<figure class='code'><figcaption><span>MyViewContoller.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span> <span class="o">(</span><span class="kt">void</span><span class="o">)</span><span class="n">viewDidLoad</span> <span class="o">{</span>
</span><span class='line'>     <span class="o">[</span><span class="kd">super</span> <span class="n">viewDidLoad</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// 创建并初始化手势对象</span>
</span><span class='line'>     <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">tapRecognizer</span> <span class="o">=</span> <span class="o">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="o">]</span>
</span><span class='line'>          <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="nd">@selector</span><span class="o">(</span><span class="nl">respondToTapGesture:</span><span class="o">)];</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// 指定操作为单击一次</span>
</span><span class='line'>     <span class="n">tapRecognizer</span><span class="o">.</span><span class="na">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// 为当前View添加GestureRecognizer</span>
</span><span class='line'>     <span class="o">[</span><span class="n">self</span><span class="o">.</span><span class="na">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">tapRecognizer</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上述代码，我们实现了为当前MyViewController的View添加一个单击事件，首先构造了UITapGestureRecognizer对象，指定了target为当前ViewController本身，action就是后面自己实现的处理方法，这里就呼应了前文提到的Action-Target模式。</p>

<p>在事件处理过程中，这两种方式所处的状态又各有不同，首先，所有的触控事件最开始都是处于可用状态(Possible)，对应UIKit里面的UIGestureRecognizerStatePossible类，如果是不连续动作事件，则状态只会从Possible转变为已识别状态(Recognized,UIGestureRecognizerStateRecognized)或者是失败状态(Failed,UIGestureRecognizerStateFailed)。例如一次成功的单击动作，就对应了Possible-Recognized这个过程。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/5.png" alt="" /></p>

<p>如果是连续动作事件，如果事件没有失败并且连续动作的第一个动作被成功识别(Recognized)，则从Possible状态转移到Began(UIGestureRecognizerStateBegan)状态，这里表示连续动作的开始，接着会转变为Changed(UIGestureRecognizerStateChanged)状态，在这个状态下会不断循环的处理连续动作，直到动作执行完成变转变为Recognized已识别状态，最终该动作会处于完成状态(UIGestureRecognizerStateEnded)，另外，连续动作事件的处理状态会从Changed状态转变为Canceled(UIGestureRecognizerStateCancelled)状态，原因是识别器认为当前的动作已经不匹配当初对事件的设定了。每个动作状态的变化，Gesture Recognizer都会发送消息(action message)给Target，也就是ViewController，它可以根据这些动作消息进行相应的处理。例如一次成功的滑动手势动作就包括按下、移动、抬起的过程，分别对应了Possible-Began-Changed-Recognized这个过程。</p>

<h3>UITouch &amp; UIEvent</h3>

<p>在屏幕上的每一次动作事件都是一次Touch，在iOS中用UITouch对象表示每一次的触控，多个Touch组成一次Event，用UIEvent来表示一次事件对象。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/6.png" alt="" /></p>

<p>在上述过程中，完成了一次双指缩放的事件动作，每一次手指状态的变化都对应事件动作处理过程中得一个阶段。通过Began-Moved-Ended这几个阶段的动作(Touch)共同构成了一次事件(Event)。在事件响应对象UIResponder中有对应的方法来分别处理这几个阶段的事件。</p>

<ul>
<li>touchesBegan:withEvent:</li>
<li>touchesMoved:withEvent:</li>
<li>touchesEnded:withEvent:</li>
<li>touchesCancelled:withEvent:</li>
</ul>


<p>后面的参数分别对应UITouchPhaseBegan、UITouchPhaseMoved、UITouchPhaseEnded、UITouchPhaseCancelled这几个类。用来表示不同阶段的状态。</p>

<h3>事件传递</h3>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/7.png" alt="" /></p>

<p>如上图，iOS中事件传递首先从App(UIApplication)开始，接着传递到Window(UIWindow)，在接着往下传递到View之前，Window会将事件交给GestureRecognizer，如果在此期间，GestureRecognizer识别了传递过来的事件，则该事件将不会继续传递到View去，而是像我们之前说的那样交给Target(ViewController)进行处理。</p>

<h2>响应者链(Responder Chain)</h2>

<p>通常，一个iOS应用中，在一块屏幕上通常有很多的UI控件，也就是有很多的View，那么当一个事件发生时，如何来确定是哪个View响应了这个事件呢，接下来我们就一起来看看。</p>

<h3>寻找hit-test view</h3>

<p>什么是hit-test view呢？简单来说就是你触发事件所在的那个View，寻找hit-test view的过程就叫做Hit-Testing。那么，系统是如何来执行Hit-Testing呢，首先假设现在有如下这么一个UI布局，一种有ABCDE五个View。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/8.png" alt="" /></p>

<p>假设一个单击事件发生在了View D里面，系统首先会从最顶层的View A开始寻找，发现事件是在View A或者其子类里面，那么接着从B和C找，发现事件是在C或者其子类里面，那么接着到C里面找，这时发现事件是在D里面，并且D已经没有子类了，那么hit-test view就是View D啦。</p>

<h3>响应者对象(Responsder Object)</h3>

<p>响应者对象是能够响应并且处理事件的对象，UIResponder是所有响应者对象的父类，包括UIApplication、UIView和UIViewController都是UIResponder的子类。也就意味着所有的View和ViewController都是响应者对象。</p>

<h3>第一响应者(First Responder)</h3>

<p>第一响应者是第一个接收事件的View对象，我们在Xcode的Interface Builder画视图时，可以看到视图结构中就有First Responder。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/10.png" alt="" /></p>

<p>这里的First Responder就是UIApplication了。另外，我们可以控制一个View让其成为First Responder，通过实现 canBecomeFirstResponder方法并返回YES可以使当前View成为第一响应者，或者调用View的becomeFirstResponder方法也可以，例如当UITextField调用该方法时会弹出键盘进行输入，此时输入框控件就是第一响应者。</p>

<h3>事件传递机制</h3>

<p>如上所说，，如果hit-test view不能处理当前事件，那么事件将会沿着响应者链(Responder Chain)进行传递，知道遇到能处理该事件的响应者(Responsder Object)。通过下图，我们来看看两种不同情况下得事件传递机制。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/9.png" alt="" /></p>

<p>左边的情况，接收事件的initial view如果不能处理该事件并且她不是顶层的View，则事件会往它的父View进行传递。initial view的父View获取事件后如果仍不能处理，则继续往上传递，循环这个过程。如果顶层的View还是不能处理这个事件的话，则会将事件传递给它们的ViewController，如果ViewController也不能处理，则传递给Window(UIWindow)，此时Window不能处理的话就将事件传递给Application(UIApplication)，最后如果连Application也不能处理，则废弃该事件。</p>

<p>右边图的流程唯一不同就在于，如果当前的ViewController是由层级关系的，那么当子ViewController不能处理事件时，它会将事件继续往上传递，直到传递到其Root ViewController，后面的流程就跟之前分析的一样了。</p>

<p>这就是事件响应者链的传递机制，通过这些内容，我们可以更深入的了解事件在iOS中得传递机制，对我们在实际开发中更好的理解事件操作的原理有很大的帮助，也对我们实现复杂布局进行事件处理时增添了多一份的理解。</p>

<h2>总结</h2>

<p>通过前面的内容分析，我们已经学习并了解了如下内容：</p>

<ul>
<li>Gesture Recognizers，是用来控制手势识别的过程和方法，并且其通过Action-Target模式与ViewController的通信的方式。连续和不连续手势动作情况下GestureRecognizer的状态转变。</li>
<li>UITouch和UIEvent对象，他们都是UIKit中来进行事件处理的对象，多个UITouch对象构成一个UIEvent对象，重写相应的方法可以控制和处理事件各个阶段的操作。</li>
<li>系寻找hit-test view的方式、事件传递机、制响应者链</li>
</ul>


<blockquote><p>后记：本篇是iOS事件传递机制的上篇，下篇将继续讨论多点触控事件和手势操作的内容！</p></blockquote>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/'>http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用GoAgent翻墙]]></title>
    <link href="http://ryantang.me/blog/2013/11/30/use-goagent/"/>
    <updated>2013-11-30T14:17:16+08:00</updated>
    <id>http://ryantang.me/blog/2013/11/30/use-goagent</id>
    <content type="html"><![CDATA[<blockquote><p>天朝上国，长城伟岸<br>
茫茫世界，何止一墙</p></blockquote>

<p>互联网本是个开放的世界，互联网的本质就是开放、交流和分享，无奈身在天朝，一堵伟岸的墙将我们与一些美好的事物隔离开来。有压迫的地方就总有反抗，有技术的地方就总有解决方法。虽然我们置身墙内，但还是有方法绕过这道墙去领略外面的世界，也就是我们俗称的翻墙。现在的翻墙方法有很多，网上也有一些翻墙工具下载，但大多不稳定，稳定的就要收费。既然我们是搞技术的，那就用技术手段来翻墙吧。本次要介绍的就是使用GoAgent来实现翻墙。以下操作均在Mac OS X 10.9上完成,Windows用户操作基本类似。</p>

<!--More-->


<h2>GoAgent是什么</h2>

<p>GoAgent是使用Python编写的网络软件，可以运行在Windows/Mac/Linux/Android/iTouch/iPhone/iPad/webOS/OpenWRT/Maemo上</p>

<h2>使用GoAgent有什么好处</h2>

<p>简单来说，使用GoAgent翻墙最大的好处就是稳定，不会像一些翻墙软件一样出现时常掉线的情况。俗话说，好不好，只有自己用了才知道！</p>

<h2>如何使用GoAgent</h2>

<h3>一、申请Google App Engine</h3>

<p>Google App Engine是一个网络服务挂载，我们可以将自己的服务挂载在上面，首先，我们进入<a href="https://appengine.google.com/">Google App Engine</a>，如果你有gmail账户，则直接登录即可，登录成功后我们新建一个Application</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/1.png" alt="1" /></p>

<p>新建成功后就可以看到如下信息</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/2.png" alt="2" /></p>

<p>进入Application列表我们就可以看到刚才创建的应用了。Application一列显示的就是App ID，最后一列显示了当前应用的状态，由于这是一个新应用，所以状态为None-Deployed。到这里，Google App Engine我们就配置好了。</p>

<h3>二、安装配置GoAgent</h3>

<p>进入<a href="https://code.google.com/p/goagent/">GoAgent官网</a>下载GoAgent压缩包，并解压到用户根目录下，进入GoAgent/local目录，找到proxy.ini文件并用编辑器打开。</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/3.png" alt="1" /></p>

<p>打开proxy.ini后找到appid一栏，将默认的值修改成之前注册的Google App Engine的App ID，然后保存。</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/4.png" alt="1" /></p>

<p>接下来用命令行进入GoAgent目录下的server文件夹，然后运行python uploader.zip命令将我们的应用上传到Google App Engine。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>cd GoAgent/server
</span><span class='line'>python uploader.zip
</span></code></pre></td></tr></table></div></figure>


<p>命令执行后，会要求我们输入APPID，输入我们在Google App Engine创建的App ID。</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/5.png" alt="1" /></p>

<p>输入完AppID后回车，接着会要我们输入Emial，此处输入你的Gmail邮箱地址，接下来就是输入密码。输入密码这里需要注意，如果你的Gmail开启了<code>两步验证</code>，那么你需要到Google账户设置-安全性-两步验证里去获取临时密码，如果你没有设置两步验证，那这里的密码就输入你的Gmial邮箱密码。</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/6.png" alt="1" /></p>

<p>点击“管理您的应用专用密码”进入下面界面</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/7.png" alt="1" /></p>

<p>在输入框中输入描述点击生成密码就会跳转到另外的界面，同时会看到为你生成的密码，将这个密码输入到前面的密码输入中（不要带空格），最后回车，就开始上传了。上传工程后你会看到Complete update&hellip;等信息。</p>

<p>接下来命令行进入/GoAgent/local目录，运行python proxy.py命令，就开启GoAgent服务了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>cd GoAgent/local
</span><span class='line'>python proxy.py
</span></code></pre></td></tr></table></div></figure>


<p>如果运行上述命令后你看到有WARNING信息输出，提示权限问题，这时可以找到GoAgent/local目录下CA.cer文件，双击安装这个证书，在钥匙串中就可以看到这个证书了，双击打开，并且修改权限为总是信任，重启命令窗口再运行上述命令就可以了。</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/8.png" alt="1" /></p>

<h3>三、设置浏览器代理插件</h3>

<p>Chrome可以安装这个插件<a href="https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm">SwitchySharp</a>，然后下载并在SwitchySharp设置中导入已经配置好的文件<a href="https://code.google.com/p/wwqgtxx-GoAgent/downloads/detail?name=SwitchyOptions.bak&amp;can=2&amp;q=">SwitchyOptions.bak</a></p>

<p><img src="http://ryantang.me/images/2013/11/goagent/9.png" alt="1" /></p>

<p>导入成功后就可以看到配置信息了</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/10.png" alt="1" /></p>

<p>FirFox可以安装<a href="https://addons.mozilla.org/zh-cn/firefox/addon/foxyproxy-standard/">FoxyProxy</a>插件。到这里，所有的安装和设置我们都已经完成了，接下来我们就看看如何使用GoAgent来进行翻墙。</p>

<h4>四、平时使用GoAgent翻墙</h4>

<p>1、打开命令行窗口，运行下列命令开启GoAgent服务</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>cd GoAgent/local
</span><span class='line'>python proxy.py
</span></code></pre></td></tr></table></div></figure>


<p>2、打开Chrome浏览器，将地址栏右侧的蓝色地球点开，选择代理为GoAgent</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/11.png" alt="1" /></p>

<p>好了，输入youtube.com，尽情去享受墙外的世界吧！</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/12.png" alt="1" /></p>

<p><img src="http://ryantang.me/images/2013/11/goagent/13.png" alt="1" /></p>

<p>3、不用的时候切换代理然后关闭命令行窗口即可，需要注意的是，一个Google App Engine上得Application一天只提供1G的流量限制，但是，我们可以最多申请10个Application，如果1G不够用，你可以多申请几个，然后在之前提到的proxy.ini文件中appid一项添加App ID即可，多个之间用|分割。</p>

<blockquote><p>本次关于GoAgent翻墙的介绍就到此结束了，有不足之处还望指正，如果过程中有问题可以在下面留言讨论！</p></blockquote>

<p>另外这有个叫<a href="https://github.com/ohdarling/GoAgentX">GoAgentX</a>的东东，感兴趣的自己去折腾吧！</p>

<p><a href="https://code.google.com/p/GoAgent/">More Tips About GoAgent</a></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2013/11/30/use-goagent/'>http://ryantang.me/blog/2013/11/30/use-goagent/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
</feed>
