<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ryan's Zone]]></title>
  <link href="http://ryantang.me/atom.xml" rel="self"/>
  <link href="http://ryantang.me/"/>
  <updated>2014-04-05T01:41:09+08:00</updated>
  <id>http://ryantang.me/</id>
  <author>
    <name><![CDATA[唐韧_Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2014正在发生的事]]></title>
    <link href="http://ryantang.me/blog/2014/02/07/about-2014/"/>
    <updated>2014-02-07T14:41:00+08:00</updated>
    <id>http://ryantang.me/blog/2014/02/07/about-2014</id>
    <content type="html"><![CDATA[<blockquote><p>这个世界，唯一不变的就是变化</p></blockquote>

<p>今天是大年初八，农历2014年的第一个工作日，工作的人春节假期到此结束了，上学的或许还有短暂的假期。春节前后整个互联网和移动互联网发生了大大小小的事，这些事有些续写着2013，有些延续在2014!</p>

<!--More-->


<h3>一、互联网生活</h3>

<p>有没有感觉，身边用微信的人越来越多，我这里所指的多出来的这部分是我们的父母、长辈，他们逐渐开始用上智能手机，开始接触各种各样的App，慢慢的，我们都加入了移动互联网构建的生活。如果说各种类型的网站我们父母还不怎么用，那么，各种App他们是能驾驭得了的。</p>

<p>有没有感觉，现在吃饭、娱乐、购物、出行等等生活中的一切，都可以通过手机来处理，根据当前位置来找找附近有什么好吃的、好玩的、用手机逛淘宝购物、用手机订火车票机票，回忆一下，这一切，在两年前都不曾出现在我们的生活中。</p>

<p>有没有感觉，自己越来越有了一种存在感和掌控感，发微博、发朋友圈，每一次好友的评论、转发和赞都无形在增加我们内心的存在感。手机支付缴费、购物等，让我们的消费变得简单、快速，让我们越来越容易掌控自己生活中的一切。</p>

<p>2014，随着互联网的普及和移动互联网用户的爆发式增长，生活中的方方面面将朝着移动化发展，届时，互联网没有征服的用户也会被移动互联网征服。</p>

<h3>二、互联网金融</h3>

<p>互联网金融在2013年开始风生水起，支付宝余额宝的推出，将天弘基金这支名不见经传的基金捧上高位，目前千亿级别的规模也是其他互联网理财产品后来者眼红的。余额宝抓住了很大一部分人这样的心理：有点小钱但不多，想通过这点小钱再赚点没有风险的小钱，没有时间也不想费工夫去银行听这种理财产品介绍，又想自己投入的钱能随取随用。恰好，余额宝的出现弥补了这一鸿沟，1块钱起的入门坎也使得很多屌丝一族也能高大上一回。这也许也印证了那句话，得屌丝着得天下。</p>

<p>百度、腾讯接踵而至，相继推出了自己的理财产品，不可忽视的是腾讯利用微信这个入口能大大吸收不少用户进入。目前通过微信可以直接绑定银行卡并进行移动支付，过年期间推出的微信红包也是得到了各路神仙的追捧。各种评论说明文也是道出了微信红包背后的秘密，腾讯借此机会完成了用户通过微信绑定银行卡这个动作，从而将用户拉入了自家的移动支付客户群中，微信此举，可谓是一举夺得，实在是妙。</p>

<p>2014，随着智能手机出货量和普及率的逐渐提高，智能手机用户群会越来越大，一二线城市的主体用户群基本稳定，三四线城市的用户群也逐渐从新进用户向成熟用户转变，届时，三四线城市同样会爆发同样的需求，类似余额宝这样的产品会更加被三四线城市的用户接受。</p>

<h3>三、互联网教育</h3>

<p>互联网教育或者说是在线教育在这两年也是风生水起，各种各样公司和产品的出现也使得这个市场火爆异常，但就目前的情况来看，还没有出现一家引领规范和流程的公司。针对K12（中小学）、英语、职业技能教育的互联网产品层出不穷，但总的来看都大同小异，也难怪有很多文章都说他们还没有找到在线教育的精髓，其实什么是精髓，我相信也没几个人说的出，这些后话都是需要经过长期的实践摸索和市场检验才能得出的结论。从国外引进的MOOC模式也被国内众多跟随者效仿，连淘宝都推出了淘宝同学，各大互联网巨头都在在线教育领域持续布局，具体怎么玩，看各自的游戏规则是什么了。</p>

<p>2014，互联网教育仍然会是持续的主题，各大公司会抓紧圈地布局，创业公司不断打磨各自的产品，扩大市场占有率的同时提升产品体验。教育是以结果为导向的，既学习完成后必定有结果作为衡量标准，同时，能把在线教育的过程和传统教育区分开，而不是简单的将线下教育模式照搬到线上，最终能给接受教育者在学习完成后的结果给出可衡量并且可利用的结果，或许就能解决现有存在的很多问题了。</p>

<h3>四、互联网医疗</h3>

<p>互联网医疗也是随着教育、金融而逐渐爆发的一个行业，目前已经有很多提供医疗咨询和诊断服务的公司，他们利用互联网手段完成以前传统方式无法解决的问题。降低各项成本的同时，提升了患者的用户体验。为了实现小病不进医院，大病提前知的愿景，越来越多的创业公司正在路上，让普通人都能有一个随身医生，这是多么利国利民的事。</p>

<p>2014，互联网医疗领域仍然有很长的路要走，巨头涉及还不是很多，可能会通过收购来完成布局。但政策对医疗领域的影响还是不可小视的，这里就不详述了。</p>

<h3>总结</h3>

<p>细心看看过年期间开始的各种电视广告，百度、腾讯、阿里、京东、小米都已经开始在电视上开启了广告攻势，一大波移动互联网攻势即将来袭。我们的生活将越来越深入的被互联网所影响，智能手机、可穿戴设备、智能电视、智能家居、智能汽车、物联网等等以前电影中的情节都将照进现实。2014，奋斗吧，少年！</p>

<blockquote><p>后记：我所说的不一定是对的！</p></blockquote>

<p><code>Focus on life. Focus on work. Don't let yourself regret forever! ——Ryan</code></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/02/07/about-2014/'>http://ryantang.me/blog/2014/02/07/about-2014/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android布局优化]]></title>
    <link href="http://ryantang.me/blog/2014/01/24/android-optimise-layout/"/>
    <updated>2014-01-24T20:42:44+08:00</updated>
    <id>http://ryantang.me/blog/2014/01/24/android-optimise-layout</id>
    <content type="html"><![CDATA[<h6>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/android-optimise-layout">http://www.infoq.com/cn/articles/android-optimise-layout</a>。如需转载，请与InfoQ中文站联系。</h6>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/0.png" alt="" /></p>

<p>在Android开发中，我们常用的布局方式主要有LinearLayout、RelativeLayout、FrameLayout等，通过这些布局我们可以实现各种各样的界面。与此同时，如何正确、高效的使用这些布局方式来组织UI控件，是我们构建优秀Android App的主要前提之一。本篇内容就主要围绕Android布局优化来讨论在日常开发中我们使用常用布局需要注意的一些方面，同时介绍一款SDK自带的UI性能检测工具HierarchyViewer。</p>

<!--More-->


<h2>布局原则</h2>

<p>通过一些惯用、有效的布局原则，我们可以制作出加载效率高并且复用性高的UI。简单来说，在Android UI布局过程中，需要遵守的原则包括如下几点：</p>

<ul>
<li>尽量多使用RelativeLayout，不要使用绝对布局AbsoluteLayout；</li>
<li>将可复用的组件抽取出来并通过&lt; include />标签使用；</li>
<li>使用&lt; ViewStub />标签来加载一些不常用的布局；</li>
<li>使用&lt; merge />标签减少布局的嵌套层次；</li>
</ul>


<p>由于Android的碎片化程度很高，市面上存在的屏幕尺寸也是各式各样，使用RelativeLayout能使我们构建的布局适应性更强，构建出来的UI布局对多屏幕的适配效果越好，通过指定UI控件间的相对位置，使在不同屏幕上布局的表现能基本保持一致。当然，也不是所有情况下都得使用相对布局，根据具体情况来选择和其他布局方式的搭配来实现最优布局。</p>

<h4>1、&lt; include />的使用</h4>

<p>在实际开发中，我们经常会遇到一些共用的UI组件，比如带返回按钮的导航栏，如果为每一个xml文件都设置这部分布局，一是重复的工作量大，二是如果有变更，那么每一个xml文件都得修改。还好，Android为我们提供了&lt; include />标签，顾名思义，通过它，我们可以将这些共用的组件抽取出来单独放到一个xml文件中，然后使用&lt; include />标签导入共用布局，这样，前面提到的两个问题都解决了。例如上面提到的例子，新建一个xml布局文件作为顶部导航的共用布局。</p>

<figure class='code'><figcaption><span>common_navitationbar.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>    <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_alignParentLeft=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Back&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;TextView</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_centerInParent=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Title&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们在需要引入导航栏的布局xml中通过&lt; include />导入这个共用布局。</p>

<figure class='code'><figcaption><span>main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;include</span>
</span><span class='line'>        <span class="na">android:layout_alignParentTop=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">layout=</span><span class="s">&quot;@layout/common_navitationbar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过这种方式，我们既能提高UI的制作和复用效率，也能保证制作的UI布局更加规整和易维护。布局完成后我们运行一下，可以看到如下布局效果，这就是我们刚才完成的带导航栏的界面。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/1.png" alt="" /></p>

<p>接着我们进入sdk目录下的tools文件夹下，找到HierarchyViewer并运行（此时保持你的模拟器或真机正在运行需要进行分析的App），双击我们正在显示的这个App所代表的进程。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/3.png" alt="" /></p>

<p>接下来便会进入hierarchyviewer的界面，我们可以在这里很清晰看到正在运行的UI的布局层次结构以及它们之间的关系。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/4.png" alt="" /></p>

<p>分析刚刚我们构建的导航栏布局，放大布局分析图可以看到，被include进来的common_navitationbar.xml根节点是一个RelativeLayout，而包含它的主界面main.xml根节点也是一个RelativeLayout，它前面还有一个FrameLayout等几个节点，FrameLayout就是Activity布局中默认的父布局节点，再往上是一个LinearLayout，这个LinearLayout就是包含Activity布局和状态栏的整个屏幕显示的布局父节点，这个LinearLayout还有一个子节点就是ViewStub，关于这个节点我们在后面会详细介绍。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/2.png" alt="" /></p>

<h4>2、&lt; merge />的使用</h4>

<p><merge>标签的作用是合并UI布局，使用该标签能降低UI布局的嵌套层次。该标签的主要使用场景主要包括两个，第一是当xml文件的根布局是FrameLayout时，可以用merge作为根节点。理由是因为Activity的内容布局中，默认就用了一个FrameLayout作为xml布局根节点的父节点，这一点可以从上图中看到，main.xml的根节点是一个RelativeLayout，其父节点就是一个FrameLayout，如果我们在main.xml里面使用FrameLayout作为根节点的话，这时就可以使用merge来合并成一个FrameLayout，这样就降低了布局嵌套层次。</p>

<p>我们修改一下main.xml的内容，将根节点修改为merge标签。</p>

<figure class='code'><figcaption><span>main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;merge</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/darker_gray&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;include</span> <span class="na">layout=</span><span class="s">&quot;@layout/common_navitationbar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/merge&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重新运行并打开HierarchyViewer查看此时的布局层次结构，发现之前多出来的一个RelativeLayout就没有了，直接将common_navigationbar.xml里面的内容合并到了main.xml里面。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/5.png" alt="" /></p>

<p>使用&lt; merge />的第二种情况是当用include标签导入一个共用布局时，如果父布局和子布局根节点为同一类型，可以使用merge将子节点布局的内容合并包含到父布局中，这样就可以减少一级嵌套层次。首先我们看看不使用merge的情况。我们新建一个布局文件common_navi_right.xml用来构建一个在导航栏右边的按钮布局。</p>

<figure class='code'><figcaption><span>common_navi_right.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_alignParentRight=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Ok&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后修改common_navitationbar.xml的内容，添加一个include，将右侧按钮的布局导入：</p>

<figure class='code'><figcaption><span>common_navitationbar.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>    <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_alignParentLeft=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Back&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;TextView</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_centerInParent=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Title&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;include</span> <span class="na">layout=</span><span class="s">&quot;@layout/common_center&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行后的效果如下图，在导航栏右侧添加了一个按钮“ok”</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/6.png" alt="" /></p>

<p>然后再运行HierarchyViewer看看现在的布局结构，发现common_navi_right.xml作为一个布局子节点嵌套在了common_navitationbar.xml下面。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/7.png" alt="" /></p>

<p>这时我们再将common_navi_right.xml的根节点类型改为merge。</p>

<figure class='code'><figcaption><span>common_navi_right.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;merge</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_alignParentRight=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Ok&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/merge&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重新运行并打开HierarchyViewer查看布局结构，发现之前嵌套的一个RelativeLayout就没有了，这就是使用merge的效果，能降低布局的嵌套层次。</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/8.png" alt="" /></p>

<h4>3、&lt; ViewStub />的使用</h4>

<p>也许有不少同学对ViewStub还比较陌生，首先来看看ViewStub在官方文档里是怎么介绍的：</p>

<p>A ViewStub is an invisible, zero-sized View that can be used to lazily inflate layout resources at runtime. When a ViewStub is made visible, or when inflate() is invoked, the layout resource is inflated. The ViewStub then replaces itself in its parent with the inflated View or Views. Therefore, the ViewStub exists in the view hierarchy until setVisibility(int) or inflate() is invoked. The inflated View is added to the ViewStub&rsquo;s parent with the ViewStub&rsquo;s layout parameters.</p>

<p>大致意思是：ViewStub是一个不可见的，能在运行期间延迟加载的大小为0的View，它直接继承于View。当对一个ViewStub调用inflate()方法或设置它可见时，系统会加载在ViewStub标签中引入的我们自己定义的View，然后填充在父布局当中。也就是说，在对ViewStub调用inflate()方法或设置visible之前，它是不占用布局空间和系统资源的。它的使用场景可以是在我们需要加载并显示一些不常用的View时，例如一些网络异常的提示信息等。</p>

<p>我们新建一个xml文件用来显示一个提示信息：</p>

<figure class='code'><figcaption><span>common_msg.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;TextView</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_centerInParent=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>        <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Message&quot;</span>
</span><span class='line'>        <span class="na">android:textColor=</span><span class="s">&quot;@android:color/black&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在main.xml里面加入ViewStub的标签引入上面的布局：</p>

<figure class='code'><figcaption><span>main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;merge</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/darker_gray&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;include</span> <span class="na">layout=</span><span class="s">&quot;@layout/common_navitationbar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ViewStub</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/msg_layout&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>        <span class="na">android:layout=</span><span class="s">&quot;@layout/common_msg&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/merge&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改MainActivity.java的代码，我们这里设置为点击右上角按钮的时候显示自定义的common_msg.xml的内容。</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">View</span> <span class="n">msgView</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">rightButton</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">arg0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;111&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="k">if</span><span class="o">(</span><span class="n">flag</span><span class="o">){</span>
</span><span class='line'>                  <span class="n">showMsgView</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>                  <span class="n">closeMsgView</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="n">flag</span> <span class="o">=</span> <span class="o">!</span><span class="n">flag</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">showMsgView</span><span class="o">(){</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">msgView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>          <span class="n">msgView</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">ViewStub</span> <span class="n">stub</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewStub</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">msg_layout</span><span class="o">);</span>
</span><span class='line'>        <span class="n">msgView</span> <span class="o">=</span> <span class="n">stub</span><span class="o">.</span><span class="na">inflate</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">closeMsgView</span><span class="o">(){</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">msgView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>          <span class="n">msgView</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">GONE</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中我们通过flag来切换显示和隐藏common_msg.xml的内容，然后我们运行一下并点击右上角按钮来切换，效果如下：</p>

<p><img src="http://ryantang.me/images/2014/01/android_optimise_layout/9.png" alt="" /></p>

<h2>总结</h2>

<p>好了，到目前为止，我们就介绍了Android中关于布局优化的一些内容以及工具HierarchyViewer的使用。将前文提及的布局原则再列一下，欢迎大家补充更多的关于Android布局优化的实用原则。</p>

<ul>
<li>尽量多使用RelativeLayout，不要使用绝对布局AbsoluteLayout；</li>
<li>将可复用的组件抽取出来并通过&lt; include />标签使用；</li>
<li>使用&lt; ViewStub />标签来加载一些不常用的布局；</li>
<li>使用&lt; merge />标签减少布局的嵌套层次；</li>
</ul>


<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/01/24/android-optimise-layout/'>http://ryantang.me/blog/2014/01/24/android-optimise-layout/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CocoaPods管理依赖库]]></title>
    <link href="http://ryantang.me/blog/2014/01/05/cocoapods/"/>
    <updated>2014-01-05T20:16:17+08:00</updated>
    <id>http://ryantang.me/blog/2014/01/05/cocoapods</id>
    <content type="html"><![CDATA[<blockquote><p>工欲善其事，必先利其器</p></blockquote>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/1.png" alt="" /></p>

<p>本篇内容将介绍Mac和iOS开发中必备的一个依赖库管理工具<a href="https://github.com/CocoaPods/CocoaPods">CocoaPods</a>。</p>

<!--More-->


<h2>CocoaPods是什么</h2>

<p>在iOS开发中势必会用到一些第三方依赖库，比如大家都熟悉的ASIHttpRequest、AFNetworking、JSONKit等。使用这些第三方类库能极大的方便项目的开发，但是，集成这些依赖库需要我们手动去配置，例如集成ASIHttpRequest库时除了加入源码以外还需要手动去添加一些系统的framework，CFNetwork、MobileCoreServices等，如果这些第三方库发生了更新，还需要手动去更新项目。这就显得非常麻烦。有麻烦自然有解决办法，CocoaPods就是为了解决这个问题而生的。通过CocoaPods，我们可以将第三方的依赖库统一管理起来，配置和更新只需要通过简单的几行命令即可完成，大大的提高了实际开发中的工作效率，使我们的主要精力集中到更重要的事情上去。</p>

<h2>安装CocoaPods</h2>

<p>我的环境为Mac OS X 10.9.1，安装CocoaPods之前，先确保本地有Ruby环境，因为CocoaPods运行于Ruby之上，默认情况下，Mac是自带了Ruby环境的，可以通过命令行<code>ruby -v</code>查看当前Ruby的版本，我用的是1.9.3p448。接下来我们就可以通过如下命令安装CocoaPods了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo gem install cocoapods</span></code></pre></td></tr></table></div></figure>


<p>输入上述命令后可能会无响应，那是因为你身在天朝，伟大的墙拦住了你的去路，不知为什么，cocoapods.org这种无害产物也要被墙。不过没关系，我们可以通过淘宝的Ruby镜像来访问Cocoapods，在终端输入如下命令将Ruby镜像替换为淘宝的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem sources --remove https://rubygems.org/
</span><span class='line'>$ gem sources -a http://ruby.taobao.org/</span></code></pre></td></tr></table></div></figure>


<p>完成后可以通过如下命令来查看当前的Ruby镜像是否已经指向了淘宝的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem sources -l</span></code></pre></td></tr></table></div></figure>


<p>如果输出结果是如下这样，那说明这一步就成功了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*** CURRENT SOURCES ***
</span><span class='line'>
</span><span class='line'>http://ruby.taobao.org/</span></code></pre></td></tr></table></div></figure>


<p>接下来就可以重新运行安装命令来安装CocoaPods了，根据你的网络情况，几秒或十几秒后安装过程就完成了，总的来说，安装过程还是比较简单的。如果其中你遇到了什么问题，请自行Google解决，都能找到你想要的答案。</p>

<h2>使用CocoaPods</h2>

<p>我们通过集成JSONKit类库来演示如何使用CocoaPods来做依赖库管理。首先，建立一个xcode工程，命名为CocoaPodsTest，现在的工程结构如下图所示。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/2.png" alt="" /></p>

<p>这里我们要集成JSONKit，可以先通过如下命令来判断其是否支持CocoaPods。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod search JSONKit</span></code></pre></td></tr></table></div></figure>


<p>执行后通过输出结果可以看到JSONKit是支持CocoaPods的，注意红框标记的内容，这是待会我们配置xcode时需要的信息，这条配置项就是告诉CocoaPods去下载和管理哪一个第三方库。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/3.png" alt="" /></p>

<p>检测完毕后我们来到工程CocoaPodsTest的目录下，新建一个名为Podfile的文件（这里通过命令行创建）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim Podfile</span></code></pre></td></tr></table></div></figure>


<p>这个Podfile文件的作用是配置依赖库信息，就是告诉CocoaPods去下载和管理哪些依赖库，文件创建好以后，打开文件并加入如下内容。（vim打开文件后按i进入插入模式，编辑完成后按esc退出编辑模式，接着输入:wq保存并退出文件）</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/4.png" alt="" /></p>

<p>这时候，工程目录下就会有一个Podfile文件了，注意必须和.xcodeproj在同一个目录下。接下来就可以使用CocoaPods来安装并管理JSONKit库了，确保命令行当前路径是在CocoaPodsTest目录下，运行如下命令。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod install</span></code></pre></td></tr></table></div></figure>


<p>安装完成后会提示如下信息，并且我们的工程目录下会多出一个.xcworkspace结尾的文件，命令行信息绿色部分提醒我们“从此使用CocoaPodsTest.xcworkspace来打开项目”。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/5.png" alt="" /></p>

<p>通过CocoaPodsTest.xcworkspace来打开项目，这时，我们的项目工程结构就会变成下图这样，多出一个名为Pods的依赖工程，打开Pods文件夹后，发现JSONKit已经在里面了</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/6.png" alt="" /></p>

<p>这时候就可以在项目文件中引入JSONKit.h了，这时候如果你发现import的时候没有提示JSONKit的文件，可以在target-Build Settings下修改“User Header Search Paths”项，新增${SRCROOT}并选择rcursive，如下图。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/7.png" alt="" /></p>

<p>设置完成后就可以在文件中直接引用第三方库的文件并使用了。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/8.png" alt="" /></p>

<p>到此，新建工程并使用CocoaPods来管理依赖库的过程就完成了，如果是直接使用已有CocoaPods的项目，则需要首先运行一下pod update命令来更新项，然后照样通过.xcworkspace来打开工程。</p>

<p>如果需要依赖多个第三方类库，只需要修改Podfile文件的配置，然后运行pod update命令即可，比如新增一个AFNetworking的依赖库，首先执行pod search AFNetworking查看一下AFNetworking的配置信息，修改Podfile文件，在后面增加AFNetworking的对应配置信息，然后运行pod update命令就完成了对AFNetworking的集成。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/9.png" alt="" /></p>

<p>添加AFNetworking库后的目录结构如下。</p>

<p><img src="http://ryantang.me/images/2014/01/cocoapods/10.png" alt="" /></p>

<p>如果类库有更新，查看更新配置并执行pod update即可简单完成了，从此从手动更新繁重的体力劳动中解脱出来。</p>

<p>简单小结一下：</p>

<ul>
<li>安装CocoaPods</li>
<li>新建项目并在工程根目录下新建Podfile文件，配置需要管理的第三方库</li>
<li>运行pod install下载安装第三方库</li>
</ul>


<h6>更多内容请参考<a href="http://guides.cocoapods.org/">CocoaPods Guides</a></h6>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/01/05/cocoapods/'>http://ryantang.me/blog/2014/01/05/cocoapods/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android事件传递机制]]></title>
    <link href="http://ryantang.me/blog/2014/01/02/android-event-dispatch/"/>
    <updated>2014-01-02T10:12:13+08:00</updated>
    <id>http://ryantang.me/blog/2014/01/02/android-event-dispatch</id>
    <content type="html"><![CDATA[<h6>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/android-event-delivery-mechanism">http://www.infoq.com/cn/articles/android-event-delivery-mechanism</a>。如需转载，请与InfoQ中文站联系。</h6>

<blockquote><p>运用的前提是掌握</br>
掌握的本质是理解</p></blockquote>

<p>本篇内容将结合Android源码来分析Android的事件传递机制。众所周知，点按、滑动、触摸构成了Android等智能设备的基本操作，几乎所有的应用都通过对触摸屏的操作来进行应用程序的使用。那么，在Android中，触摸事件是如何响应及传递的呢，通过本篇内容你将有一个初步的了解。</p>

<!--More-->


<h4>实验环境</h4>

<ul>
<li>OS X 10.9</li>
<li>Eclipse(ADT)</li>
<li>Android源码版本：API Level 19（Android 4.4）</li>
</ul>


<h2>Android事件构成</h2>

<p>在Android中，事件主要包括点按、长按、拖拽、滑动等，点按又包括单击和双击，另外还包括单指操作和多指操作。所有这些都构成了Android中得事件响应。总的来说，所有的事件都由如下三个部分作为基础：</p>

<ul>
<li>按下（ACTION_DOWN）</li>
<li>移动（ACTION_MOVE）</li>
<li>抬起（ACTION_UP）</li>
</ul>


<p>所有的操作事件首先必须执行的是按下操作（ACTION_DOWN），之后所有的操作都是以按下操作作为前提，当按下操作完成后，接下来可能是一段移动（ACTION_MOVE）然后抬起（ACTION_UP），或者是按下操作执行完成后没有移动就直接抬起。这一系列的动作在Android中都可以进行控制。</p>

<p>我们知道，所有的事件操作都发生在触摸屏上，而在屏幕上与我们交互的就是各种各样的视图组件（View），在Android中，所有的视图都继承于View，另外通过各种布局组件（ViewGroup）来对View进行布局，ViewGroup也继承于View。所有的UI控件例如Button、TextView都是继承于View，而所有的布局控件例如RelativeLayout、容器控件例如ListView都是继承于ViewGroup。所以，我们的事件操作主要就是发生在View和ViewGroup之间，那么View和ViewGroup中主要有哪些方法来对这些事件进行响应呢？记住如下3个方法，我们通过查看View和ViewGroup的源码可以看到：</p>

<figure class='code'><figcaption><span>View.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ViewGroup.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在View和ViewGroup中都存在dispatchTouchEvent和onTouchEvent方法，但是在ViewGroup中还有一个onInterceptTouchEvent方法，那这些方法都是干嘛的呢？别急，我们先看看他们的返回值。这些方法的返回值全部都是<code>boolean</code>型，为什么是boolean型呢，看看本文的标题，“事件传递”，传递的过程就是一个接一个，那到了某一个点后是否要继续往下传递呢？你发现了吗，“是否”二字就决定了这些方法应该用boolean来作为返回值。没错，这些方法都返回true或者是false。在Android中，所有的事件都是从开始经过传递到完成事件的消费，这些方法的返回值就决定了某一事件是否是继续往下传，还是被拦截了，或是被消费了。</p>

<p>接下来就是这些方法的参数，都接受了一个<code>MotionEvent</code>类型的参数，MotionEvent继承于InputEvent，用于标记各种动作事件。之前提到的ACTION_DOWN、ACTION_MOVE、ACTION_UP都是MotinEvent中定义的常量。我们通过MotionEvent传进来的事件类型来判断接收的是哪一种类型的事件。到现在，这三个方法的返回值和参数你应该都明白了，接下来就解释一下这三个方法分别在什么时候处理事件。</p>

<ul>
<li><code>dispatchTouchEvent</code>方法用于事件的分发，Android中所有的事件都必须经过这个方法的分发，然后决定是自身消费当前事件还是继续往下分发给子控件处理。返回true表示不继续分发，事件没有被消费。返回false则继续往下分发，如果是ViewGroup则分发给onInterceptTouchEvent进行判断是否拦截该事件。</li>
<li><code>onTouchEvent</code>方法用于事件的处理，返回true表示消费处理当前事件，返回false则不处理，交给子控件进行继续分发。</li>
<li><code>onInterceptTouchEvent</code>是ViewGroup中才有的方法，View中没有，它的作用是负责事件的拦截，返回true的时候表示拦截当前事件，不继续往下分发，交给自身的onTouchEvent进行处理。返回false则不拦截，继续往下传。这是ViewGroup特有的方法，因为ViewGroup中可能还有子View，而在Android中View中是不能再包含子View的（iOS可以）。</li>
</ul>


<p>到目前为止，Android中事件的构成以及事件处理方法的作用你应该比较清楚了，接下来我们就通过一个Demo来实际体验实验一下。</p>

<h2>Android事件处理</h2>

<p>首先在Eclipse新建一个工程，并新建一个类RTButton继承Button，用来实现我们对按钮事件的跟踪。</p>

<figure class='code'><figcaption><span>RTButton.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RTButton</span> <span class="kd">extends</span> <span class="n">Button</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">RTButton</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---dispatchTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---dispatchTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---dispatchTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---onTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---onTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---onTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在RTButton中我重写了dispatchTouchEvent和onTouchEvent方法，并获取了MotionEvent各个事件状态，打印输出了每一个状态下的信息。然后在activity_main.xml中直接在根布局下放入自定义的按钮RTButton。</p>

<figure class='code'><figcaption><span>activity_main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:id=</span><span class="s">&quot;@+id/myLayout&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;com.ryantang.eventdispatchdemo.RTButton</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/btn&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Button&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来在Activity中为RTButton设置onTouch和onClick的监听器来跟踪事件传递的过程，另外，Activity中也有一个dispatchTouchEvent方法和一个onTouchEvent方法，我们也重写他们并输出打印信息。</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">RTButton</span> <span class="n">button</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>      <span class="n">button</span> <span class="o">=</span> <span class="o">(</span><span class="n">RTButton</span><span class="o">)</span><span class="k">this</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btn</span><span class="o">);</span>
</span><span class='line'>      <span class="n">button</span><span class="o">.</span><span class="na">setOnTouchListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnTouchListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouch</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">,</span> <span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---onTouch---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">break</span><span class="o">;</span>
</span><span class='line'>              <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---onTouch---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">break</span><span class="o">;</span>
</span><span class='line'>              <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton---onTouch---UP&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">break</span><span class="o">;</span>
</span><span class='line'>              <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                  <span class="k">break</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">button</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTButton clicked!&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Activity---dispatchTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Activity---dispatchTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Activity---dispatchTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Activity---onTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Activity---onTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Activity---onTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码部分已经完成了，接下来运行工程，并点击按钮，查看日志输出信息，我们可以看到如下结果：</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/2.png" alt="" /></p>

<p>通过日志输出可以看到，首先执行了Activity的dispatchTouchEvent方法进行事件分发，在<code>MainActivity.java</code>代码第55行，dispatchTouchEvent方法的返回值是super.dispatchTouchEvent(event)，因此调用了父类方法，我们进入<code>Activity.java</code>的源码中看看具体实现。</p>

<figure class='code'><figcaption><span>Activity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Called to process touch screen events.  You can override this to</span>
</span><span class='line'><span class="cm"> * intercept all touch screen events before they are dispatched to the</span>
</span><span class='line'><span class="cm"> * window.  Be sure to call this implementation for touch screen events</span>
</span><span class='line'><span class="cm"> * that should be handled normally.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @param ev The touch screen event.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @return boolean Return true if this event was consumed.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ev</span><span class="o">.</span><span class="na">getAction</span><span class="o">()</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">onUserInteraction</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">getWindow</span><span class="o">().</span><span class="na">superDispatchTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从源码中可以看到，dispatchTouchEvent方法只处理了ACTION_DOWN事件，前面提到过，所有的事件都是以按下为起点的，所以，Android认为当ACTION_DOWN事件没有执行时，后面的事件都是没有意义的，所以这里首先判断ACTION_DOWN事件。如果事件成立，则调用了onUserInteraction方法，该方法可以在Activity中被重写，在事件被分发前会调用该方法。该方法的返回值是void型，不会对事件传递结果造成影响，接着会判断getWindow().superDispatchTouchEvent(ev)的执行结果，看看它的源码：</p>

<figure class='code'><figcaption><span>Activity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Used by custom windows, such as Dialog, to pass the touch screen event</span>
</span><span class='line'><span class="cm"> * further down the view hierarchy. Application developers should</span>
</span><span class='line'><span class="cm"> * not need to implement or call this.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">boolean</span> <span class="nf">superDispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过源码注释我们可以了解到这是个抽象方法，用于自定义的Window，例如自定义Dialog传递触屏事件，并且提到开发者不需要去实现或调用该方法，系统会完成，如果我们在MainActivity中将dispatchTouchEvent方法的返回值设为true，那么这里的执行结果就为true，从而不会返回执行onTouchEvent(ev)，如果这里返回false，那么最终会返回执行onTouchEvent方法，由此可知，接下来要调用的就是onTouchEvent方法了。别急，通过日志输出信息可以看到，ACTION_DOWN事件从Activity被分发到了RTButton，接着执行了onTouch和onTouchEvent方法，为什么先执行onTouch方法呢？我们到RTButton中的dispatchTouchEvent看看View中的源码是如何处理的。</p>

<figure class='code'><figcaption><span>View.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Pass the touch screen motion event down to the target view, or this</span>
</span><span class='line'><span class="cm"> * view if it is the target.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param event The motion event to be dispatched.</span>
</span><span class='line'><span class="cm"> * @return True if the event was handled by the view, false otherwise.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mInputEventConsistencyVerifier</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mInputEventConsistencyVerifier</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">onFilterTouchEventForSecurity</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//noinspection SimplifiableIfStatement</span>
</span><span class='line'>        <span class="n">ListenerInfo</span> <span class="n">li</span> <span class="o">=</span> <span class="n">mListenerInfo</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">li</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">li</span><span class="o">.</span><span class="na">mOnTouchListener</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">mViewFlags</span> <span class="o">&amp;</span> <span class="n">ENABLED_MASK</span><span class="o">)</span> <span class="o">==</span> <span class="n">ENABLED</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span> <span class="n">li</span><span class="o">.</span><span class="na">mOnTouchListener</span><span class="o">.</span><span class="na">onTouch</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mInputEventConsistencyVerifier</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mInputEventConsistencyVerifier</span><span class="o">.</span><span class="na">onUnhandledEvent</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>挑选关键代码进行分析，可以看代码第16行，这里有几个条件，当几个条件都满足时该方法就返回true，当条件li.mOnTouchListener不为空时，通过在源码中查找，发现mOnTouchListener实在以下方法中进行设置的。</p>

<figure class='code'><figcaption><span>View.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Register a callback to be invoked when a touch event is sent to this view.</span>
</span><span class='line'><span class="cm"> * @param l the touch listener to attach to this view</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setOnTouchListener</span><span class="o">(</span><span class="n">OnTouchListener</span> <span class="n">l</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">getListenerInfo</span><span class="o">().</span><span class="na">mOnTouchListener</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法就已经很熟悉了，就是我们在<code>MainActivity.java</code>中为RTButton设置的onTouchListener，条件(mViewFlags &amp; ENABLED_MASK) == ENABLED判断的是当前View是否是ENABLE的，默认都是ENABLE状态的。接着就是li.mOnTouchListener.onTouch(this, event)条件，这里调用了onTouch方法，该方法的调用就是我们在<code>MainActivity.java</code>中为RTButton设置的监听回调，如果该方法返回true，则整个条件都满足，dispatchTouchEvent就返回true，表示该事件就不继续向下分发了，因为已经被onTouch消费了。</p>

<p>如果onTouch返回的是false，则这个判断条件不成立，接着执行onTouchEvent(event)方法进行判断，如果该方法返回true，表示事件被onTouchEvent处理了，则整个dispatchTouchEvent就返回true。到这里，我们就可以回答之前提出的“为什么先执行onTouch方法”的问题了。到目前为止，ACTION_DOWN的事件经过了从Activity到RTButton的分发，然后经过onTouch和onTouchEvent的处理，最终，ACTION_DOWN事件交给了RTButton得onTouchEvent进行处理。</p>

<p>当我们的手（我这里用的Genymotion然后用鼠标进行的操作，用手的话可能会执行一些ACTION_MOVE操作）从屏幕抬起时，会发生ACTION_UP事件。从之前输出的日志信心中可以看到，ACTION_UP事件同样从Activity开始到RTButton进行分发和处理，最后，由于我们注册了onClick事件，当onTouchEvent执行完毕后，就调用了onClick事件，那么onClick是在哪里被调用的呢？继续回到<code>View.java</code>的源代码中寻找。由于onTouchEvent在<code>View.java</code>中的源码比较长，这里就不贴出来了，感兴趣的可以自己去研究一下，通过源码阅读，我们在ACTION_UP的处理分支中可以看到一个<code>performClick()</code>方法，从这个方法的源码中可以看到执行了哪些操作。</p>

<figure class='code'><figcaption><span>View.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Call this view&#39;s OnClickListener, if it is defined.  Performs all normal</span>
</span><span class='line'><span class="cm"> * actions associated with clicking: reporting accessibility event, playing</span>
</span><span class='line'><span class="cm"> * a sound, etc.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return True there was an assigned OnClickListener that was called, false</span>
</span><span class='line'><span class="cm"> *         otherwise is returned.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">performClick</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sendAccessibilityEvent</span><span class="o">(</span><span class="n">AccessibilityEvent</span><span class="o">.</span><span class="na">TYPE_VIEW_CLICKED</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ListenerInfo</span> <span class="n">li</span> <span class="o">=</span> <span class="n">mListenerInfo</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">li</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">li</span><span class="o">.</span><span class="na">mOnClickListener</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">playSoundEffect</span><span class="o">(</span><span class="n">SoundEffectConstants</span><span class="o">.</span><span class="na">CLICK</span><span class="o">);</span>
</span><span class='line'>        <span class="n">li</span><span class="o">.</span><span class="na">mOnClickListener</span><span class="o">.</span><span class="na">onClick</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在if分支里可以看到执行了li.mOnClickListener.onClick(this);这句代码，这里就执行了我们为RTButton实现的onClick方法，所以，到目前为止，可以回答前一个“onClick是在哪里被调用的呢？”的问题了，onClick是在onTouchEvent中被执行的，并且，onClick要后于onTouch的执行。</p>

<p>到此，点击按钮的事件传递就结束了，我们结合源代码窥探了其中的执行细节，如果我们修改各个事件控制方法的返回值又会发生什么情况呢，带着这个问题，进入下一节的讨论。</p>

<h2>Android事件拦截</h2>

<p>从上一节分析中，我们知道了在Android中存在哪些事件类型，事件的传递过程以及在源码中对应哪些处理方法。我们可以知道在Android中，事件是通过层级传递的，一次事件传递对应一个完整的层级关系，例如上节中分析的ACTION_DOWN事件从Activity传递到RTButton，ACTION_UP事件也同样。结合源码分析各个事件处理的方法，也可以明确看到事件的处理流程。</p>

<p>之前提过，所有事件处理方法的返回值都是boolean类型的，现在我们来修改这个返回值，首先从Aactivity开始，根据之前的日志输出结果，首先执行的是Activity的dispatchTouchEvent方法，现在将之前的返回值super.dispatchTouchEvent(event)修改为true，然后重新编译运行并点击按钮，看到如下的日志输出结果。</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/1.png" alt="" /></p>

<p>可以看到，事件执行到dispatchTouchEvent方法就没有再继续往下分发了，这也验证了之前的说法，返回true时，不再继续往下分发，从之前分析过的Activity的dispatchTouchEvent源码中也可知，当返回true时，就没有去执行onTouchEvent方法了。</p>

<p>接着，将上述修改还原，让事件在Activity这继续往下分发，接着就分发到了RTButton，将RTButton的dispatchTouchEvent方法的返回值修改为true，重新编译运行并查看输出日志结果。</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/3.png" alt="" /></p>

<p>从结果可以看到，事件在RTButton的dispatchTouchEvent方法中就没有再继续往下分发了。接着将上述修改还原，将RTButton的onTouchEvent方法返回值修改为true，让其消费事件，根据之前的分析，onClick方法是在onTouchEvent方法中被调用的，事件在这被消费后将不会调用onClick方法了，编译运行，得到如下日志输出结果。</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/4.png" alt="" /></p>

<p>跟分析结果一样，onClick方法并没有被执行，因为事件在RTButton的onTouchEvent方法中被消费了。下图是整个事件传递的流程图。</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/7.png" alt="" /></p>

<p>到目前为止，Android中的事件拦截机制就分析完了。但这里我们只讨论了单布局结构下单控件的情况，如果是嵌套布局，那情况又是怎样的呢？接下来我们就在嵌套布局的情况下对Android的事件传递机制进行进一步的探究和分析。</p>

<h2>Android嵌套布局事件传递</h2>

<p>首先，新建一个类RTLayout继承于LinearLayout，同样重写dispatchTouchEvent和onTouchEvent方法，另外，还需要重写onInterceptTouchEvent方法，在文章开头介绍过，这个方法只有在ViewGroup和其子类中才存在，作用是控制是否需要拦截事件。这里不要和dispatchTouchEvent弄混淆了，后者是控制对事件的分发，并且后者要先执行。</p>

<p>那么，事件是先传递到View呢，还是先传递到ViewGroup的？通过下面的分析我们可以得出结论。首先，我们需要对工程代码进行一些修改。</p>

<figure class='code'><figcaption><span>RTLayout.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RTLayout</span> <span class="kd">extends</span> <span class="n">LinearLayout</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">RTLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---dispatchTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---dispatchTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---dispatchTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onInterceptTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onInterceptTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onInterceptTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onInterceptTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onTouchEvent---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onTouchEvent---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onTouchEvent---UP&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>同时，在布局文件中为RTButton添加一个父布局，指明为自定义的RTLayout，修改后的布局文件如下。</p>

<figure class='code'><figcaption><span>activity_main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;com.ryantang.eventdispatchdemo.RTLayout</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/myLayout&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;com.ryantang.eventdispatchdemo.RTButton</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/btn&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Button&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/com.ryantang.eventdispatchdemo.RTLayout&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，我们在Activity中也为RTLayout设置onTouch和onClick事件，在MainActivity中添加如下代码。</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">rtLayout</span><span class="o">.</span><span class="na">setOnTouchListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnTouchListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouch</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">,</span> <span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onTouch---DOWN&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onTouch---MOVE&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout---onTouch---UP&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>  
</span><span class='line'><span class="n">rtLayout</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RTLayout clicked!&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码修改完毕后，编译运行工程，同样，点击按钮，查看日志输出结果如下：</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/5.png" alt="" /></p>

<p>从日志输出结果我们可以看到，嵌套了RTLayout以后，事件传递的顺序变成了Activity->RTLayout->RTButton，这也就回答了前面提出的问题，Android中事件传递是从ViewGroup传递到View的，而不是反过来传递的。</p>

<p>从输出结果第三行可以看到，执行了RTLayout的onInterceptTouchEvent方法，该方法的作用就是判断是否需要拦截事件，我们到ViewGroup的源码中看看该方法的实现。</p>

<figure class='code'><figcaption><span>ViewGroup.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法的实现很简单，只返回了一个false。那么这个方法是在哪被调用的呢，通过日志输出分析可知它是在RTLayout的dispatchTouchEvent执行后执行的，那我们就进到dispatchTouchEvent源码里面去看看。由于源码比较长，我将其中的关键部分截取出来做解释说明。</p>

<figure class='code'><figcaption><span>ViewGroup.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Check for interception.</span>
</span><span class='line'><span class="kd">final</span> <span class="kt">boolean</span> <span class="n">intercepted</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">actionMasked</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span>
</span><span class='line'>                    <span class="o">||</span> <span class="n">mFirstTouchTarget</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">disallowIntercept</span> <span class="o">=</span> <span class="o">(</span><span class="n">mGroupFlags</span> <span class="o">&amp;</span> <span class="n">FLAG_DISALLOW_INTERCEPT</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">disallowIntercept</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">intercepted</span> <span class="o">=</span> <span class="n">onInterceptTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">ev</span><span class="o">.</span><span class="na">setAction</span><span class="o">(</span><span class="n">action</span><span class="o">);</span> <span class="c1">// restore action in case it was changed</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">intercepted</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// There are no touch targets and this action is not an initial down</span>
</span><span class='line'>                <span class="c1">// so this view group continues to intercept touches.</span>
</span><span class='line'>                <span class="n">intercepted</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从这部分代码中可以看到onInterceptTouchEvent调用后返回值被赋值给intercepted，该变量控制了事件是否要向其子控件分发，所以它起到拦截的作用，如果onInterceptTouchEvent返回false则不拦截，如果返回true则拦截当前事件。我们现在将RTLayout中的该方法返回值修改为true，并重新编译运行，然后点击按钮，查看输出结果如下。</p>

<p><img src="http://ryantang.me/images/2013/12/android_event_dispatch/6.png" alt="" /></p>

<p>可以看到，我们明明点击的按钮，但输出结果显示RTLayout点击事件被执行了，再通过输出结果分析，对比上次的输出结果，发现本次的输出结果完全没有RTButton的信息，没错，由于onInterceptTouchEvent方法我们返回了true，在这里就将事件拦截了，所以他不会继续分发给RTButton了，反而交给自身的onTouchEvent方法执行了，理所当然，最后执行的就是RTLayout的点击事件了。</p>

<h2>总结</h2>

<p>以上我们对Android事件传递机制进行了分析，期间结合系统源码对事件传递过程中的处理情况进行了探究。通过单布局情况和嵌套布局情况下的事件传递和处理进行了分析，现总结如下：</p>

<ul>
<li>Android中事件传递按照从上到下进行层级传递，事件处理从Activity开始到ViewGroup再到View。</li>
<li>事件传递方法包括<code>dispatchTouchEvent</code>、<code>onTouchEvent</code>、<code>onInterceptTouchEvent</code>，其中前两个是View和ViewGroup都有的，最后一个是只有ViewGroup才有的方法。这三个方法的作用分别是负责事件分发、事件处理、事件拦截。</li>
<li>onTouch事件要先于onClick事件执行，onTouch在事件分发方法dispatchTouchEvent中调用，而onClick在事件处理方法onTouchEvent中被调用，onTouchEvent要后于dispatchTouchEvent方法的调用。</li>
</ul>


<blockquote><p>后记：本文结合Android系统源码对事件传递机制进行了深入剖析，结合实例分析了事件传递和处理过程。不足之处还望指正。</p></blockquote>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/01/02/android-event-dispatch/'>http://ryantang.me/blog/2014/01/02/android-event-dispatch/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2013——前进并思考着]]></title>
    <link href="http://ryantang.me/blog/2014/01/01/my-2013/"/>
    <updated>2014-01-01T09:34:24+08:00</updated>
    <id>http://ryantang.me/blog/2014/01/01/my-2013</id>
    <content type="html"><![CDATA[<blockquote><p>春去冬来又一年，前进并思考着！</p></blockquote>

<p><img src="http://ryantang.me/images/2014/01/my_2013/1.png" alt="1" /></p>

<p>2013已经过去，今天是2014年1月1日，新年伊始！刚刚过去的2013年我经历了很多事情，有过希望、有过激情、有过彷徨、有过犹豫、有过无助、有过力量、有过憧憬。太多的太多，今天，在这里，一并回顾总结一下，作为向过去的告别和对未来的迎接！</p>

<!--More-->


<p>时间总是悄无声息的悄悄溜过，回看第一篇年度总结<a href="http://blog.csdn.net/ryantang03/article/details/8575889">《我的2012——移动开发在路上》</a>，至今仍是感慨颇深。人总是要向前看，无论经历什么，我们都该感谢，因为正是这些经历在不断的锻造我们，使我们成长、成熟。我为2013年的年度总结命名为“我的2013——前进并思考着”，一方面我还在自己的道路上前进着，另一方面，包含了我对过去一年更多的是思考，思考所做的事情、思考未来的方向。本篇，我仍将按照去年总结中的几方面，围绕着我的学习、工作、生活三方面进行整理。</p>

<h2>第一部分：学习</h2>

<p>说起学习，不得不说的一件事是我完成了研究生阶段的学习并顺利通过了毕业答辩，就此便完成了我人生前段18年的学生生涯。说起来，这应该就是我在2013年所经历的最大、最有意义的一件事了。至此，宣告了我现阶段学生生涯的结束，但学无止境，谁知道以后会怎样呢？</p>

<p>我在2013年的学习，总的来说更多的是在实践中去总结、在实践中去思考。没有了学校书本课程的束缚，学习的内容来源成了工作实践和平时总结。对比书本学习和工作实践，我觉得前者给我们的是一种规范和框架，只需要了解这个规范或者约定，然后照章运用即可，而后者需要推陈出新，不仅仅是需要遵照规范，更多的是需要理解核心要义，能在现有规范的条件下提炼出自己的见解，面对难题，能提出基于自己理解的解决方案。也许，学习和工作的最主要差别就是，学习只需要弄懂，然后做题，而工作需要解决问题并优化解决方案。</p>

<p>关于学习方法，我在2013年一直沿用专题专攻的方式，好比我在实践中或平时学习中遇到什么问题，如果我感兴趣或是觉得这个问题的解决方案对其他很多方面都通用的话，我便乐于去深入弄明白其中的要义，这个过程可能会很痛苦，毕竟很多问题都是之前没碰到过的，也许为了解决一个问题会需要去先解决其他几个子问题，但整个过程下来的结果肯定是收获颇丰的。我写博客的过程基本就是这个样子。好处显而易见，第一，这个过程能锻炼耐心；第二，这是个发现问题解决问题的过程；第三，这是个使自己在这个专题里精通的机会。对于这三点，如果做好了，日积月累，今后的我们也会感谢如今艰苦奋斗的自己。作为一个新人，我还在这条路上前进着、思考着！</p>

<p>关于学习时间安排，对于这个问题，我的看法其实很简单，学习并不一定需要专门的时间，一个小间隙、一次茶余饭后的谈论，甚至是一次蹲洗手间的时间都可以用来解决一个问题。当然，前提是自己关心这个问题，喜欢解决问题，而这些大前提就是自己喜欢正在做的工作，如果自己所做的事不是自己所喜欢的，那么这一定是痛苦的，也就不会有上面这些场景，更不会有心情去发现和解决问题了。其实，每一天我们可以利用的学习时间很多，如果你需要坐地铁公交上班，现在各种学习内容App也是满地开花，利用好路上干等的这段时间是不是比抱怨地铁公交的拥挤要更有意义呢！每天饭后一到两个小时的时间花在和同学同事谈天说地、饭后散步、抽烟小憩，还不如把这个时间的三分之二或一半花在了解一下最新的技术进展和某一个问题的最新解决方案，这里带来的收益要远远超过无聊的打发。每天回去需要花一到两个小时看看电影、玩玩游戏的少年们，如果能把这个时间的一半拿出来去总结总结当天的问题和收获，长此以往，提升远比在游戏里等级的提升带来的成就感要大。仔细算算，每天至少能拿出一到两个小时来学习，何乐而不为呢。以上这些，如果你说我没有生活情趣，一味只知道学习，也对，因为我就是这么做的，嘿嘿！或者五年或者十年，对比下我们的同龄人或者后辈，也许会发现问题，或者也可以看看本篇第三部分。</p>

<p>2013年学习及取得成果总结：</p>

<ul>
<li>Android的学习内容来源更多的是阅读官方文档和国外知名技术博客，并开始从源码去了解每一个知识点的内部机制；</li>
<li>iOS的学习以专题为主，阅读国内外优秀技术博客吸取学习内容，同时开始喜欢上官方文档的阅读。</li>
<li>阅读过的书籍《精益创业》、《淘宝技术这十年》、《正能量》、《大数据时代》；</li>
<li>参加行业活动、会议、论坛6场，学习到很多前沿内容，听取了很多实用的分享；</li>
<li>完成博客文章37篇，CSDN博客点击量52W，将博客内容更新迁移到Octopress，创建维护QQ群4个，群成员近2000人，创建微信公众账号“Android及iOS开发汇总”，订阅人数1026人，线上结识很多志同道合的好朋友。</li>
</ul>


<h2>第二部分：工作</h2>

<p>在2013年，对于工作，有实践、有思考，毕竟临近毕业，需要为今后的职业发展做一个初步规划，选择什么样的工作，加入什么样的公司和团队，自己究竟适合什么样的工作和公司文化，需要考虑的问题太多。作为一个新手，在工作方面，确实需要前人的指点与自身的学习。</p>

<p>2013年，我结束了在爱立信的实习，可以说，这段实习时光会令我终生难忘，从学生到半个社会人的过度，从校园到职场的过度都在这里完成了，在公司，结识了一些为人好、实力强的同事和领导，见识并体验了世界500强的工作文化，对自己今后的工作方式和职业素养确实都有非常大的影响和帮助作用。</p>

<p>从校园过度到职场的这个过程，也产生了我对于工作和职场的一些看法，现在将我今年思考的一些东西总结如下。</p>

<h4>1.选择什么工作</h4>

<p>2013年结束，我也将面临求职的过程，关于选择什么样的工作，我也有自己的标准，首先，这份工作必须是我喜欢的。如果每天做着自己不感兴趣的事，那简直是浪费生命和时间，如果只是拿了那份工资而去从事自己不喜欢甚至反感的工作，那势必是悲哀的。其次，工作的内容必须是自己的强项，至少是自己擅长的，作为一个职场新人，我觉得第一份工作的内容必须是自己所擅长的领域，选择一份工作其实也是选择了接下来很长一段时间的生活方式，选择擅长的工作既是对工作结果的负责，也是对公司的负责，如果为了挑战而去选择一份自己不擅长的工作，一方面工作做不好，另一方面对公司也是不负责的。最后，在开始求职前，我给自己定了一个标准，选择的工作是移动开发相关的，这是我喜欢的，工作内容是Android或iOS开发，这是我擅长的，如果工作内容能接触产品相关的那就更好，毕竟能让技术与产品结合，是我所希望的。</p>

<h4>2.选择什么公司</h4>

<p>对于选择什么样的公司，其实各有各的看法，有倾向大公司的，有倾向创业公司的，至于选择谁，也是各有伯仲。进入大公司，好处显而易见，平台大，起点高，能接触到规范的管理流程和制度，享受公司带来的各方面的优势。而劣势也各有说法，有说大公司流程过于固定，工作内容比较受限，一个萝卜一个坑，干好自己本职工作即可高枕无忧，发挥的空间不大。关于创业公司，挑战大、机会大，接触的工作内容比较多，对能力的提升也最为有效，发挥空间大，如果成功则回报率也大于在大公司。但有一定风险，都不知道公司下一步会怎样。所以，这两个选择，我想一定也纠结过很多人。有从大公司出来的人会说去创业公司吧，有激情、有挑战，有从创业公司出来的又会说，去大公司吧，有保障，工作不累，在大公司锻炼几年再出来创业也有优势。所以，这个问题本来就没有一个标准的答案，我也就不再多说了。</p>

<h4>3.选择什么团队</h4>

<p>对于选择加入一个什么样的团队，这就非常重要了，不管进大公司还是创业公司，一个积极向上、效率高、没有等级制度的团队是我很看重的，能进入一个氛围好，大家一同齐心协力做事的团队会是一件非常幸运的事。作为一个新人，选择团队可能考虑的更多的是这个团队里面有没有能指导自己的大N，能不能在这个团队里使自己得到提高。当然，现实情况是，作为求职者，选择团队的几率很小，基本是公司把你安排在哪就在哪，所以在选择不同的公司时就可以同时了解可能会去的团队的基本情况。一个好团队能让我们工作更加开心，工作效率和工作质量也会更高。总的来说，我认为的好团队是能够交流自由、氛围好、工作敏捷、效率高、管理扁平化、Leader本身具备很深功力的团队。</p>

<p>2013年工作情况总结：</p>

<ul>
<li>在工作方式上得到了比较大的进步；</li>
<li>完成在爱立信的实习工作；</li>
<li>在Github上完成了一款开源项目<a href="https://github.com/tangren03/RTCommon">RTCommon</a></li>
<li>通过在线协作方式发起了一个移动应用的开发工作，正在不断完善</li>
</ul>


<h2>第三部分：生活</h2>

<p>对于生活，我等同行被冠以没有品位和情调，只知道整天对着屏幕敲代码的一族。其实，也不是所有的程序员都只知道对着屏幕敲代码，至少我不是，嘿嘿！平时闲暇也有自己的爱好，宅在家看看书、看看电影，出去跑跑步、游游泳，周末和朋友打打台球、聊聊天，兴致好和好友去唱唱歌，再有情调点，前阵子就和好友自驾去内蒙完了几天，文章最开始的日出就是我们在零下20度的草原上拍到的。</p>

<p>如何在原本枯燥乏味的工作间隙找寻生活中的快乐，我觉得这是现在这个社会很多人都缺失的，太多的人都奔波于生计，投入于工作，忽视了原本美好的生活，冷淡了亲人和爱人，疏远了朋友，忽视了健康。是现在这个时代的问题呢还是我们自己的问题。总之，这是一个目前无解的问题。</p>

<p>要说2013年我在生活上最大的感悟就是，照顾好自己！照顾好自己包含了太多的内容，让自己吃好、睡好是最基本的，让身体保持健康的状态，让心情保持愉悦，让每天都充满希望与期待，让自己和身边的人都感受到快乐和正能量。照顾好自己不仅仅关乎自己，关乎我们的家人、朋友，如果你的家人为你的健康担心，告诉他们你现在过的很好，并且要付诸行动，如果你现在正好有女朋友或男朋友，照顾好自己，让对方放心。生活其实很简单，快乐、向上、有目标。有空的时候给自己做做饭吃，别老在外面吃或吃速食或垃圾食品，其实，我发现做饭其实是一件很有成就感而且很快乐的事(但我不喜欢洗碗，哈哈)。有空的时候约三两好友一起出来聚聚，聊聊近况、扯扯天扯扯地。找个有阳光的周末，把自己的房间打扫整理一下，洗洗衣服被子，让一切都充满太阳的味道。其实，生活可以很美好！</p>

<p>毕竟我才这么大，生活阅历有限，所以谈不出非常高深的生活哲理与体验，我所说的都是自己真实的感受，希望能对看到的你有所启发与帮助。</p>

<p>2013年生活总结：</p>

<ul>
<li>坚持每天按时三餐，合理搭配饮食，尽量不吃垃圾食品；</li>
<li>有空一定自己做饭吃，虽然简单，但是快乐；</li>
<li>PM2.5不高、天气好就坚持早起晨跑，累计跑步316.7公里；</li>
<li>不熬夜，没有特殊情况，12点前睡觉，保持7小时平均睡眠时间；</li>
</ul>


<h2>我的2014</h2>

<p>2014年，对我来说，充满太多的未知因素，也充满太多的挑战。2014，我将正式开始自己的职业生涯，我将进入一家什么样的公司，和一群什么人合作，能做出一些什么样的成果，能达到一些什么目标，能取得些什么进步。这一切，都促使我干劲十足，准备好一切去迎接。2014，希望自己开心、快乐！新的一年，希望一切都好！</p>

<p>最后，附图一张，这是毕业答辩后和同学自驾去内蒙塞罕坝玩拍的一张照片，和文章顶部的对应，当时零下二十多度，到达看日出的地方时太阳正好升起，东边是日出，而另一面就是高挂的月亮。爬上小山头，太阳正好升起，看到阳光的那一刻，感觉整个世界是那么的美好！</p>

<p><img src="http://ryantang.me/images/2014/01/my_2013/2.png" alt="2" /></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2014/01/01/my-2013/'>http://ryantang.me/blog/2014/01/01/my-2013/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS事件机制(二)]]></title>
    <link href="http://ryantang.me/blog/2013/12/29/ios-event-dispatch-2/"/>
    <updated>2013-12-29T10:20:43+08:00</updated>
    <id>http://ryantang.me/blog/2013/12/29/ios-event-dispatch-2</id>
    <content type="html"><![CDATA[<p>本篇内容接上一篇<a href="http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/">iOS事件机制(一)</a>，本次主要介绍iOS事件中的多点触控事件和手势事件。</p>

<p>从上一篇的内容我们知道，在iOS中一个事件用一个UIEvent对象表示，UITouch用来表示一次对屏幕的操作动作，由多个UITouch对象构成了一个UIEvent对象。另外，<code>UIResponder</code>是所有响应者的父类，UIView、UIViewController、UIWindow、UIApplication都直接或间接的集成了UIResponder。关于事件响应者链的传递机制在上一篇中也有阐述，如果你还不是很了解，可以先看看<a href="http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/">iOS事件机制(一)</a>。</p>

<!--More-->


<h2>事件处理方法</h2>

<p>UIResponder中定义了一系列对事件的处理方法，他们分别是：</p>

<ul>
<li>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
<li>&ndash;(void)touchesMoved:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
<li>&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
<li>&ndash;(void)touchesCancelled:(NSSet <em>)touches withEvent:(UIEvent </em>)event</li>
</ul>


<p>从方法名字可以知道，他们分别对应了屏幕事件的开始、移动、结束和取消几个阶段，前三个阶段理解都没问题，最后一个取消事件的触发时机是在诸如突然来电话或是系统杀进程时调用。这些方法的第一个参数定义了UITouch对象的一个集合(NSSet)，它的数量表示了这次事件是几个手指的操作，目前iOS设备支持的多点操作手指数最多是5。第二个参数是当前的UIEvent对象。下图展示了一个UIEvent对象与多个UITouch对象之间的关系。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/11.png" alt="" /></p>

<h3>一、点击事件</h3>

<p>首先，新建一个自定义的View继承于UIView，并实现上述提到的事件处理方法，我们可以通过判断UITouch的tapCount属性来决定响应单击、双击或是多次点击事件。</p>

<figure class='code'><figcaption><span>MyView.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#import &quot;MyView.h&quot;</span>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">MyView</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesBegan</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesMoved</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesEnded</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">UITouch</span> <span class="o">*</span><span class="n">aTouch</span> <span class="n">in</span> <span class="n">touches</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">aTouch</span><span class="p">.</span><span class="n">tapCount</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 处理双击事件</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="n">respondToDoubleTapGesture</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesCancelled</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">respondToDoubleTapGesture</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;respondToDoubleTapGesture&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>二、滑动事件</h3>

<p>滑动事件一般包括上下滑动和左右滑动，判断是否是一次成功的滑动事件需要考虑一些问题，比如大部分情况下，用户进行一次滑动操作，这次滑动是否是在一条直线上？或者是否是基本能保持一条直线的滑动轨迹。或者判断是上下滑动还是左右滑动等。另外，滑动手势一般有一个起点和一个终点，期间是在屏幕上画出的一个轨迹，所以需要对这两个点进行判断。我们修改上述的MyView.m的代码来实现一次左右滑动的事件响应操作。</p>

<figure class='code'><figcaption><span>MyView.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#import &quot;MyView.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define HORIZ_SWIPE_DRAG_MIN  12    </span><span class="c1">//水平滑动最小间距</span>
</span><span class='line'><span class="cp">#define VERT_SWIPE_DRAG_MAX    4    </span><span class="c1">//垂直方向最大偏移量</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">MyView</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesBegan</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UITouch</span> <span class="o">*</span><span class="n">aTouch</span> <span class="o">=</span> <span class="p">[</span><span class="n">touches</span> <span class="n">anyObject</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// startTouchPosition是一个CGPoint类型的属性，用来存储当前touch事件的位置</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">startTouchPosition</span> <span class="o">=</span> <span class="p">[</span><span class="n">aTouch</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesMoved</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesEnded</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UITouch</span> <span class="o">*</span><span class="n">aTouch</span> <span class="o">=</span> <span class="p">[</span><span class="n">touches</span> <span class="n">anyObject</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">currentTouchPosition</span> <span class="o">=</span> <span class="p">[</span><span class="n">aTouch</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//  判断水平滑动的距离是否达到了设置的最小距离，并且是否是在接近直线的路线上滑动（y轴偏移量）</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">fabsf</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">startTouchPosition</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">currentTouchPosition</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">HORIZ_SWIPE_DRAG_MIN</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="n">fabsf</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">startTouchPosition</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">currentTouchPosition</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">VERT_SWIPE_DRAG_MAX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 满足if条件则认为是一次成功的滑动事件，根据x坐标变化判断是左滑还是右滑</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">startTouchPosition</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">currentTouchPosition</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="n">rightSwipe</span><span class="p">];</span><span class="c1">//右滑响应方法</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="n">leftSwipe</span><span class="p">];</span><span class="c1">//左滑响应方法</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">//重置开始点坐标值</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">startTouchPosition</span> <span class="o">=</span> <span class="n">CGPointZero</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesCancelled</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//当事件因某些原因取消时，重置开始点坐标值</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">startTouchPosition</span> <span class="o">=</span> <span class="n">CGPointZero</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">rightSwipe</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;rightSwipe&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">leftSwipe</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;leftSwipe&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>三、拖拽事件</h3>

<p>在屏幕上我们可以拖动某一个控件(View)进行移动，这种事件成为拖拽事件，其实现原理就是在不改变View的大小尺寸的前提下改变View的显示坐标值，为了达到动态移动的效果，我们可以在move阶段的方法中进行坐标值的动态更改，还是重写MyView.m的事件处理方法，这次在touchesMove方法中进行处理。</p>

<figure class='code'><figcaption><span>MyView.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#import &quot;MyView.h&quot;</span>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">MyView</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesBegan</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesMoved</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UITouch</span> <span class="o">*</span><span class="n">aTouch</span> <span class="o">=</span> <span class="p">[</span><span class="n">touches</span> <span class="n">anyObject</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//获取当前触摸操作的位置坐标</span>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">loc</span> <span class="o">=</span> <span class="p">[</span><span class="n">aTouch</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//获取上一个触摸点的位置坐标</span>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">prevloc</span> <span class="o">=</span> <span class="p">[</span><span class="n">aTouch</span> <span class="n">previousLocationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">myFrame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//改变View的x、y坐标值</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">deltaX</span> <span class="o">=</span> <span class="n">loc</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">prevloc</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">deltaY</span> <span class="o">=</span> <span class="n">loc</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">prevloc</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">deltaX</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+=</span> <span class="n">deltaY</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//重新设置View的显示位置</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">setFrame</span><span class="o">:</span><span class="n">myFrame</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesEnded</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesCancelled</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>四、双指缩放</h3>

<p>之前提到过UIEvent包含了一系列的UITouch对象构成一次事件，当设计多点触控操作时，可与对UIEvent对象内的UITouch对象进行处理，比如实现一个双指缩放的功能。</p>

<figure class='code'><figcaption><span>MyView.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#import &quot;MyView.h&quot;</span>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">MyView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">BOOL</span> <span class="n">pinchZoom</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">previousDistance</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">zoomFactor</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="n">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pinchZoom</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//缩放前两个触摸点间的距离</span>
</span><span class='line'>        <span class="n">previousDistance</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="n">zoomFactor</span> <span class="o">=</span> <span class="mf">1.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesBegan</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">allTouches</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pinchZoom</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSArray</span> <span class="o">*</span><span class="n">touches</span> <span class="o">=</span> <span class="p">[</span><span class="n">event</span><span class="p">.</span><span class="n">allTouches</span> <span class="n">allObjects</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">//接收两个手指的触摸操作</span>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">pointOne</span> <span class="o">=</span> <span class="p">[[</span><span class="n">touches</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">pointTwo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">touches</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="mi">1</span><span class="p">]</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">//计算出缩放前后两个手指间的距离绝对值（勾股定理）</span>
</span><span class='line'>        <span class="n">previousDistance</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">pow</span><span class="p">(</span><span class="n">pointOne</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">pointTwo</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="mf">2.0f</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>                                <span class="n">pow</span><span class="p">(</span><span class="n">pointOne</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">pointTwo</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mf">2.0f</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pinchZoom</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesMoved</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">YES</span> <span class="o">==</span> <span class="n">pinchZoom</span> <span class="o">&amp;&amp;</span> <span class="n">event</span><span class="p">.</span><span class="n">allTouches</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSArray</span> <span class="o">*</span><span class="n">touches</span> <span class="o">=</span> <span class="p">[</span><span class="n">event</span><span class="p">.</span><span class="n">allTouches</span> <span class="n">allObjects</span><span class="p">];</span>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">pointOne</span> <span class="o">=</span> <span class="p">[[</span><span class="n">touches</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">pointTwo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">touches</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="mi">1</span><span class="p">]</span> <span class="n">locationInView</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">//两个手指移动过程中，两点之间距离</span>
</span><span class='line'>        <span class="n">CGFloat</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">pow</span><span class="p">(</span><span class="n">pointOne</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">pointTwo</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="mf">2.0f</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>                                <span class="n">pow</span><span class="p">(</span><span class="n">pointOne</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">pointTwo</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mf">2.0f</span><span class="p">));</span>
</span><span class='line'>        <span class="c1">//换算出缩放比例</span>
</span><span class='line'>        <span class="n">zoomFactor</span> <span class="o">+=</span> <span class="p">(</span><span class="n">distance</span> <span class="o">-</span> <span class="n">previousDistance</span><span class="p">)</span> <span class="o">/</span> <span class="n">previousDistance</span><span class="p">;</span>
</span><span class='line'>        <span class="n">zoomFactor</span> <span class="o">=</span> <span class="n">fabs</span><span class="p">(</span><span class="n">zoomFactor</span><span class="p">);</span>
</span><span class='line'>        <span class="n">previousDistance</span> <span class="o">=</span> <span class="n">distance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//缩放</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CATransform3DMakeScale</span><span class="p">(</span><span class="n">zoomFactor</span><span class="p">,</span> <span class="n">zoomFactor</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesEnded</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">allTouches</span><span class="p">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pinchZoom</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="n">previousDistance</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">touchesCancelled</span><span class="o">:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">touches</span> <span class="n">withEvent</span><span class="o">:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面实现的方式有一点不足之处就是必须两个手指同时触摸按下才能达到缩放的效果，并不能达到相册里面那样一个手指触摸后，另一个手指按下也可以缩放。如果需要达到和相册照片缩放的效果，需要同时控制begin、move、end几个阶段的事件处理。这个不足就留给感兴趣的同学自己去实现了。</p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2013/12/29/ios-event-dispatch-2/'>http://ryantang.me/blog/2013/12/29/ios-event-dispatch-2/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS事件机制(一)]]></title>
    <link href="http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/"/>
    <updated>2013-12-07T15:10:42+08:00</updated>
    <id>http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1</id>
    <content type="html"><![CDATA[<blockquote><p>运用的前提是掌握</br>
掌握的本质是理解</p></blockquote>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/1.png" alt="" /></p>

<!--More-->


<p>本篇内容将围绕iOS中事件及其传递机制进行学习和分析。在iOS中，事件分为三类：</p>

<ul>
<li>触控事件（单点、多点触控以及各种手势操作）</li>
<li>传感器事件（重力、加速度传感器等）</li>
<li>远程控制事件（远程遥控iOS设备多媒体播放等）</li>
</ul>


<p>这三类事件共同构成了iOS设备丰富的操作方式和使用体验，本次就首先来针对第一类事件：触控事件，进行学习和分析。</p>

<h2>Gesture Recognizers</h2>

<p>Gesture Recognizers是一类手势识别器对象，它可以附属在你指定的View上，并且为其设定指定的手势操作，例如是点击、滑动或者是拖拽。当触控事件 发生时，设置了Gesture Recognizers的View会先通过识别器去拦截触控事件，如果该触控事件是事先为View设定的触控监听事件，那么Gesture Recognizers将会发送动作消息给目标处理对象，目标处理对象则对这次触控事件进行处理，先看看如下流程图。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/2.png" alt="" /></p>

<p>在iOS中，View就是我们在屏幕上看到的各种UI控件，当一个触控事件发生时，Gesture Recognizers会先获取到指定的事件，然后发送动作消息(action message)给目标对象(target)，目标对象就是ViewController，在ViewController中通过事件方法完成对该事件的处理。Gesture Recognizers能设置诸如单击、滑动、拖拽等事件，通过Action-Target这种设计模式，好处是能动态为View添加各种事件监听，而不用去实现一个View的子类去完成这些功能。</p>

<p>以上过程就是我们在开发中在方法中常见的设置action和设置target，例如为UIButton设置监听事件等。</p>

<h3>常用手势识别类</h3>

<p>在UIKit框架中，系统为我们事先定义好了一些常用的手势识别器，包括点击、双指缩放、拖拽、滑动、旋转以及长按。通过这些手势识别器我们可以构造丰富的操作方式。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/3.png" alt="" /></p>

<p>在上表中可以看到，UIKit框架中已经提供了诸如UITapGestureRecognizer在内的六种手势识别器，如果你需要实现自定义的手势识别器，也可以通过继承UIGestureRecognizer类并重写其中的方法来完成，这里我们就不详细讨论了。</p>

<p>每一个Gesture Recognizer关联一个View，但是一个View可以关联多个Gesture Recognizer，因为一个View可能还能响应多种触控操作方式。当一个触控事件发生时，Gesture Recognizer接收一个动作消息要先于View本身，结果就是Gesture Recognizer作为View处理触控事件的代表，或者叫代理。当Gesture Recognizer接收到指定的事件时，它就会发送一条动作消息(action message)给ViewController并处理。</p>

<h3>连续和不连续动作</h3>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/4.png" alt="" /></p>

<p>触控动作同时分为连续动作(continuous)和不连续动作(discrete)，连续动作例如滑动和拖拽，它会持续一小段时间，而不连续动作例如单击，它瞬间就会完成，在这两类事件的处理上又稍有不同。对于不连续动作，Gesture Recognizer只会给ViewContoller发送一个单一的动作消息(action message),而对于连续动作，Gesture Recognizer会发送多条动作消息给ViewController，直到所有的事件都结束。</p>

<p>为一个View添加GestureRecognizer有两种方式，一种是通过InterfaceBuilder实现，另一种就是通过代码实现，我们看看通过代码来如何实现。</p>

<figure class='code'><figcaption><span>MyViewContoller.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span> <span class="o">(</span><span class="kt">void</span><span class="o">)</span><span class="n">viewDidLoad</span> <span class="o">{</span>
</span><span class='line'>     <span class="o">[</span><span class="kd">super</span> <span class="n">viewDidLoad</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// 创建并初始化手势对象</span>
</span><span class='line'>     <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">tapRecognizer</span> <span class="o">=</span> <span class="o">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="o">]</span>
</span><span class='line'>          <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="nd">@selector</span><span class="o">(</span><span class="nl">respondToTapGesture:</span><span class="o">)];</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// 指定操作为单击一次</span>
</span><span class='line'>     <span class="n">tapRecognizer</span><span class="o">.</span><span class="na">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// 为当前View添加GestureRecognizer</span>
</span><span class='line'>     <span class="o">[</span><span class="n">self</span><span class="o">.</span><span class="na">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">tapRecognizer</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上述代码，我们实现了为当前MyViewController的View添加一个单击事件，首先构造了UITapGestureRecognizer对象，指定了target为当前ViewController本身，action就是后面自己实现的处理方法，这里就呼应了前文提到的Action-Target模式。</p>

<p>在事件处理过程中，这两种方式所处的状态又各有不同，首先，所有的触控事件最开始都是处于可用状态(Possible)，对应UIKit里面的UIGestureRecognizerStatePossible类，如果是不连续动作事件，则状态只会从Possible转变为已识别状态(Recognized,UIGestureRecognizerStateRecognized)或者是失败状态(Failed,UIGestureRecognizerStateFailed)。例如一次成功的单击动作，就对应了Possible-Recognized这个过程。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/5.png" alt="" /></p>

<p>如果是连续动作事件，如果事件没有失败并且连续动作的第一个动作被成功识别(Recognized)，则从Possible状态转移到Began(UIGestureRecognizerStateBegan)状态，这里表示连续动作的开始，接着会转变为Changed(UIGestureRecognizerStateChanged)状态，在这个状态下会不断循环的处理连续动作，直到动作执行完成变转变为Recognized已识别状态，最终该动作会处于完成状态(UIGestureRecognizerStateEnded)，另外，连续动作事件的处理状态会从Changed状态转变为Canceled(UIGestureRecognizerStateCancelled)状态，原因是识别器认为当前的动作已经不匹配当初对事件的设定了。每个动作状态的变化，Gesture Recognizer都会发送消息(action message)给Target，也就是ViewController，它可以根据这些动作消息进行相应的处理。例如一次成功的滑动手势动作就包括按下、移动、抬起的过程，分别对应了Possible-Began-Changed-Recognized这个过程。</p>

<h3>UITouch &amp; UIEvent</h3>

<p>在屏幕上的每一次动作事件都是一次Touch，在iOS中用UITouch对象表示每一次的触控，多个Touch组成一次Event，用UIEvent来表示一次事件对象。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/6.png" alt="" /></p>

<p>在上述过程中，完成了一次双指缩放的事件动作，每一次手指状态的变化都对应事件动作处理过程中得一个阶段。通过Began-Moved-Ended这几个阶段的动作(Touch)共同构成了一次事件(Event)。在事件响应对象UIResponder中有对应的方法来分别处理这几个阶段的事件。</p>

<ul>
<li>touchesBegan:withEvent:</li>
<li>touchesMoved:withEvent:</li>
<li>touchesEnded:withEvent:</li>
<li>touchesCancelled:withEvent:</li>
</ul>


<p>后面的参数分别对应UITouchPhaseBegan、UITouchPhaseMoved、UITouchPhaseEnded、UITouchPhaseCancelled这几个类。用来表示不同阶段的状态。</p>

<h3>事件传递</h3>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/7.png" alt="" /></p>

<p>如上图，iOS中事件传递首先从App(UIApplication)开始，接着传递到Window(UIWindow)，在接着往下传递到View之前，Window会将事件交给GestureRecognizer，如果在此期间，GestureRecognizer识别了传递过来的事件，则该事件将不会继续传递到View去，而是像我们之前说的那样交给Target(ViewController)进行处理。</p>

<h2>响应者链(Responder Chain)</h2>

<p>通常，一个iOS应用中，在一块屏幕上通常有很多的UI控件，也就是有很多的View，那么当一个事件发生时，如何来确定是哪个View响应了这个事件呢，接下来我们就一起来看看。</p>

<h3>寻找hit-test view</h3>

<p>什么是hit-test view呢？简单来说就是你触发事件所在的那个View，寻找hit-test view的过程就叫做Hit-Testing。那么，系统是如何来执行Hit-Testing呢，首先假设现在有如下这么一个UI布局，一种有ABCDE五个View。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/8.png" alt="" /></p>

<p>假设一个单击事件发生在了View D里面，系统首先会从最顶层的View A开始寻找，发现事件是在View A或者其子类里面，那么接着从B和C找，发现事件是在C或者其子类里面，那么接着到C里面找，这时发现事件是在D里面，并且D已经没有子类了，那么hit-test view就是View D啦。</p>

<h3>响应者对象(Responsder Object)</h3>

<p>响应者对象是能够响应并且处理事件的对象，UIResponder是所有响应者对象的父类，包括UIApplication、UIView和UIViewController都是UIResponder的子类。也就意味着所有的View和ViewController都是响应者对象。</p>

<h3>第一响应者(First Responder)</h3>

<p>第一响应者是第一个接收事件的View对象，我们在Xcode的Interface Builder画视图时，可以看到视图结构中就有First Responder。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/10.png" alt="" /></p>

<p>这里的First Responder就是UIApplication了。另外，我们可以控制一个View让其成为First Responder，通过实现 canBecomeFirstResponder方法并返回YES可以使当前View成为第一响应者，或者调用View的becomeFirstResponder方法也可以，例如当UITextField调用该方法时会弹出键盘进行输入，此时输入框控件就是第一响应者。</p>

<h3>事件传递机制</h3>

<p>如上所说，，如果hit-test view不能处理当前事件，那么事件将会沿着响应者链(Responder Chain)进行传递，知道遇到能处理该事件的响应者(Responsder Object)。通过下图，我们来看看两种不同情况下得事件传递机制。</p>

<p><img src="http://ryantang.me/images/2013/12/ios_event_dispatch/9.png" alt="" /></p>

<p>左边的情况，接收事件的initial view如果不能处理该事件并且她不是顶层的View，则事件会往它的父View进行传递。initial view的父View获取事件后如果仍不能处理，则继续往上传递，循环这个过程。如果顶层的View还是不能处理这个事件的话，则会将事件传递给它们的ViewController，如果ViewController也不能处理，则传递给Window(UIWindow)，此时Window不能处理的话就将事件传递给Application(UIApplication)，最后如果连Application也不能处理，则废弃该事件。</p>

<p>右边图的流程唯一不同就在于，如果当前的ViewController是由层级关系的，那么当子ViewController不能处理事件时，它会将事件继续往上传递，直到传递到其Root ViewController，后面的流程就跟之前分析的一样了。</p>

<p>这就是事件响应者链的传递机制，通过这些内容，我们可以更深入的了解事件在iOS中得传递机制，对我们在实际开发中更好的理解事件操作的原理有很大的帮助，也对我们实现复杂布局进行事件处理时增添了多一份的理解。</p>

<h2>总结</h2>

<p>通过前面的内容分析，我们已经学习并了解了如下内容：</p>

<ul>
<li>Gesture Recognizers，是用来控制手势识别的过程和方法，并且其通过Action-Target模式与ViewController的通信的方式。连续和不连续手势动作情况下GestureRecognizer的状态转变。</li>
<li>UITouch和UIEvent对象，他们都是UIKit中来进行事件处理的对象，多个UITouch对象构成一个UIEvent对象，重写相应的方法可以控制和处理事件各个阶段的操作。</li>
<li>系寻找hit-test view的方式、事件传递机、制响应者链</li>
</ul>


<blockquote><p>后记：本篇是iOS事件传递机制的上篇，下篇将继续讨论多点触控事件和手势操作的内容！</p></blockquote>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/'>http://ryantang.me/blog/2013/12/07/ios-event-dispatch-1/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用GoAgent翻墙]]></title>
    <link href="http://ryantang.me/blog/2013/11/30/use-goagent/"/>
    <updated>2013-11-30T14:17:16+08:00</updated>
    <id>http://ryantang.me/blog/2013/11/30/use-goagent</id>
    <content type="html"><![CDATA[<blockquote><p>天朝上国，长城伟岸<br>
茫茫世界，何止一墙</p></blockquote>

<p>互联网本是个开放的世界，互联网的本质就是开放、交流和分享，无奈身在天朝，一堵伟岸的墙将我们与一些美好的事物隔离开来。有压迫的地方就总有反抗，有技术的地方就总有解决方法。虽然我们置身墙内，但还是有方法绕过这道墙去领略外面的世界，也就是我们俗称的翻墙。现在的翻墙方法有很多，网上也有一些翻墙工具下载，但大多不稳定，稳定的就要收费。既然我们是搞技术的，那就用技术手段来翻墙吧。本次要介绍的就是使用GoAgent来实现翻墙。以下操作均在Mac OS X 10.9上完成,Windows用户操作基本类似。</p>

<!--More-->


<h2>GoAgent是什么</h2>

<p>GoAgent是使用Python编写的网络软件，可以运行在Windows/Mac/Linux/Android/iTouch/iPhone/iPad/webOS/OpenWRT/Maemo上</p>

<h2>使用GoAgent有什么好处</h2>

<p>简单来说，使用GoAgent翻墙最大的好处就是稳定，不会像一些翻墙软件一样出现时常掉线的情况。俗话说，好不好，只有自己用了才知道！</p>

<h2>如何使用GoAgent</h2>

<h3>一、申请Google App Engine</h3>

<p>Google App Engine是一个网络服务挂载，我们可以将自己的服务挂载在上面，首先，我们进入<a href="https://appengine.google.com/">Google App Engine</a>，如果你有gmail账户，则直接登录即可，登录成功后我们新建一个Application</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/1.png" alt="1" /></p>

<p>新建成功后就可以看到如下信息</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/2.png" alt="2" /></p>

<p>进入Application列表我们就可以看到刚才创建的应用了。Application一列显示的就是App ID，最后一列显示了当前应用的状态，由于这是一个新应用，所以状态为None-Deployed。到这里，Google App Engine我们就配置好了。</p>

<h3>二、安装配置GoAgent</h3>

<p>进入<a href="https://code.google.com/p/goagent/">GoAgent官网</a>下载GoAgent压缩包，并解压到用户根目录下，进入GoAgent/local目录，找到proxy.ini文件并用编辑器打开。</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/3.png" alt="1" /></p>

<p>打开proxy.ini后找到appid一栏，将默认的值修改成之前注册的Google App Engine的App ID，然后保存。</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/4.png" alt="1" /></p>

<p>接下来用命令行进入GoAgent目录下的server文件夹，然后运行python uploader.zip命令将我们的应用上传到Google App Engine。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>cd GoAgent/server
</span><span class='line'>python uploader.zip
</span></code></pre></td></tr></table></div></figure>


<p>命令执行后，会要求我们输入APPID，输入我们在Google App Engine创建的App ID。</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/5.png" alt="1" /></p>

<p>输入完AppID后回车，接着会要我们输入Emial，此处输入你的Gmail邮箱地址，接下来就是输入密码。输入密码这里需要注意，如果你的Gmail开启了<code>两步验证</code>，那么你需要到Google账户设置-安全性-两步验证里去获取临时密码，如果你没有设置两步验证，那这里的密码就输入你的Gmial邮箱密码。</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/6.png" alt="1" /></p>

<p>点击“管理您的应用专用密码”进入下面界面</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/7.png" alt="1" /></p>

<p>在输入框中输入描述点击生成密码就会跳转到另外的界面，同时会看到为你生成的密码，将这个密码输入到前面的密码输入中（不要带空格），最后回车，就开始上传了。上传工程后你会看到Complete update&hellip;等信息。</p>

<p>接下来命令行进入/GoAgent/local目录，运行python proxy.py命令，就开启GoAgent服务了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>cd GoAgent/local
</span><span class='line'>python proxy.py
</span></code></pre></td></tr></table></div></figure>


<p>如果运行上述命令后你看到有WARNING信息输出，提示权限问题，这时可以找到GoAgent/local目录下CA.cer文件，双击安装这个证书，在钥匙串中就可以看到这个证书了，双击打开，并且修改权限为总是信任，重启命令窗口再运行上述命令就可以了。</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/8.png" alt="1" /></p>

<h3>三、设置浏览器代理插件</h3>

<p>Chrome可以安装这个插件<a href="https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm">SwitchySharp</a>，然后下载并在SwitchySharp设置中导入已经配置好的文件<a href="https://code.google.com/p/wwqgtxx-GoAgent/downloads/detail?name=SwitchyOptions.bak&amp;can=2&amp;q=">SwitchyOptions.bak</a></p>

<p><img src="http://ryantang.me/images/2013/11/goagent/9.png" alt="1" /></p>

<p>导入成功后就可以看到配置信息了</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/10.png" alt="1" /></p>

<p>FirFox可以安装<a href="https://addons.mozilla.org/zh-cn/firefox/addon/foxyproxy-standard/">FoxyProxy</a>插件。到这里，所有的安装和设置我们都已经完成了，接下来我们就看看如何使用GoAgent来进行翻墙。</p>

<h4>四、平时使用GoAgent翻墙</h4>

<p>1、打开命令行窗口，运行下列命令开启GoAgent服务</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>cd GoAgent/local
</span><span class='line'>python proxy.py
</span></code></pre></td></tr></table></div></figure>


<p>2、打开Chrome浏览器，将地址栏右侧的蓝色地球点开，选择代理为GoAgent</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/11.png" alt="1" /></p>

<p>好了，输入youtube.com，尽情去享受墙外的世界吧！</p>

<p><img src="http://ryantang.me/images/2013/11/goagent/12.png" alt="1" /></p>

<p><img src="http://ryantang.me/images/2013/11/goagent/13.png" alt="1" /></p>

<p>3、不用的时候切换代理然后关闭命令行窗口即可，需要注意的是，一个Google App Engine上得Application一天只提供1G的流量限制，但是，我们可以最多申请10个Application，如果1G不够用，你可以多申请几个，然后在之前提到的proxy.ini文件中appid一项添加App ID即可，多个之间用|分割。</p>

<blockquote><p>本次关于GoAgent翻墙的介绍就到此结束了，有不足之处还望指正，如果过程中有问题可以在下面留言讨论！</p></blockquote>

<p>另外这有个叫<a href="https://github.com/ohdarling/GoAgentX">GoAgentX</a>的东东，感兴趣的自己去折腾吧！</p>

<p><a href="https://code.google.com/p/GoAgent/">More Tips About GoAgent</a></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2013/11/30/use-goagent/'>http://ryantang.me/blog/2013/11/30/use-goagent/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果开发者账号那些事儿（三）]]></title>
    <link href="http://ryantang.me/blog/2013/11/28/apple-account-3/"/>
    <updated>2013-11-28T19:52:00+08:00</updated>
    <id>http://ryantang.me/blog/2013/11/28/apple-account-3</id>
    <content type="html"><![CDATA[<blockquote><p>这是一篇教程<br>
这里有手把手教学<br></p></blockquote>

<p>这是苹果开发者账号相关系列第三篇，本篇主要介绍Provisioning Profile，如果你还没有看过前两篇，可以先看看：</p>

<ul>
<li><a href="http://ryantang.me/blog/2013/08/28/apple-account-1/" target="_blank">苹果开发者账号那些事儿（一）</a></li>
<li><a href="http://ryantang.me/blog/2013/09/03/apple-account-2/" target="_blank">苹果开发者账号那些事儿（二）</a></li>
</ul>


<!--More-->


<h2>什么是Provisioning Profile？</h2>

<p>从字面翻译，Provisioning Profile就是配置文件的意思，它在开发者账号体系中所扮演的角色也是配置和验证的作用。如果你有开发者账号，可以打开你的开发者控制台，在首页可以看到如下界面。如果你没有开发者账号，那就看图片意会吧！：）</p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/0.png" alt="0" /></p>

<p>现在开发者控制台相比之前在界面布局上已经进行了改版，更加直观，也更加美观。红框标记的地方我们可以看到Provisioning Profile文件夹图标，点击进去，就来到了所有证书和配置文件的管理控制中心。我们可以在最下方看到标记为Provisioning Profiles的区域，这里就是我们管理iOS或者Mac应用程序Provisioning Profile的地方啦。</p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/1.png" alt="1" /></p>

<p>点击右上方的“+”号会提示我们新建什么类型的Provisioning Profile，可以看到，Provisioning Profile分为两大类，一类是Development，一类是Distribution，前者是创建我们在开发环境下的配置文件，不能进行发布，后者可以创建发布到App Store或者以Ad Hoc发布的配置文件。创建Development下得Provisioning Profile后，我们可以在真机上对App进行开发和调试。在Distribution下的Provisioning Profile，我们可以选择创建发布到应用商店的配置文件，另外就是Ad Hoc方式下的配置文件。Ad Hoc是指在不发布到App Store的情况下，可以将发布状态下的App装在指定的一些真机上进行测试，但是这里指定的设备数量是有限的（99台）。</p>

<p>到这里，我们已经知道Provisioning Profile有两类，一类是开发状态下的，一类是发布状态下得。那Provisioning Profile里面究竟有些什么东西呢，我们接着往下看。</p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/2.png" alt="1" /></p>

<p>我们选择创建一个Development状态下的Provisioning Profile，首先需要我们填写App ID，我们知道，每一个应用都有唯一的App ID，这个ID就好比我们应用程序的身份证，通过下图可以看到关于App ID的构成。</p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/3.png" alt="1" /></p>

<p>现在，App ID由一个Apple产生的Team ID作为前缀，后面跟的其实就是我们在Xcode中设置的Bundle ID，其实就相当于包名（Android里面也是利用应用包名来唯一标记App）。通过这种方式，我们就将一个指定的App与一个Provisioning Profile进行绑定了，也就是说这个Provisioning Profile只能作为这一个App的开发配置文件。那我们每一次开发新应用的时候就得重新来新建Provisioning Profile，这显得非常麻烦，好在Apple已经为我们想到了这一点，我们可以通过通配符来标记App ID，这样我们可以只创建一个开发配置文件就可以来测试所有我们开发的App了，下图是使用通配符标记的App ID格式。</p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/4.png" alt="1" /></p>

<p>关于App ID的创建，可以到证书配置管理控制台Identifiers模块下App IDs栏目下进行创建，这里就不再详细赘述了。App ID选好了，我们继续下面的步骤。这时，提示会要求我们选择Certificates。</p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/5.png" alt="1" /></p>

<p>那什么是Certificates呢？你可以在<a href="http://ryantang.me/blog/2013/09/03/apple-account-2/" target="_blank">苹果开发者账号那些事儿（二）</a>中得到详细的答案。如果你现在不想看，那简单的说，Certificates就是一个来验证你是合法开发者的证书文件，这里通常是对你进行开发的Mac进行授权。我们可以选择一个经过验证的Certificate来配置这个Provisioning Profile。选择完毕后我们就可以进行下一步了。这时，提示会要求我们选择Device。</p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/6.png" alt="1" /></p>

<p>选择Device也就是说我们希望这个Provisioning Profile对哪些设备进行授权，只有选中的设备，才能使用这个配置文件来进行真机调试，否则，装了也没有，因为别人压根没对你授权。设备选择完毕后，我们继续下面的步骤，这时，提示就会要求我们输入这个Provisioning Profile的名字了。</p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/7.png" alt="1" /></p>

<p>在统计信息中我们可以看到，Provisioning Profile的类型为Development类型，选择了一个指定的App ID，指定了一个Certificates，另外指定了一台设备，这样，我们的Provisioning Profile就配置完成了。这时到配置文件列表我们可以看到刚刚生成的这个配置文件，显示为Active已激活，另外要说的是，每一个Provisioning Profile都有一个有效期，通常是一年，过期后就得重新验证一下，不需要重新生成，只需手动验证一下即可，点击查看详情。</p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/8.png" alt="1" /></p>

<p>这里，我们可以看到比之前的详情更丰富的信息，其中Enabled Service中例举的信息是在配置App ID的时候选择的，作用是为这个配置文件申请诸如消息推送和应用内购买的权限。另外，Expires指明了这个配置文件的过期时间，最后Status就显示状态为Activie，如果不可用的话会显示Invalid。如果发现配置文件过期，就像之前说的，手动验证一下即可。最后，可以将Provisioning Profile下载到本地，下载完成后，我们就可以看到一个扩展名为.mobileprovision的文件，打开Xcode，连上设配，双击这个配置文件，这个配置文件就被安装到我们的测试设备中了，通过Xcode的Device窗口可以查看这台测试设备所有的Provisioning Profile。到这里，我们已经知道了Provisioning Profile是用来做验证授权的，也知道了它其实是装在我们的测试设备上的，当然，你也知道了如何去创建它。那么，接下来我们就来看看Provisioning Profile的内部结构图。</p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/9.png" alt="1" /></p>

<p>这里，拿Ad Hoc方式的配置文件来举例，按照之前说的，Ad Hoc能够在不发布到App Store的前提下允许指定的设备安装App，那这个配置文件中肯定就包含Devices信息，同时也包含App ID，另外还包含一个发布状态下的Certificate。到这里，或许你会有疑问，正式发布状态下的配置文件应该是怎样的，首先要说的是，正式发布App时，Provisioning Profile是不需要提前安装到用户手机上的，如果这样的话，那估计Apple就傻了。在正式发布到Apple Store时，发布状态的Provisioning Profile已经以签名的方式和App进行了绑定，有一点不同的是，发布状态的Provisioning Profile不需要指定Device，因为它不知道将被哪些设备使用，下图是发布状态下的配置文件结构。</p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/10.png" alt="1" /></p>

<p>最后，如果是Company类型的开发者账号，可以生成一个供团队使用的Team Provisioning Profile，通过这个配置文件，团队内成员可以共用一个配置文件来进行开发调试，当然，App ID得指定成通配类型的。</p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/11.png" alt="1" /></p>

<p>这里需要注意的是，每一个苹果开发者账号只有一个Agent权限，就就是说，最终真正有权限发布到App Store的人就是这个开发者账号的拥有者，他的身份类型就是Agent，另外还有两种身份类型，一种是Admin，一种是Member，关于更多团队账号角色的信息，你可以参考<a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ManagingYourTeam/ManagingYourTeam.html#//apple_ref/doc/uid/TP40012582-CH16-SW1" target="_blank">这里</a>。</p>

<h2>总结</h2>

<p>通过上面的内容，你是否已经能够回答最开始提出的问题呢？什么是Provisioning Profile？这里做一个简单的总结：</p>

<ul>
<li>Provisioning Profile是一个安装在测试设备上的配置文件，文件扩展名为.mobileprovision</li>
<li>Provisioning Profile有两种类型，一种是Development、一种是Distribution，分别对应开发状态和发布状态的配置文件</li>
<li>配置Provisioning Profile之前需要先设置好Certificates、App ID、Devices等信息</li>
<li>Provisioning Profile的有效期为12个月，过期后得手动验证方可继续使用</li>
</ul>


<p>内容就到这里了，要想理解的更透彻，还是实际去操作和实验来的快。如果你是Xcode5了，进到Preferences里面，选择Accounts选项卡，将你的Apple ID添加到Xcode里面，然后到工程General和Build Settings里面去折腾吧。后面的事，你就自己琢磨吧！：）</p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/13.png" alt="1" /></p>

<p><img src="http://ryantang.me/images/2013/11/apple_account_3/14.png" alt="1" /></p>

<blockquote><p>本期内容就到这里了，有不足之处，欢迎指正，如果你希望经常收到一些有趣的内容，欢迎微信扫描网页右边的二维码关注我的微信公众账号“Android及iOS开发汇总”。</p></blockquote>

<p>Reference From <a href="https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html">Apple Developer Center</a></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2013/11/28/apple-account-3/'>http://ryantang.me/blog/2013/11/28/apple-account-3/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果开发者账号那些事儿（二）]]></title>
    <link href="http://ryantang.me/blog/2013/09/03/apple-account-2/"/>
    <updated>2013-09-03T21:24:00+08:00</updated>
    <id>http://ryantang.me/blog/2013/09/03/apple-account-2</id>
    <content type="html"><![CDATA[<blockquote><p>这是一篇教程<br>
这里有手把手教学<br></p></blockquote>

<p>这是苹果开发者账号系列第二篇，如果你还没有看过第一篇，也许你会想看一看：</p>

<ul>
<li><a href="http://ryantang.me/blog/2013/08/28/apple-account-1/" target="_blank">苹果开发者账号那些事儿（一）</a></li>
</ul>


<h2>一、关于证书</h2>

<p>苹果使用密文签名技术来验证App的合法性，不管是iOS应用还是Mac应用都需要相应的签名证书来作为测试或发布App用。这里主要谈谈iOS的证书，当然，Mac的证书也基本类似。</p>

<p>在开发iOS应用的时候，我们需要签名证书（<code>开发证书</code>）来验证，并允许我们在真机上对App进行测试。另外，在发布App到App store的时候，我们也需要证书(<code>发布证书</code>)来做验证。那么什么是签名证书，如何获取签名证书，下面听我慢慢道来。</p>

<!--More-->


<p>首先，证书（<code>Certificate</code>）是用来证明某一件事是否成立的，好比拿到的获奖证书，是证明参加比赛并获奖的凭证。类似，在iOS开发中，用证书来证明你是否具有某些权限或者能力来做某事。代码签名验证允许我们的操作系统来判断是谁对App进行了签名，在安装了Xcode后，Xcode会在项目编译期间使用你的代码签名验证，这个验证由一个由Apple认证过的公钥-私钥对组成，私钥存储在你的钥匙串中（Mac本地，在系统实用工具中），公钥包含在证书（Certificates）中，证书在本地钥匙串和开发者账号中都有存储，这种公钥-私钥验证授权的方式在很多地方都有使用到，比如Git中的SSH协议也是通过这种方式来确认访问权限。另外，还有一个我们可以叫做媒介证书的证书来确保我们的证书（Certificates）是经过授权而发布的。如下图所示：</p>

<p><img src="http://ryantang.me/images/2013/09/apple_account_2/1.png" alt="1" /></p>

<p>当安装好Xcode时，媒介证书（Intermediate Certificate）就已经安装到我们的钥匙串中去了。通过在开发者账号（Developer Account）和本地（Mac）都经过验证的证书（Certificate）我们就可以利用合法的证书进行App的测试和发布了。</p>

<h2>二、请求证书</h2>

<p>在为App签名前，我们需要向Apple请求签名证书，前提是你已经注册了开发者计划并付费。</p>

<p>1、打开Xcode并进入右上角Organizer窗口，选中顶部第一个名为Devices的Tab，如下图：</p>

<p><img src="http://ryantang.me/images/2013/09/apple_account_2/2.png" alt="2" /></p>

<p>2、点击菜单栏Editor并选择Refresh from Developer Portal</p>

<p>3、输入开发者账号用户名和密码并点击“Log in”，如下图：</p>

<p><img src="http://ryantang.me/images/2013/09/apple_account_2/3.png" alt="3" /></p>

<p>4、完成后点击“Submit Request”按钮，此时Xcode会向开发者后台请求相应的证书，证书包括开发证书（Development）和发布证书（Distribution）。窗口如下图所示：</p>

<p><img src="http://ryantang.me/images/2013/09/apple_account_2/4.png" alt="4" /></p>

<p>5、请求完毕后，Xcode会询问是否需要导出开发者证书，选择“Export”导出。前面的介绍中我们提到过，私钥（Private key）是存储在本地的，证书（Certificate）随着公钥（Public key）存储在开发者账号后台，公钥=私钥对完成对一个开发者和一台开发Mac设备的授权，所以，当我们创建证书时就需要马上备份我们的证书，当切换Mac进行作业时，我们只需要导入我们的私钥证书即可（公钥证书在本地和开发者中心都存储有）。</p>

<p><img src="http://ryantang.me/images/2013/09/apple_account_2/5.png" alt="5" /></p>

<p>6、导出过程中会要求你对导出的证书设置密码，下次导入此证书时需要输入该密码，所以需要记住此处设置的密码。导出的证书扩展名为.developerprofile，当下次切换Mac进行开发时，，导入该证书即可。</p>

<p><img src="http://ryantang.me/images/2013/09/apple_account_2/6.png" alt="6" /></p>

<p>导入.developerprofile证书：</p>

<p><img src="http://ryantang.me/images/2013/09/apple_account_2/7.png" alt="7" /></p>

<h2>三、验证证书</h2>

<p>1、在Xcode Organizer中左侧TEAMS选项卡中可以看到两个证书显示其中，一个是开发证书（Development），一个是发布证书（Distribution），如果开发者证书验证授权成功，则在证书上的小人头像会显示绿色小钩。</p>

<p><img src="http://ryantang.me/images/2013/09/apple_account_2/8.png" alt="8" /></p>

<p>2、当请求了开发者证书后，会自动在钥匙串中（系统实用工具-钥匙串访问）显示开发证书和发布证书。当选中一个证书时，顶部的说明信息包括了证书发行商和授权信息，同样如果看到绿色打钩说明证书已经安装成功。</p>

<p><img src="http://ryantang.me/images/2013/09/apple_account_2/9.png" alt="9" /></p>

<p>3、在开发者后台查看开发证书，登陆Developer后台以后进入Certificates选项卡，分别在Development和Distribution选项卡中查看开发证书和发布证书。此时，证书的信息应该和在Xcode中一致。</p>

<p><img src="http://ryantang.me/images/2013/09/apple_account_2/10.png" alt="10" /></p>

<h2>四、回顾总结</h2>

<p>在上面的讨论中，我们介绍了签名证书以及如何请求及验证证书。在iOS开发中，总的来说主要包括两个证书，一个是开发证书（Development certificates）用来验证哪些设备能用来测试App，在开发测试阶段使用这个证书。另一个是发布证书（Distribution certificates），用来验证是否能向App store提交App审核和发布。如果是公司团队账号，发布证书能在具有发布权限的团队成员间共享。以下是官方对证书类型和名字的一个列表统计，比较详细的例举了证书类型、名字以及简要描述。</p>

<p><img src="http://ryantang.me/images/2013/09/apple_account_2/11.png" alt="11" /></p>

<blockquote><p>后记：本次关于苹果开发者账号证书相关的介绍就到此结束了，不足之处望大家指正和补充。下篇将主要介绍Provisioning Profile的二三事。欢迎继续关注。</p></blockquote>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2013/09/03/apple-account-2/'>http://ryantang.me/blog/2013/09/03/apple-account-2/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果开发者账号那些事儿（一）]]></title>
    <link href="http://ryantang.me/blog/2013/08/28/apple-account-1/"/>
    <updated>2013-08-28T22:55:00+08:00</updated>
    <id>http://ryantang.me/blog/2013/08/28/apple-account-1</id>
    <content type="html"><![CDATA[<blockquote><p>这不是一篇教程<br>
这里没有手把手教学<br></p></blockquote>

<p>正如前言所述，如果你是找一篇如何申请苹果开发者账号的HOTO教程，那么不耽误你的宝贵时间了，马上关闭本页面。如果你是想看我扯一下关于苹果开发者账号那些事儿，那你可以放松下接着往下看，从这一篇开始接下来几篇文章，我将完整的介绍苹果开发者账号体系！</p>

<!--More-->


<h2>账号类型</h2>

<p>成为苹果开发者就必须注册苹果开发者账号并付费，拥有了开发者账号后可以开发相应计划的App并上线App store提供免费或付费下载，或是开发给企业内部使用。苹果为注册了发者账号的开发者提供了如下几类计划：</p>

<ul>
<li>iOS开发计划</li>
</ul>


<p><img src="http://ryantang.me/images/2013/08/apple_account_1/1.png" alt="ios" /></p>

<p>iOS开发者计划主要为iOS设备进行App开发，比如iPhone和iPad等，iOS计划也是目前苹果整个开发者计划类型中人数最多的。账号类型分为个人（Individual）、公司（Company）、企业（Enterprise）、高校（University）四种类型，每年资费分别为$99、$99、$299、免费。根据账号类型的不同，申请的条件和所具有的权限也不同。</p>

<p>个人计划只需要填写个人信息并通过苹果审核即可，公司计划需要出示相应的公司信息、营业执照等，企业账号需要出示的信息和公司账号类似，高校计划需要提供高校基本信息，在注册方式上苹果开发者官网有详细的流程。</p>

<p>在权限上，个人账号和公司账号同为$99/年，但是在发布署名上，公司账号可以填写公司或组织信息（比如某某公司、某某工作室），而个人账号只能默认显示注册时填写的个人信息，并且不能修改。另外，公司账号提供团队开发的模式，一个公司类型账号可以管理添加开发者作为Team member协同开发。当然，也可以将个人账号升级为公司账号，前提是得提供相关公司信息并且得邮件联系开发者支持中心或者拨打支持电话。企业账号为$299/年，企业账号和前两者最大的不同在于不能将App发布到App store，但可以将App放到内部服务器上提供给企业内部任意一台设备进行安装，并且不需要特别绑定Device ID。例如企业内部OA系统如果是用iOS设备的话，那就适合这个计划。最后一种是高校计划，苹果为鼓励高校更多的参与到苹果开发者计划中来，特意推出这一项计划，高校计划具有在真机上测试等权限，但不能将App发布到App store。</p>

<ul>
<li>Mac开发计划</li>
</ul>


<p><img src="http://ryantang.me/images/2013/08/apple_account_1/2.png" alt="ios" /></p>

<p>Mac开发者计划主要是针对在Mac电脑上进行App开发的开发人员，费用是$99每年。账号类型也分为个人和公司两种，两种账号的区别和iOS设备开发者账号类似。</p>

<ul>
<li>Safari扩展开发计划</li>
</ul>


<p><img src="http://ryantang.me/images/2013/08/apple_account_1/3.png" alt="ios" /></p>

<p>Safari开发者计划主要是在Safari浏览器上进行一些扩展开发，比如自定义Safari的控件或者页面显示方式等，这个计划申请是免费的。同样分为个人和公司两种类型。</p>

<ul>
<li>MFi计划</li>
</ul>


<p><img src="http://ryantang.me/images/2013/08/apple_account_1/4.png" alt="ios" /></p>

<p>MFi计划主要针对iPod、iPhone以及iPad的一些外设的开发，这个计划也是免费的，通过苹果提供的一些接口和条款进行外设的开发，比如针对iPod和iPhone的外设音响。</p>

<p>以上就是对苹果开发者账号的开发者计划的简要介绍，详细信息可以查看<a href="https://developer.apple.com/programs/">Apple Developer Programs</a>,那里有非常详细的介绍，同时也可以在那里进行注册和开发计划选择。后面几篇文章我将围绕iOS开发计划相关的内容进行解释，主要包括几种证书的介绍、签名、证书迁移等内容，敬请期待！</p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2013/08/28/apple-account-1/'>http://ryantang.me/blog/2013/08/28/apple-account-1/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android模拟神器——Genymotion]]></title>
    <link href="http://ryantang.me/blog/2013/08/16/genymotion/"/>
    <updated>2013-08-16T15:35:00+08:00</updated>
    <id>http://ryantang.me/blog/2013/08/16/genymotion</id>
    <content type="html"><![CDATA[<blockquote><p>纠结的时光总会过去，<br>
美好和光明就在前方！</p></blockquote>

<p><img src="http://ryantang.me/images/2013/08/genymotion/logo.png" alt="logo" /></p>

<p>刚开始接触Android开发的同学不免都接触过Android自带的模拟器，启动慢、操作卡、没法用，基本属于摆设状态。这是大家对Android模拟器的普遍印象，时至今日，终于出现了一款神器来改变这一印象，那就是<a href = http://www.genymotion.com/ target = _blank >Genymotion</a>，Genymotion是一个基于虚拟机的Android模拟环境，包括了除电话和短信外大部分Android真机的功能，其流畅性和使用体验完全不亚于真机，是Android开发者、测试人员等非常有力的工具。它支持Window、MacOS、Linux，今天的话题就是Genymotion的特性和在Mac上的安装及使用。</p>

<!--More-->


<h2>一、基本特性</h2>

<ul>
<li>支持OpenGL加速以提供良好的3D表现</li>
<li>能从Google Play下载和安装应用</li>
<li>提供电量控制、GPS和加速传感器控制模拟</li>
<li>和ADB完美结合，能像传统模拟器和真机一样通过命令行控制模拟器</li>
<li>提供丰富的自定义属性，包括屏幕分辨率、内存大小和CPU控制等</li>
<li>能在Eclipse上进行应用开发和调试</li>
<li>支持多模拟器运行</li>
</ul>


<h2>二、安装</h2>

<ul>
<li>1.Genymotion依赖于虚拟机VirtualBox，它是Oracle公司开发的一套虚拟机运行环境，和VMware类似。所以，安装之前我们先需要安装<a href = https://www.virtualbox.org/wiki/Downloads target = _blank >VirtualBox</a>。</li>
<li>2.安装完VirtualBox后就可以到<a href = https://cloud.genymotion.com/page/launchpad/download/ target = _blank >Genymotion下载</a>页下载安装包了（在此需要先注册Genymotion的使用账号）。下载完成后双击dmg文件并将Genymotion和Genymotion shell拖入Application文件夹中，至此，便完成了Genymotion的下载和安装。</li>
<li>3.到Application文件夹中找到Genymotion并双击运行，可以看到如下界面，从列表中选择一个准备安装的虚拟机点击Add(这一步需要登陆之前注册的账号)，然后便会下载该模拟器需要的安装文件和配置信息：</li>
</ul>


<p><img src="http://ryantang.me/images/2013/08/genymotion/1.png" alt="1" /></p>

<p>下载完成后点击Next：</p>

<p><img src="http://ryantang.me/images/2013/08/genymotion/3.png" alt="3" /></p>

<ul>
<li>4.下载完成后就可以看到我们选择的模拟器已经存在于我们的虚拟机列表中了，运行前，先要启动一下VirtualBox然后在点击窗口中的Play图标，后续使用时直接点击Play即可启动Android模拟器了。</li>
</ul>


<p>运行VirtualBox：</p>

<p><img src="http://ryantang.me/images/2013/08/genymotion/7.png" alt="7" /></p>

<p>运行安装好的Android模拟器，点击右边的小显示器图标可以配置模拟器的显示分辨率：</p>

<p><img src="http://ryantang.me/images/2013/08/genymotion/4.png" alt="4" /></p>

<ul>
<li>5.启动后会要求配置Android SDK的路径，选择并确定SDK的安装目录，然后点击OK，至此，Genymotion的下载和安装就完成了。</li>
</ul>


<p>配置Android SDK路径：</p>

<p><img src="http://ryantang.me/images/2013/08/genymotion/5.png" alt="5" /></p>

<p>Android模拟器运行效果：</p>

<p><img src="http://ryantang.me/images/2013/08/genymotion/6.png" alt="6" /></p>

<h2>支持</h2>

<p>Genymotion支持Eclipse和IntelliJ插件，可以直接通过Eclipse进行项目开发和调试，同时，也可以通过ADB命令行对模拟器进行相应的操作。</p>

<p>Eclipse连接Genymotion模拟器：</p>

<p><img src="http://ryantang.me/images/2013/08/genymotion/2.png" alt="2" /></p>

<p>更多功能请参阅官方<a href="https://cloud.genymotion.com/page/doc/">User Guide</a></p>

<blockquote><p>后记：Genymotion的出现可以说是一场革命，改变了开发者对Android模拟器以往糟糕表现的看法。Genymotion基于VirtualBox虚拟机搭建，所以如果本机配置够高的话，用Genymotion来取代真机进行测试和开发是完全可以的（大部分项目），另外，不足的是Genymotion目前支持的模拟器类型有限，相信后期会不断的新增和优化！</p></blockquote>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2013/08/16/genymotion/'>http://ryantang.me/blog/2013/08/16/genymotion/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信，和你和我！]]></title>
    <link href="http://ryantang.me/blog/2013/08/10/about-weichat/"/>
    <updated>2013-08-10T17:05:00+08:00</updated>
    <id>http://ryantang.me/blog/2013/08/10/about-weichat</id>
    <content type="html"><![CDATA[<blockquote><p>一个软件！<br>
一种工具！<br>
一份消遣！<br>
一个平台！</p></blockquote>

<p><img src="http://ryantang.me/images/2013/08/about_wechat/1.png" alt="wechat" /></p>

<p>微信是什么？对于这个问题，微信之父张小龙也没有给出答案，他认为，微信对每个人都有他们的理解方式。微信可以是一个手机软件、是一种聊天工具、是一份在无聊时的消遣、是一个充满商机的平台……。每个人，都对它有不同的解释和理解，或许，这样的效果是张小龙所希望的。没错，微信有很多种，它的每一种形态，都和你和我有关！</p>

<!--More-->


<p>微信5.0更新有几天了，引起了很多的反响，不管谁对它是一种怎样的理解方式，微信效应在不断的侵蚀着整个移动互联网。一款将近4亿用户的手机应用，正在影响和改变着人们的生活。这里，我不再写说明说去介绍微信5.0的那些新功能或充斥对微信那些细致入微的评测，我只是来谈谈微信和你和我的关系，和一直在改变的这种关系！</p>

<h2>一、那些年我们用过的微信</h2>

<p>很久很久以前，你有没有上课传过小纸条？很久以前，你有没有写过信？不是很久以前，你有没有用着诺基亚通过手机版QQ和小伙伴们重复那些小纸条和信里的内容？没错，这些，都是那些年我们用过的微信。</p>

<p>是什么改变了这一切？是iPhone？是科技进步了？是小纸条和信封略显老土了吗？我觉得都不是，而是人们在寻找一种更直接、更方便、更及时的方式来重复那些年的小纸条和信。乔布斯说过，“Apple存在的目的不是像其他公司一样为了利益而制造产品，而是生产优化人类固有能力的工具”。小纸条和信是表达和传递我们需要交流和沟通这种固有能力的工具，而微信，只是在科技的进步、智能手机的出现、产品技术成型的条件下出现的一种取代纸笔的另一种工具。最初的微信，解决的就是我们需要沟通和交流这种固有能力的工具。</p>

<p>随着小伙伴们都不断长大，去了别的城市、去上大学、去工作、去出国，都开始有了各自的圈子和各自丰富的生活。小伙伴的友谊总是那么深厚，于是开始给各自寄照片、寄明信片，述说着自己的生活和故事。同样，这种原始的需求在传统的工具条件下得不到直接的满足，照片需要冲洗、邮寄需要跑邮局，而这时，“朋友圈”的出现优化了这种固有能力，前提也是那些变化着的东西。</p>

<p>随着时间的推移，小伙伴们开始怀念童年那种天性的释然，放学操场丢沙包、打弹珠、跳皮筋，比比谁赢的多。而今，时间、地域的限制让小伙伴们只能怀念那些曾今的美好。而这次出现的“游戏中心”，把小伙伴们都带回了遗失的那些年。不同的是，这次是下班或不忙的时候，玩玩那个简单又粗糙的“打飞机”游戏，和小伙伴们比比谁的分数高。其实，玩的不是游戏，打的不是飞机，而是怀念曾今那份和小伙伴们打沙包、调皮筋的美好。分数超过谁了，去炫耀一下，看被谁超过了，不甘心一定要追上去，这些都是我们最本真的欲望和需求。</p>

<p><img src="http://ryantang.me/images/2013/08/about_wechat/QQ20130810-5.png" alt="wechat" />
<img src="http://ryantang.me/images/2013/08/about_wechat/QQ20130810-6.png" alt="wechat" /></p>

<h2>二、一切从找朋友开始</h2>

<p>一个人的世界总是无色的、苍白的，是没有快乐的。人类的存在和发展最初也是以群落为基础而慢慢进化。生活中，我们需要家人需要朋友；工作中，我们需要同事和合作伙伴。这些都是我们身边的人，而和这些人建立联系，总需要一个切入点，或者是朋友聚会，或者是工作关系，或者只是路边的一次邂逅。我们需要和别人交流，而交流的对象就是朋友。找朋友，有两种最原始的方式，一种是直接认识，第二种是通过别人介绍认识，而往往来说，第一种方式会让大部分人感觉不自在，人天生都有羞涩感，所以这是一个需求。微信中“附近的人”和“漂流瓶”正好就满足了这个需求，尽管当初的设计不是为了让有些人利用这个功能来做某些别的事。而第二种方式是让人们感觉比较舒服的方式，没有那种羞涩和局促感，可以很自然的去接受。新朋友找到了，为了维持一份长久的联系，需要交换各自的联系方式，而当初的“摇一摇”和这次新增的“按住找朋友”满足了这个需求，相比之下，我个人更喜欢后者。</p>

<p>好了，有了朋友了，我们可以开始无时无刻的聊天，可以在朋友圈分享生活和工作中的点点滴滴，可以比比玩游戏谁的分数高。一切，从找朋友开始！</p>

<p><img src="http://ryantang.me/images/2013/08/about_wechat/QQ20130810-7.png" alt="wechat" />
<img src="http://ryantang.me/images/2013/08/about_wechat/QQ20130810-3.png" alt="wechat" /></p>

<h2>三、来自生活，服务生活</h2>

<p>微信中还有很多功能在我们的生活和工作中都能用到，可能更多的时候大家是把它当做一种聊天和娱乐工具，这和其天生的基因是分不开的，那么它都有哪些来自于生活，又服务于生活的功能呢，我例举本次更新的几个：</p>

<ul>
<li>收藏夹，这个功能类似记事本，可以记录文字、声音、图片以及位置等，这些功能都不出奇，很多更好的产品已经做的很好了，但这些功能加在微信上就有了其特别的意义，你可以收藏和朋友间温馨的一次交谈，可以收藏可以永久珍藏的一段语音记录，可以收藏照片，可以收藏你去过的地点，可以将公众账号你觉得精彩的内容收藏起来稍后阅读。这些功能都不出奇，但因为他们在微信上，所以有了天然的优势。</li>
</ul>


<p><img src="http://ryantang.me/images/2013/08/about_wechat/QQ20130810-9.png" alt="wechat" />
<img src="http://ryantang.me/images/2013/08/about_wechat/QQ20130810-10.png" alt="wechat" /></p>

<ul>
<li>街景导航，以前，当我们和朋友越好见面地点时，因为描述不清楚附近的具体位置，导致很多的麻烦和不便。街景地图的出现，即可以解决这以问题，另外还能衍生出很多很多的服务，想象空间很大。试想，发送一个位置给好友赴约，是一个死板的地址更好呢，还是一副生动的街景地图更合适？</li>
</ul>


<p><img src="http://ryantang.me/images/2013/08/about_wechat/QQ20130810-11.png" alt="wechat" />
<img src="http://ryantang.me/images/2013/08/about_wechat/QQ20130810-12.png" alt="wechat" /></p>

<ul>
<li>扫一扫，新版的扫一扫集成了二维码、条形码、封面、街景、翻译，这些功能需求都来源于生活，同时又服务于生活。二维码和条码就不说了，封面和街景以及翻译功能可谓是丰富了扫一扫这个功能集。扫一扫封面可以查看到书籍或是CD的具体信息，介绍以及购买地点等，用街景扫一扫可以看到周围地点的实景图，另外，翻译功能直接对准文字可以进行及时翻译。这些功能单独拿出来可以说都不出奇，但恰恰因为他们是在微信上。</li>
</ul>


<p><img src="http://ryantang.me/images/2013/08/about_wechat/QQ20130810-4.png" alt="wechat" />
<img src="http://ryantang.me/images/2013/08/about_wechat/QQ20130810-2.png" alt="wechat" /></p>

<h2>四、我想要的微信</h2>

<p>我想要的微信是一个设计漂亮、体验卓越的手机软件；我想要的微信是一个让我在生活和工作上与朋友无缝沟通和提高效率的工具；我想要的微信是一个能在我闲暇时光给我带来一份消遣的寄托；我想要的微信是一个能提供丰富信息和咨询的平台。我想要的这些，现在都有了。因为我是个普通用户，我不知道我想要什么。但同时我也是一个App设计和开发者，偶尔会站在产品和技术的角度去思考一下这些我认为已经带给我的东西。</p>

<p>微信，和你和我！我们究竟要的是什么？这个问题每个人都有自己的答案，而微信团队给我们的答案是，“微信，是一个生活方式”！</p>

<blockquote><p>后记：我所说的不一定是对的！</p></blockquote>

<p><code>Focus on life. Focus on work. Don't let yourself regret forever! ——Ryan</code></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2013/08/10/about-weichat/'>http://ryantang.me/blog/2013/08/10/about-weichat/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android推送服务——百度云推送]]></title>
    <link href="http://ryantang.me/blog/2013/08/06/baidu-push-service/"/>
    <updated>2013-08-06T15:59:00+08:00</updated>
    <id>http://ryantang.me/blog/2013/08/06/baidu-push-service</id>
    <content type="html"><![CDATA[<p>本文已授权InfoQ进行转载：<a href="http://www.infoq.com/cn/articles/baidu-android-cloud-push">http://www.infoq.com/cn/articles/baidu-android-cloud-push</a></p>

<blockquote><p>身在天朝，置身墙内<br>
或是自给，或是出走</p></blockquote>

<h2>一、推送服务简介</h2>

<p>消息推送，顾名思义，是由一方主动发起，而另一方与发起方以某一种方式建立连接并接收消息。在Android开发中，这里的发起方我们把它叫做<code>推送服务器（Push Server）</code>，接收方叫做<code>客户端（Client）</code>。相比通过轮询来获取新消息或通知，推送无论是在对客户端的资源消耗还是设备耗电量来说都比轮询要好，所以，目前绝大多数需要及时消息推送的App都采用Push的方式来进行消息通知。</p>

<p><img src="http://ryantang.me/images/2013/08/baidu_push_service/1.jpg" alt="push" /></p>

<!--more-->


<p>身在天朝，置身墙内！Android生态系统原本提供了类似于Apple iOS推送服务<code>APNS</code>的<code>GCM(Google Cloud Messaging for Android)</code>，以前叫<code>C2DM</code>,但是由于某些原因，导致这项服务在国内不是很好使，为了弥补这个不足，并且我朝各大同胞又想使用Android推送服务，所以国内各大平台陆续推出了<code>GCM</code>的替代品，今天要介绍的就是其中一家，由百度提供的云推送。另外，国内做消息推送服务的还有极光推送和个推等，他们的客户包括新浪微博、淘宝等国内一线大公司。</p>

<p>推送的实现技术简单来说就是利用Socket维持Client和Server间的一个TCP长连接，通过这种方式能大大降低由轮询方式带来的Device的耗电量和数据访问流量。目前，百度云推送提供的推送服务支持的单一消息体大小是4k，如果超过4k，则建议在消息内携带服务请求URL进行二次请求。目前，百度云推送针对Android端提供通知推送，文本消息推送以及富媒体推送。</p>

<h2>二、使用场景</h2>

<h4>1. 单播消息推送</h4>

<p>Push Server向指定的设备（Device）或是用户（User）推送消息，一个用户对应一个<code>userID</code>，一个User可能拥有多台Device，我们希望向同一个userID推送消息时，他所有绑定了userID的Device都能收到消息。百度云推送给出的解决方案是通过Client向Push Server注册，并在Client端的监听端口取得Push Server返回的  <code>channelID</code>和<code>userID</code>，<code>channelID</code>指定一个终端，在向Push Server注册的过程中，Device可以发送IMIE码或者UUID作为唯一标示，在Push Server注册后再返回给Client生成的<code>channelID</code>和<code>userID</code>。这两个ID获取到后由开发者自行维护，注册完毕后，Push Server维护一个注册设备列表，这个列表维护了<code>userID</code>和<code>channelID</code>以及与Device对应的关系，当需要向指定的设备或用户推送消息时，Push Server会首先遍历这个设备列表，通过这两个ID来做唯一性判断并找到需要推送消息的Device，然后就可以进行消息推送了。</p>

<p><img src="http://ryantang.me/images/2013/08/baidu_push_service/2.jpg" alt="push" /></p>

<p>实例：用户A发表问题时，记录问题id及其对应的A的userID（或channelID），用户B发表问题回答时，通过服务端API向问题id对应的userID（或channelID）指向的Device推送答案。</p>

<h4>2. 分组消息推送</h4>

<p>百度云推送通过对Client设置标签（Tag）的方式来进行用户分组，Tag的产生方式可以是由Client维护也可以由Server收集，Push Server针对不同的Tag进行推送过滤，最终将消息推送到指定的Client。无论是由Client主动设置的Tag还是由Server根据用户使用习惯收集的，都由Push Server进行统一管理，在基于Tag的分组消息推送实现上，Push Server首先根据指定Tag从所有Tag下遍历出的对应的已注册的Device，从而可以获得与Device对应的<code>userID</code>和<code>channelID</code>，继而可以针对指定Tag进行分组消息推送。对比单播消息推送，分组消息推送在推送周期上势必要长一些，并且在待推消息列表的维护上也需要做一些处理，哪些消息是推送成功的，哪些是失败的，这需要接收消息推送的Client在接收到消息后给Push Server一个消息回执，这样就保证了消息送达的准确性，如果消息推送失败，则分组列表里的待推消息会继续推送，直到推送消息成功。另外，在消息推送的实时性上，分组消息推送对比单播消息推送会根据分组消息队列的先后存在一个消息接收的延时，好比现在微信公众账号的推送，就是一个分组消息推送的实例，在消息接收的时效性上对比单播推送存在一定的延时性。</p>

<p>另外，还有一类消息推送使用场景，就是广播消息，该类型可以理解为分组消息的一个特列，即向所有的Tag对应的Client推送消息。广播消息是对全体集合的一个消息推送，在消息队列维护和消息推送时效性上比单个或几个Tag的分组推送成本要高。</p>

<p>实例：给应用提供喜好设置页面，用户勾选不同的类别，触发对应Tag的设置，这种方式是由Client主动维护Tag。或者用户阅读了某个类别的图书，触发对应Tag的设置，在服务端，给指定类别的图书设置Tag，后续会根据服务端收集的Tag给应用推送该Tag下的新书信息，这种方式就是由服务端来维护Tag分组。</p>

<h2>三、百度云推送Android_SDK</h2>

<p>百度提供了完整的Demo帮助开发者集成云推送服务，推送服务SDK通过.jar包和.so文件的方式可以集成到我们自己的工程中。在此之前，需要到百度开发者中心进行应用注册并获取<code>API Key</code>，这个作为使用推送服务应用的唯一标示，具体流程我就不赘述了，需要使用的话可以直接访问<code>百度开发者中心</code>进行查看。</p>

<p>下面主要看看Android_SDK的整体概览和内部运行机制：</p>

<p><img src="http://ryantang.me/images/2013/07/baidu_push_service/1.png" alt="structure" /></p>

<p>上图是百度云推送Android_SDK的框架图，通过SDK可以绕过复杂的Push HTTP/HTTPS API直接和Push服务器进行交互，主要提供如下功能：</p>

<ul>
<li>Push服务初始化以及Client注册绑定</li>
<li>创建或删除标签（Tag）</li>
<li>接收Push Server的通知并提供自定义展现消息方式</li>
<li>推送统计分析功能，包括通知的点击和删除统计以及应用使用情况统计</li>
<li>富媒体推送</li>
</ul>


<p>在Android端，总共实现了三个Receiver和一个Service，其中，一个Receiver是用来处理注册绑定后接收服务端返回的channelID等信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;receiver</span> <span class="na">android:name=</span><span class="s">&quot;com.baidu.android.pushservice.RegistrationReceiver&quot;</span>
</span><span class='line'><span class="na">android:process=</span><span class="s">&quot;: bdservice_v1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;com.baidu.android.pushservice.action.METHOD &quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;com.baidu.android.pushservice.action.BIND_SYNC &quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.PACKAGE_REMOVED&quot;</span><span class="nt">/&gt;</span> <span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">&quot;package&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;/receiver&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二个Receiver是用于接收系统消息以保证PushService正常运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;receiver</span> <span class="na">android:name=</span><span class="s">&quot;com.baidu.android.pushservice.PushServiceReceiver&quot;</span> <span class="na">android:process=</span><span class="s">&quot;: bdservice_v1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.BOOT_COMPLETED&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;com.baidu.android.pushservice.action.notification.SHOW&quot;</span> <span class="nt">/&gt;</span> <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;com.baidu.android.pushservice.action.media.CLICK&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;/receiver&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>第三个Receiver就是开发者自己实现的用来接收并处理推送消息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;receiver</span> <span class="na">android:name=</span><span class="s">&quot;your.package.PushMessageReceiver&quot;</span><span class="nt">&gt;</span> <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'><span class="c">&lt;!-- 接收 push 消息 --&gt;</span>
</span><span class='line'><span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;com.baidu.android.pushservice.action.MESSAGE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="c">&lt;!-- 接收 bind、setTags 等 method 的返回结果 --&gt;</span>
</span><span class='line'><span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;com.baidu.android.pushservice.action.RECEIVE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;/receiver&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个Service就是在后台运行的用于保障与Push Server维持长连接并做相关处理的后台服务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;service</span> <span class="na">android:name=</span><span class="s">&quot;com.baidu.android.pushservice.PushService&quot;</span>
</span><span class='line'><span class="na">android:exported=</span><span class="s">&quot;true&quot;</span> <span class="na">android:process=</span><span class="s">&quot; bdservice_v1&quot;</span><span class="nt">/&gt;</span> <span class="c">&lt;!-- push service end --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在开发者自己需要处理的广播接收器中，可以对接收到的推送消息进行处理，Push消息通过 action为com.baidu.android.pushservice.action.MESSAGE的Intent把数据发送给客户端your.package.PushMessageReceiver，消息格式由应用自己决定，PushService只负责把服务器下发的消息以字符串格式透传给客户端。接口调用回调通过action为com.baidu.android.pushservice.action.RECEIVE的Intent 返回给your.package.PushMessageReceiver。</p>

<figure class='code'><figcaption><span>PushMessageReceiver.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Push消息处理receiver</span>
</span><span class='line'><span class="cm"> * @Author Ryan</span>
</span><span class='line'><span class="cm"> * @Create 2013-8-6 下午5:59:38</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PushMessageReceiver</span> <span class="kd">extends</span> <span class="n">BroadcastReceiver</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="n">PushMessageReceiver</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="kd">final</span> <span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">intent</span><span class="o">.</span><span class="na">getAction</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">PushConstants</span><span class="o">.</span><span class="na">ACTION_MESSAGE</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//获取消息内容</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getExtras</span><span class="o">().</span><span class="na">getString</span><span class="o">(</span>
</span><span class='line'>                  <span class="n">PushConstants</span><span class="o">.</span><span class="na">EXTRA_PUSH_MESSAGE_STRING</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">//消息的用户自定义内容读取方式</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onMessage: &quot;</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">intent</span><span class="o">.</span><span class="na">getAction</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">PushConstants</span><span class="o">.</span><span class="na">ACTION_RECEIVE</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//处理绑定等方法的返回数据</span>
</span><span class='line'>          <span class="c1">//PushManager.startWork()的返回值通过PushConstants.METHOD_BIND得到</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//获取方法</span>
</span><span class='line'>          <span class="kd">final</span> <span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">intent</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">getStringExtra</span><span class="o">(</span><span class="n">PushConstants</span><span class="o">.</span><span class="na">EXTRA_METHOD</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">//方法返回错误码。若绑定返回错误（非0），则应用将不能正常接收消息。</span>
</span><span class='line'>          <span class="c1">//绑定失败的原因有多种，如网络原因，或access token过期。</span>
</span><span class='line'>          <span class="c1">//请不要在出错时进行简单的startWork调用，这有可能导致死循环。</span>
</span><span class='line'>          <span class="c1">//可以通过限制重试次数，或者在其他时机重新调用来解决。</span>
</span><span class='line'>          <span class="kd">final</span> <span class="kt">int</span> <span class="n">errorCode</span> <span class="o">=</span> <span class="n">intent</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">getIntExtra</span><span class="o">(</span><span class="n">PushConstants</span><span class="o">.</span><span class="na">EXTRA_ERROR_CODE</span><span class="o">,</span>
</span><span class='line'>                          <span class="n">PushConstants</span><span class="o">.</span><span class="na">ERROR_SUCCESS</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">//返回内容</span>
</span><span class='line'>          <span class="kd">final</span> <span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span>
</span><span class='line'>                  <span class="n">intent</span><span class="o">.</span><span class="na">getByteArrayExtra</span><span class="o">(</span><span class="n">PushConstants</span><span class="o">.</span><span class="na">EXTRA_CONTENT</span><span class="o">));</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//用户在此自定义处理消息,以下代码为demo界面展示用 </span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onMessage: method : &quot;</span> <span class="o">+</span> <span class="n">method</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onMessage: result : &quot;</span> <span class="o">+</span> <span class="n">errorCode</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onMessage: content : &quot;</span> <span class="o">+</span> <span class="n">content</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过在入口Activity的onCreate方法中进行推送服务的注册绑定后，即可在推送管理后台或是自己的应用服务器上进行消息推送的操作了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PushManager</span><span class="o">.</span><span class="na">startWork</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span><span class="n">PushConstants</span><span class="o">.</span><span class="na">LOGIN_TYPE_API_KEY</span><span class="o">,</span> <span class="s">&quot;you_api_key&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，云推送提供php、java等Server端的SDK供开发者在自己的服务器上实现推送服务进行定制化管理和操作。</p>

<h2>四、单服务单通道机制</h2>

<p>百度云推送实现了单服务单通道的机制，如果在一台Device上安装了多款Push SDK的应用，不会为每个应用都创建PushService，而是会采用多应用共享一个PushService的模式。这样既能减少资源消耗也能降低网络流量。PushService运行于一个独立进程，没有和主进程运行于同一进程，所以主进程不需要常驻内存，当有新的Push消息时，PushService会通过Intent发送消息给主进程进行处理。通过Intent，以指定目标应用包名的方式，发送私有消息给应用。应用即不能接收不属于自己的消息，也不能截取别人的消息，同时又降低了消耗，如下为示意图：</p>

<p><img src="http://ryantang.me/images/2013/07/baidu_push_service/2.png" alt="structure" /></p>

<blockquote><p>后记：如今，国内提供Android推送服务的还有很多家，例如个推和极光推送等，实现的原理大同小异，开发者可以根据自身需要进行选择。身在天朝，置身墙内，用不到GCM，就创造Android Push Service for China自给，或者，出走！</p></blockquote>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2013/08/06/baidu-push-service/'>http://ryantang.me/blog/2013/08/06/baidu-push-service/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客写作之我说]]></title>
    <link href="http://ryantang.me/blog/2013/08/02/how-to-write-blog/"/>
    <updated>2013-08-02T15:03:00+08:00</updated>
    <id>http://ryantang.me/blog/2013/08/02/how-to-write-blog</id>
    <content type="html"><![CDATA[<blockquote><p>写或不写，博客就在那里！<br>
带不走什么，却带来很多！<br>
惊不起风云，却掀起心中涟漪！</p></blockquote>

<h2>一、为什么迁移</h2>

<p><img src="http://ryantang.me/images/2013/07/how_to_write_blog/zone1.png" title="CSDN" alt="old" />
<img src="http://ryantang.me/images/2013/07/how_to_write_blog/zone2.png" title="ryantang.me" alt="new" /></p>

<!--more-->


<p>首先感谢大家一直以来的支持，如果你看到这篇文章，说明你是<code>Ryan's Zone</code>的QQ群友或是微信公众账号<code>Android及iOS开发汇总</code>的朋友。前阵子折腾了几天，使用Octopress基于Github搭建了自己的博客，申请绑定了自己的域名<code>ryantang.me</code>，直到今天才开始正式写第一篇文章，之前的文章还是会留在<a href="http://blog.csdn.net/ryantang03" target="_blank">CSDN博客</a>上，今后的文章我会全部发表在<code>ryantang.me</code>上。对我来说，这又是一个新的开始，重新开始在这里写博客主要基于如下几个考虑：</p>

<blockquote><ul>
<li>使用Github能对文章进行备份，拥有本地版本和线上版本</li>
<li>能在没有网络的情况下照样写博客，并且能本地预览效果，联网后部署即可</li>
<li>使用Markdown写作，写代码一样写博客，降低了写作成本，方便很多</li>
<li>博客自定义度非常高，并且能绑定专属域名，关键是没人在你这打广告</li>
<li>至于为什么没用WordPress，去问问那些从WordPress转过来的朋友：）</li>
</ul>
</blockquote>

<h2>二、为什么写作</h2>

<p>为什么写博客？这个问题很多人都问过我，其实很简单，我的第一篇文章纯粹是为了记录一个笔记，为了不让自己忘记，为了能有地可查，就这么简单。但后来发现，写作的过程其实本身是对知识梳理的过程，能更清晰的加深对内容的理解，同时，自己记录的一些东西能帮助到别人，能给别人一些参考，这样，写作的意义就不仅仅是原本记录那么简单了。</p>

<p>我从2012年7月开始正式写博客，到现在正好一年，在CSDN累计发表文章100篇，平均4天一篇，博客访问量截止这篇文章写作时共33万次，累计评论近600条。基于博客上互动的朋友建立Android群两个、iOS群两个，累计人数近2000人，开通微信公众账号<code>Android及iOS开发汇总</code>，订阅人数近1000人，写过的文章有被<a href="http://www.leiphone.com/0731-warlial-android.html">雷锋网</a>和<a href="http://blog.jobbole.com/33186/">伯乐在线</a>转载。这些，都是刚开始写作时没有想到的。如果让我现在来回答为什么写博客？我可以这么说：“写作让我所学沉淀，写作让我广交朋友，写作让我实现个人价值”！</p>

<h2>三、如何写作</h2>

<p>其实这个问题没有标准的回答，就像每个人都有自己的穿衣喜好，而我的写作喜好往往是遵循以下流程：</p>

<blockquote><ol>
<li>选题，必须是我感兴趣的、觉得有用的、不只我一个人会遇到的问题，或者是一个写我想说的话（例如这篇文章）；</li>
<li>写作构思，我一般按总分总的形式来写（是不是有点像在上作文课，哈哈！），围绕题目阐明目的、作用等，然后说明相关的原理和使用流程以及注意事项，最后再总结以下感受等（以上针对技术类文章）；</li>
<li>文章结构，我比较喜欢条理清晰，我自己写或是看别人的文章都倾向条理性比较强的，不喜欢什么东西一大堆，看不出重点和所以然，所以多用标注和数字来划分结构；</li>
<li>语言风格，我比较倾向平民化的文风，不太喜欢那些太高深、让人觉得有距离的语言风格，写东西本来是让别人看的，让别人看得懂、不费劲儿，才是首要目的，所以不在乎写的有多优美，自己能看懂、别人能看懂，你若看懂，便是晴天！</li>
<li>文章排版，字体不要太小、太密，让别人看的不舒服。能用图说明的问题尽量用图，千言万语也抵不过一张一目了然的图解。要是能图文并茂，那真是极好的！</li>
</ol>
</blockquote>

<p>以上5点就是我写作的方法流程，是这一年多以来自己慢慢总结和感受的一些东西，说不上对所有人有用，起码我认为对我有用，就像本节开头说的，这是我的“穿衣喜好”！</p>

<h2>四、何时何地写作</h2>

<p>写东西是需要花时间的，一篇好文章尤其需要精雕细琢，成文前的准备工作就需要花上一些时间，写作的过程和后期的校对也需要花时间。对于我等IT从业者来说，时间本是一奢侈物。平时工作学习就很忙，很多朋友说腾不出时间写东西，或是说下班就累的不行，哪有精力还去写东西。我的观点是，写作并不需要安排专门的时间，不要把它当做一项固定的任务，如果这样，你会很累。如果是技术类文章，肯定是工作或学习中遇到或正在研究的问题，取得一定的进展后，自己肯定有些方法和心得，这个时候，花上半个到一个小时，把思路整理一下，迅速成文，要知道，解决问题的那一刹那，你的思维是最活跃、也是最清晰的。我的很多文章都是在那个时候写出来的。</p>

<p>对我来说，写东西是个放松的过程，所以我一般会选择晚上或者周末写，在家里躺床上、坐椅子上，听着音乐一边写一边吃点零食，不是很享受吗，起码我很享受！嘿嘿！平时学习或工作的空档期我也会用来写写东西，闲着也是闲着，写点东西沉淀下自己，追求内心的一种平静吧！另外，我在家里写过、在学校图书馆写过、在教室写过、在实验室写过、在公司写过、在咖啡厅写过、在机场写过、在飞机上写过，我还想去山上写写、去海边写写、去异国他乡写写！</p>

<h2>五、写作带给我什么</h2>

<p>要说写作带给我什么，更多的是一种对事物理解方式的变化。以前看待事物大都停留于表象，难以剖析内涵。开始写东西后，逐渐不满足于现象，开始喜欢深究本源。写作带给我一群认真的朋友，他们很多是没有见过面的，但网络的好处就是你可以结识各地志同道合的朋友。他们给你意见、帮你成长、带给你喜悦、指出你的问题。写作带给我知识上的沉淀，所学所用不可能永远存在脑海里，随着时间和经历的变迁，很多东西会遗忘，通过记录把当下学习、工作或是经历的一些东西记下来，一年后、两年后······，会有让自己感动的那一天，因为你看到了自己经历的那些年，看到了自己成长的那些轨迹。写作带给我一种成就感，当自己的文章被阅读成千上万次，当看到文章有留言表示对自己的感谢，当看到文章被转载，这都是一种成就感，虽然不是物质上的，但这更超过物质上的回报。写作带给我一个机会，让我组织了一群人，让我建立了一个交流平台，让我获得更多的机会，让我锻炼了各方面的能力。写作让我更接近真实的自我，能让浮躁的心平静下来，能感受到一些不一样的东西！</p>

<p>写或不写，博客就在那里，见证你的经历和成长！带不走什么，却带来很多，带给你知识、朋友、成就感！惊不起风云，却掀起心中涟漪，如果你爱上写作，它会让你重新认识生活、学习、工作！</p>

<blockquote><p>后记：我所说的不一定是对的！</p></blockquote>

<p><code>Focus on life. Focus on work. Don't let yourself regret forever! ——Ryan</code></p>

<p class='post-footer'>
        原文地址：
        <a href='http://ryantang.me/blog/2013/08/02/how-to-write-blog/'>http://ryantang.me/blog/2013/08/02/how-to-write-blog/</a>
        <br/>
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"></a>版权声明：保持署名-非商用-禁止演绎 | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a> | <img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-nd/3.0/80x15.png" />
        </p>

]]></content>
  </entry>
  
</feed>
